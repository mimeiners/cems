[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Concept Engineering Mixed-Technology Systems",
    "section": "",
    "text": "1 Unsyllabus\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nCourse\nM 1.9 Concept Engineering Mixed-Technology Systems (CEMS)\n\n\nTerm\nWinter 2024/25\n\n\nInstructor\nProf. Dr.-Ing. M. Meiners, Dipl.-Ing. (FH) T. Ziemann\n\n\n\n(c) 2024-2025 Mirco Meiners and co-authors, Hochschule Bremen - City University of Aplied Sciences (HSB), Bremen, Germany\nThe course makes heavy use of circuit simulation, using Xschem for schematic entry and ngspice for simulation. The 130nm CMOS technology SG13G2 from IHP Microelectronics is used.\nTools and PDK are integrated in the IIC-OSIC-TOOLS Docker image, which will be used during the coursework.\nAll course material is made publicly available and shared under the Apache-2.0 license.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Unsyllabus</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html",
    "href": "lec/lec-01-intro.html",
    "title": "2  Introduction and Survey",
    "section": "",
    "text": "2.1 Course Objectives",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#course-objectives",
    "href": "lec/lec-01-intro.html#course-objectives",
    "title": "2  Introduction and Survey",
    "section": "",
    "text": "Interfacing Microsystems\n\nMixed-technology systems (System-on-Chip, SoC)\nSystem analysis\nSystem specification\n\nDesign Methodology\n\nSeamlessly modeling and design over all physical domains\n\nPCB (System) and IC Design\n\nArchitecture\nPartitioning\nLayout",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#scientific-computing",
    "href": "lec/lec-01-intro.html#scientific-computing",
    "title": "2  Introduction and Survey",
    "section": "2.2 Scientific Computing",
    "text": "2.2 Scientific Computing\n\nPython (Anaconda)\nMatlab (Campus Lizenz)\nCommand-line tools",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#eda-tools",
    "href": "lec/lec-01-intro.html#eda-tools",
    "title": "2  Introduction and Survey",
    "section": "2.3 EDA Tools",
    "text": "2.3 EDA Tools\n\nPCB / System Design\n\nLTspice\nKiCad EDA\nAltium Designer\nSiemensEDA PCB tools\ncadence System Design & Analysis\n\nIC / Silicon Design\n\nIIC-OSIC-TOOLS (open-source)\nSiemensEDA IC tools\ncadence IC Design & Verification\nsynopsys silicon design (IC)",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#os-tools",
    "href": "lec/lec-01-intro.html#os-tools",
    "title": "2  Introduction and Survey",
    "section": "2.4 OS-Tools",
    "text": "2.4 OS-Tools\n\nMicrosoft-Terminal\nMicrosoft-PowerShell\nMacOS-Terminal\nLinux/MacOS Shell zsh-tools,\ngit (Versionskontrolle)",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#code-editors",
    "href": "lec/lec-01-intro.html#code-editors",
    "title": "2  Introduction and Survey",
    "section": "2.5 Code Editors",
    "text": "2.5 Code Editors\n\nVisual Studio Code\nSpyder IDE\nThonny (Micro-)Python IDE\nEmacs\nVim",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#data-science",
    "href": "lec/lec-01-intro.html#data-science",
    "title": "2  Introduction and Survey",
    "section": "2.6 Data Science",
    "text": "2.6 Data Science\n\nJournaled File System\n\nDirectories\nFiles\n\nRectangular Data\n\nComma-Separated-Values (CSV), Tab-Separated-Values (TSV)\ncsvkit: A suite of utilities for converting to and working with CSV, the king of tabular file formats.\n[miller: Miller is like awk, sed, cut, join, and sort for name-indexed data such as CSV, TSV, and tabular JSON] (https://github.com/wireservice/csvkit)\nSpreadsheet (.xlsx, .ods)\napache/iceberg: Apache Iceberg\napache/iceberg-python: Apache PyIceberg\n\nSerialisation\n\nData Serialization — The Hitchhiker’s Guide to Python\nJSON\nMessagePack: It’s like JSON. but fast and small.\n\nData Frames\n\nMastering Python Dictionaries: Efficient Data Storage and Retrieval - Adventures in Machine Learning\nMAT-File Versions - MATLAB & Simulink - MathWorks Deutschland\nHDF5 Or How I Learned To Love Data Compression And Partial I/O\nWhat is Apache Parquet?\nFeather File Format\npola-rs/polars: Dataframes powered by a multithreaded, vectorized query engine\nibis-project/ibis: Portable Python dataframe library\n\nEmbedded Databases\n\nSQL, z.B. SQlite\nOLAP, z.B. DuckDB",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#publish-computational-content",
    "href": "lec/lec-01-intro.html#publish-computational-content",
    "title": "2  Introduction and Survey",
    "section": "2.7 Publish Computational Content",
    "text": "2.7 Publish Computational Content\n\nquarto\n\nManuscripts\n\nJupyter-Book",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#are-you-writing-or-texing",
    "href": "lec/lec-01-intro.html#are-you-writing-or-texing",
    "title": "2  Introduction and Survey",
    "section": "2.8 Are you writing or TeXing?",
    "text": "2.8 Are you writing or TeXing?\n\nMikTeX (Windows, MacOS, Linux)\nMacTeX (MacOS)\nTeXLive (Linux)",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#latex-editors",
    "href": "lec/lec-01-intro.html#latex-editors",
    "title": "2  Introduction and Survey",
    "section": "2.9 LaTeX Editors",
    "text": "2.9 LaTeX Editors\n\nIDE’s\n\nTeXStudio\nTeXMaker\n\nCollaborative Frameworks\n\nOverleaf, Online LaTeX\nCoCalc - Online LaTeX",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#bibliography-and-latex",
    "href": "lec/lec-01-intro.html#bibliography-and-latex",
    "title": "2  Introduction and Survey",
    "section": "2.10 Bibliography and LaTeX",
    "text": "2.10 Bibliography and LaTeX\n\nCitavi im Detail &gt; Titel exportieren &gt; Export nach BibTeX\nRefWorks - Library Guide Univ. Melbourne\nBenutzerdefinierte BibTex-Keys mit Zotero | nerdpause\nJabRef - Library Guide Univ. Melbourne\nEndNote - Library Guide Univ. Melbourne",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#model-based-systems-engineering-mbse-of-an-inertial-sensor-system-and-ic-design",
    "href": "lec/lec-01-intro.html#model-based-systems-engineering-mbse-of-an-inertial-sensor-system-and-ic-design",
    "title": "2  Introduction and Survey",
    "section": "2.11 Model-Based Systems Engineering (MBSE) of an Inertial Sensor System and IC Design",
    "text": "2.11 Model-Based Systems Engineering (MBSE) of an Inertial Sensor System and IC Design\nThis winter term, the defining idea of the CEMS course is a modular board-level sensor system consisting of ADXL335 accelerometer, ADS1115 ADC and ESP8266 NodeMCU. The ADC module has to be replaced by a custom IC design.\n\n\n\n\n\n\nflowchart LR\n    A(ADXL335) --&gt; B(ADS1115)\n    B --&gt; C(ESP8266)\n    C --&gt; D{Measurement}\n    D --&gt; E(Thonny Micropython)\n    D --&gt; F(Arduino IDE C)\n\n\n\n\nFigure 2.1: Modular board-level sensor system.\n\n\n\n\n\n\nSystem level, behavioural model\n\nMatlab/Simulink,\nPython\n\nPCB level\n\nESP8266 NodeMCU,\nTIs ADS1115,\nADs ADXL335\n\nIC level, SPICE with behavioural blocks, e.g. OTA and comparator\n\nIIC-OSIC-TOOLS IHP130-based analog and digital chip design\n\nFinal Oral Exam/Project Presentation",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lec/lec-01-intro.html#course-prerequisites",
    "href": "lec/lec-01-intro.html#course-prerequisites",
    "title": "2  Introduction and Survey",
    "section": "2.12 Course Prerequisites",
    "text": "2.12 Course Prerequisites\n\nFundamentals of linux operating systems\nFundamentals of microelectronics\n\nDevice physics and models\nTransistor level analog circuits, elementary gain stages\n\nFundamentals of analog circuit design\n\nOperational amplifier\nActive filter design\nNoise analysis\nSwitched-capacitor techniques\n\nPrior exposure to SPICE, Matlab, Python or equivalent.",
    "crumbs": [
      "Lecture",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction and Survey</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html",
    "href": "lab/elie1/index.html",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "",
    "text": "4 Introduction\nAs the availability of standardized integrated circuit solutions decreases, the demand for tailored, application-specific designs is on the rise Dobkin and Williams (2011). In response to this trend, students participating in the “Concept Engineering Mixed-Technology Systems” course, led by Professor Meiners at The City University of Applied Sciences, have been given the task of designing an Analog-to-Digital Converter (ADC). The aim is to develop a suitable replacement for the Texas Instruments ADS1115, tailored to meet the requirements of a specified measurement system.\nThe role of data conversion is fundamental in modern electronics. As digital processing technology continues to advance, speeds have reached unprecedented levels, and semiconductor components are now manufactured with nanometer precision, enabling Gigahertz-level data rates as a standard. Despite these technological strides, the physical world remains inherently analog, creating a necessity for reliable conversion techniques to interface analog signals with high-performance digital systems Kester (2005).\nIn modern mixed-signal circuits, analog signal processing is increasingly complemented by digital signal processing. This shift allows for the use of lower-quality analog components, offset by the complexity and efficiency of digital systems R. J. Baker (2008). From an engineering perspective, this trade-off plays a crucial role in designing high-performance ADCs, where digital compensation techniques can improve accuracy while reducing reliance on precise analog circuitry. As a result, contemporary ADC architectures integrate sophisticated digital algorithms to enhance resolution and dynamic range while minimizing the impact of analog imperfections.\nThis necessity spans multiple fields, including acoustics, optics, and mechanical sensing. To ensure accurate digital representation of analog data, ADCs must operate with high speed, precision, and reliability, making them critical components in modern electronic applications.\nThe fundamental concept of interfacing the analog and digital domains is illustrated in Figure 4.1. The diagram shows the sequential flow from analog input signals, through analog-to-digital conversion, followed by digital data processing, and finally through digital-to-analog conversion to produce an analog output. This process highlights the critical role of reliable data conversion techniques in modern mixed-signal systems.\nThis report explores one of the most effective ADC architectures: the Sigma-Delta converter. The following sections provide a theoretical overview of ADC operation, analyze key performance characteristics at the system level, and develop foundational circuit models that replicate the desired conversion behavior. Lastly, a detailed circuit design will be presented, verified through SPICE simulations in the xschem design environment, outlining practical implementation strategies for integrated circuit fabrication.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#system-overview",
    "href": "lab/elie1/index.html#system-overview",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "4.1 System Overview",
    "text": "4.1 System Overview\nThe measurement system under consideration for this semester’s project is a classical mixed-signal architecture designed for precise data acquisition and processing. At its core, the system utilizes an accelerometer as the primary analog sensor, responsible for capturing physical acceleration data from the environment. This analog signal is inherently continuous and requires conversion into the digital domain to enable efficient processing, analysis, and communication.\nTo achieve this, the analog output from the accelerometer is fed into an ADC. The ADC performs the crucial task of sampling the continuous analog signal and quantizing it into discrete digital values. These digital signals can then be processed by a microontroller, which serves as the central processing unit for the system. Within the microcontroller, further operations such as filtering, data interpretation, and wireless communication can be performed, depending on the application requirements.\nFor the hardware implementation of this signal chain, the following components have been selected:\n\nADXL335 Accelerometer\nA low-power, three-axis analog output accelerometer capable of measuring acceleration with a full-scale range of ±3 g. It provides a simple and reliable analog voltage output proportional to acceleration, making it ideal for integration into the system.\nADS1115 ADC\nA high-precision, 16-bit analog-to-digital converter from Texas Instruments. It features a programmable gain amplifier (PGA) and an I²C-compatible interface, offering excellent resolution and flexibility for capturing low-level analog signals from the accelerometer.\nESP8266 Microcontroller\nA highly integrated microcontroller with built-in Wi-Fi capability. It not only handles the digital data processing but also enables wireless communication, making it suitable for IoT-based measurement applications.\n\nThis system architecture ensures a robust interface between the analog sensing domain and the digital processing domain, highlighting the importance of accurate data conversion and efficient signal processing in modern measurement systems.\nThe high-level architecture of the described measurement system is illustrated in Figure 4.2 below. It shows the data flow from the analog accelerometer (ADXL335), through the analog-to-digital converter (ADS1115), and finally to the digital microcontroller (ESP8266) for further processing and communication.\n\n\n\n\n\n\nFigure 4.2: Top-Level Measurement System\n\n\n\nIn addition to the top-level architecture, the internal structure and functionality of the individual components are shown in the following figures. These diagrams provide insight into the signal flow and the key subsystems involved in the measurement system.\n\n4.1.1 ADXL335 Block Diagram\nFigure 4.3 presents the internal block diagram of the ADXL335 accelerometer. It consists of a three-axis MEMS sensor, followed by an AC amplifier and demodulator stage. Each axis output is then buffered through separate output amplifiers, providing analog voltage signals corresponding to acceleration along the X, Y, and Z axes. These outputs are routed to external filtering components to stabilize the signal.\n\n\n\n\n\n\nFigure 4.3: ADXL335 Block Diagram\n\n\n\n\n\n4.1.2 ADS1115 Block Diagram\nFigure 4.4 illustrates the functional block diagram of the ADS1115 Analog-to-Digital Converter. The ADC features a multiplexer (MUX) that allows for the selection between multiple input channels, followed by a programmable gain amplifier (PGA). The 16-bit delta-sigma ADC performs high-resolution conversion of the input signal. An internal voltage reference, oscillator, and I²C interface facilitate accurate conversion and communication with external devices. The comparator and ALERT/RDY functionality provide additional flexibility for system integration.\n\n\n\n\n\n\nFigure 4.4: ADS1115 Block Diagram\n\n\n\n\n\n4.1.3 ESP8266 Pinout Diagram\nFinally, Figure 7.5 displays the ESP8266 microcontroller module pinout. This microcontroller includes GPIO pins, I²C and SPI communication interfaces, and a built-in Wi-Fi module. The diagram highlights the various available digital interfaces for connecting to peripheral devices, as well as power and ground connections necessary for integration into the system. The ESP8266 is responsible for receiving the digital data from the ADS1115 and handling subsequent processing and wireless communication.\n\n\n\n\n\n\nFigure 4.5: ESP8266 Pinout Diagram",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#sampling",
    "href": "lab/elie1/index.html#sampling",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "5.1 Sampling",
    "text": "5.1 Sampling\nAs shown, a set of key components is essential for converting an analog signal into a discrete-time representation. A fundamental aspect of this process is sampling, as it ensures the conversion of an analog signal into a discrete-time signal (Bajdechi 2004).\nIn practical applications, sampling can occur in one of three modes. If the highest frequency present in the signal is limited to \\(f_{\\max}\\), the sampling approaches are categorized as follows (Williams and Taylor 2006):\n\nCritically sampled: \\(f_s = 2 f_{\\max},\\)\nOversampled: \\(f_s &gt; 2 f_{\\max},\\)\nUndersampled: \\(f_s &lt; 2 f_{\\max}.\\)\n\nCritical sampling refers to setting the sampling rate to the lowest possible value that still satisfies the sampling theorem. If this condition is not met, aliasing occurs, preventing accurate reconstruction of the input signal due to overlapping frequency components. To ensure that the highest frequency of the analog signal remains below the Nyquist frequency, an analog prefilter - known as an anti-aliasing filter - is typically placed between the signal source and the ADC. A well-designed anti-aliasing filter effectively attenuates signal energy above the Nyquist frequency. In practice, the input signal is often affected by noise, which may contain frequency components outside the desired range. Therefore, it is also essential that the filter removes out-of-band noise, as it could otherwise alias into the signal band after sampling and degrade the quality of the sampled values (Pavan, Schreier, and Temes 2017). Undersampling can occur either deliberately or unintentionally. In both scenarios, the sampling rate is chosen to be lower than the Nyquist frequency. As a result, aliasing takes place (Williams and Taylor 2006).\nFurthermore, it is important to note that sampling results in a periodic repetition of the spectrum. The following example illustrates this:\n\n\n\n\n\n\n\nFigure 5.2: Original spectrum\n\n\n\n\n\n\n\n\n\nFigure 5.3: Periodic repetition of the spectrum\n\n\n\nIf the conditions of the sampling theorem are met, the input signal can be fully reconstructed by filtering with an ideal low-pass filter with a cutoff frequency \\({{\\omega_g}}\\) and an amplitude of \\({{T_a}}\\) (Goldenbaum 2022):\n\\[\nH_{AAF}(\\omega) = T_a \\, \\operatorname{rect}(\\omega / 2\\omega_g). \\tag{1}\n\\]\n\n\n\n\n\n\nFigure 5.4: Reconstruction by filtering with a low-pass filter\n\n\n\nIn the frequency domain, an ideal low-pass filter with a specific cutoff frequency is used to fully reconstruct the signal. Since this corresponds to a multiplication with a rectangular function in the frequency domain, it results in a convolution with the sinc function in the time domain. The sinc interpolation is a series expansion in which the maxima of the individual sinc functions coincide with the sampled values. Each sample point is associated with a corresponding sinc function. Consequently, the original function can be reconstructed as a weighted sum of sinc functions, where each sample value corresponds to a sinc function shifted by the sampling period \\(T_a\\). The superposition of these sinc functions then reconstructs the original function (Meyer 2019).\n\n\n\n\n\n\nFigure 5.5: Example of a reconstruction of a sampled signal using sinc interpolation",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#quantization",
    "href": "lab/elie1/index.html#quantization",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "5.2 Quantization",
    "text": "5.2 Quantization\nQuantization is a nonlinear, memoryless operation (Pavan, Schreier, and Temes 2017). It refers to the conversion of a continuous-valued signal into a signal with a finite set of values (Goldenbaum 2022). Unlike the sampling process, quantization is an irreversible operation, leading to a loss in the resolution of the digitized signal (Rosa 2011).\nThe quantization operator is typically described by a quantization characteristic:\n\n\n\n\n\n\nFigure 5.6: Quantization characteristic (Goldenbaum 2022)\n\n\n\nThe quantization level \\(Q\\) defines the respective quantization intervals. These intervals are determined by the word length \\(q\\) (also referred to as the bit width). The relationship is given by \\(Q = 2^q\\). The greater the word length, the more quantization intervals exist. This means that the quantization becomes more precise, as the difference between the actual value and the quantized value continuously decreases (Goldenbaum 2022).\nThe delta (\\(\\Delta\\)) represents the accuracy and is defined as \\(\\Delta = 2/Q\\). This implies that as \\(Q\\) increases, the word length \\(q\\) also grows, and \\(\\Delta\\) becomes smaller. Since the step size between quantization levels decreases, the resolution improves (Goldenbaum 2022). After quantization, digital signals are generated. Each quantization interval is assigned a unique code number.\nThe quantization process also imposes a limitation on the performance of an ideal ADC, as an error is introduced during the conversion of the input signal from a continuous to a discrete amplitude representation. This error, commonly known as quantization error, will be discussed in more detail in a later chapter.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#system-outline",
    "href": "lab/elie1/index.html#system-outline",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "6.1 System Outline",
    "text": "6.1 System Outline\n\nA \\(\\Delta\\Sigma\\) converter operates as a 1-bit sampling system, where an analog input signal is sampled multiple times through oversampling. At its core, the \\(\\Delta\\Sigma\\) modulator converts the analog signal into a high-speed, single-bit pulse stream while shaping the quantization noise. The modulator can be analyzed in both the time domain and frequency domain.\n\n\n\n\n\n\nFigure 6.2: First-order \\(\\Delta\\Sigma\\) modulator in the time domain (Baker 2011)\n\n\n\nFigure 6.2 depicts the time-domain representation of the modulator. It consists of a difference amplifier, an integrator, and a comparator, with a feedback loop incorporating a 1-bit DAC.\nThe system continuously calculates the difference between the input signal and a feedback signal, emphasizing changes rather than absolute values. This difference signal is then integrated, influencing the output direction. When the integrator output reaches the comparator threshold, the 1-bit ADC quantizes it into a binary value. The output is fed back through a 1-bit DAC, creating a closed-loop system that shapes the noise and stabilizes the signal. The resulting pulse waveform represents the input signal, and when averaged over time, it approximates the original analog input (Baker 2011). The DAC functions as a simple switch that connects the negative input of the difference amplifier to either a positive or negative reference voltage. Its primary role is to keep the integrator’s average output near the comparator’s reference level (Maxim 2003).\n\n\n\n\n\n\nFigure 6.3: First-order \\(\\Delta\\Sigma\\) modulator in the frequency domain\n\n\n\nFigure 6.3 shows the frequency-domain representation. In this domain, the combination of integration and oversampling functions as a noise-shaping filter, enabling high-resolution conversion by pushing noise outside the signal band. Thanks to these characteristics, \\(\\Delta\\Sigma\\) ADCs are widely used in applications requiring high accuracy, such as audio processing, sensor technology, and precision measurements .\n\n\n\n\n\n\nWhy is it called Delta-Sigma?\n\n\n\nThe name Delta-Sigma originates from the key mathematical operations performed in the modulator.\n\nDelta (Δ) represents the difference operation. The system continuously calculates the difference between the input signal and the feedback signal, ensuring that it tracks changes rather than absolute values. This differentiation process helps in shaping the quantization noise.\n\nSigma (Σ) refers to accumulation (or integration). After computing the difference, the error signal is integrated over time, effectively summing past values. This process shapes the noise spectrum, reducing in-band noise while pushing most of it to higher frequencies.\n\nSome sources use the term Sigma-Delta instead of Delta-Sigma, emphasizing the integration first. However, both terms describe the same modulation technique.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#fundamental-concepts",
    "href": "lab/elie1/index.html#fundamental-concepts",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "6.2 Fundamental Concepts",
    "text": "6.2 Fundamental Concepts\n\n\n\n\n\n\nFigure 6.4: Fundamental concepts of the \\(\\Delta\\Sigma\\) ADC\n\n\n\nA \\(\\Delta\\Sigma\\) ADC leverages advanced signal processing techniques to achieve higher resolution than conventional ADCs. Oversampling increases the sampling rate beyond the Nyquist frequency, spreading quantization noise over a wider frequency range. Noise shaping further pushes this noise into higher frequencies, where it can be effectively removed by digital filtering. Finally, decimation reduces the sample rate while preserving the signal’s integrity, resulting in a high-precision digital output.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#oversampling",
    "href": "lab/elie1/index.html#oversampling",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "6.3 Oversampling",
    "text": "6.3 Oversampling\nIf an ADC operates faster than \\(2f_{\\text{max}}\\), it is considered an oversampled ADC. In this case, the oversampling ratio (OSR) is a design parameter that indicates how many times \\(f_s\\) is larger than the minimal value required by the Nyquist theorem.\n\\[\nOSR = \\frac{f_s}{2 f_{\\text{max}}}, \\tag{2}\n\\]\nwhere \\(f_{\\text{max}}\\) is the maximum signal frequency, which is the signal bandwidth (Pavan, Schreier, and Temes 2017).\nOversampled ADCs impose significantly less stringent requirements on the filter compared to Nyquist rate converters, as the signal is sampled at a frequency that far exceeds its bandwidth (Boser and Wooley 1988). One advantage of oversampling ADCs is that they simplify the requirements for the AAF, as can be seen in Figure 6.5. It is important to note that the AAF for a Nyquist converter must have a sharp transition band, which often results in phase distortion for signal components near the cut-off frequency (Rosa 2011), as can be seen in Figure 5.4.\n\n\n\n\n\n\nFigure 6.5: Antialiasing filter for oversampling ADCs\n\n\n\nHowever, oversampling has another effect that must be considered: noise. This phenomenon, known as quantization noise, arises for the following reason: while the ADC input is a continuous signal with an infinite range of possible values, the digital output is discrete, with the number of distinct states determined by the converter’s resolution. As a result, the analog-to-digital conversion process inevitably discards some information, introducing a certain degree of distortion into the signal. The associated error varies randomly, with a magnitude of up to ±1 LSB (Clifford 2016). Figure 6.9 shows the signal with quantization noise:\n\n\n\n\n\n\nFigure 6.6: Quantization noise in Nyquist-rate ADCs\n\n\n\nIn practice, an ideal quantizer is often described using a linear model, provided that certain assumptions about the statistical properties of the quantization error hold. The quantization error \\(e(n)\\) is directly dependent on the quantizer input signal \\(q(n)\\), as shown in Figure 6.7.\n\n\n\n\n\n\nFigure 6.7: Multi-bit quantization error\n\n\n\nIf \\(q(n)\\) is considered to vary randomly from sample to sample within the interval \\([-\\Delta/2, +\\Delta/2]\\), the quantization error \\(e(n)\\) will also be uncorrelated between successive samples. Under these assumptions, the quantization error can be represented as a random process following a uniform probability distribution within the range \\([-\\Delta/2, +\\Delta/2]\\), as shown in Figure 6.8.\n\n\n\n\n\n\nFigure 6.8: Probability density function (PDF) of the quantization error assuming a uniform distribution\n\n\n\nAs can be seen, quantization noise exhibits characteristics similar to white noise in the frequency domain, maintaining a constant power spectral density across the entire frequency range. The power associated with the quantization error can thus be computed as (Rosa and Río 2013):\n\\[\n\\overline{e^2} = \\sigma_e^2 = \\int_{-\\infty}^{\\infty} e^2 \\, \\text{PDF}(e) \\, de = \\frac{1}{\\Delta} \\int_{-\\Delta/2}^{+\\Delta/2} e^2 \\, de = \\frac{\\Delta^2}{12}. \\tag{3}\n\\]\nThe former assumption implies that the power of the quantization error will also be uniformly distributed in the range \\([-f_s/2, +f_s/2]\\), yielding (Rosa and Río 2013):\n\\[\n\\overline{e^2} = \\int_{-\\infty}^{\\infty} S_E(f) \\, df = S_E \\int_{-f_s/2}^{+f_s/2} df = \\frac{\\Delta^2}{12}, \\tag{4}\n\\]\nso that the PSD of the quantization error in this range is:\n\\[\nS_E = \\frac{\\overline{e^2}}{f_s} = \\frac{\\Delta^2}{12 f_s}.\\tag{5}\n\\]\nThese assumptions are referred to as the additive white noise approximation of the quantization error. They allow a quantizer, which is inherently deterministic and nonlinear, to be represented using a random linear model. This model is expressed as (Rosa and Río 2013):\n\\[\ny(n) = k_q(n) + e(n) \\tag{6} ,\n\\]\nwhere \\(e(n)\\) represents the quantization noise.\nUsing this approximation of quantization error as white noise, the performance of ideal ADCs can be easily evaluated. In a Nyquist ADC, where \\(f_s = 2 f_{\\text{max}}\\), all the quantization noise power remains within the signal band and appears at the ADC output as part of the input signal itself, as illustrated in Figure 6.9.\nConversely, if an oversampled signal is quantized, only a fraction of the total quantization noise power lies within the signal band, as illustrated in Figure 6.9:\n\n\n\n\n\n\nFigure 6.9: Quantization noise in oversampling ADCs\n\n\n\nWhile the SNR remains unchanged, the noise energy is now distributed across a broader frequency range (Maxim 2003). The in-band noise power (IBN) caused by the quantization process in an ideal oversampling ADC is thus (Pavan, Schreier, and Temes 2017):\n\\[\n\\text{IBN} = \\int_{-f_{\\text{max}}}^{+f_{\\text{max}}} S_E(f) \\, df = \\int_{-f_{\\text{max}}}^{+f_{\\text{max}}} \\frac{\\Delta^2}{12 f_s} \\, df = \\frac{\\Delta^2}{12 \\text{OSR}} \\tag{7},\n\\] where \\(S_E(f)\\) is the quantization error power spectral density, \\(\\Delta\\) is the quantization resolution, \\(f_s\\) is the sampling frequency, and OSR represents the oversampling ratio (Pavan, Schreier, and Temes 2017).\nNote that the SNR for a 1-bit ADC is 7.78 dB (6.02 + 1.76). Each factor-of-4 oversampling increases the SNR by 6 dB, and every 6 dB increase corresponds to gaining one additional bit of resolution. A 1-bit ADC with 24× oversampling can achieve a resolution of four bits. However, achieving 14-bit resolution would require oversampling by a factor of \\(4^{15}\\), which is impractical (Maxim 2003).\n\\(\\Delta\\Sigma\\) converters address this limitation through noise shaping, a technique that enables a gain of more than 6 dB per factor-of-4 oversampling (Maxim 2003).",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#noise-shaping",
    "href": "lab/elie1/index.html#noise-shaping",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "6.4 Noise shaping",
    "text": "6.4 Noise shaping\nTo further improve the conversion resolution at the same sampling frequency \\(f_s\\) and with the same number of ADC bits, noise shaping can be applied. This is accomplished by high-pass filtering the quantization noise to displace most of its power from low frequencies, where the input signal spectrum resides, to higher frequencies near \\(f_s/2\\) (Bajdechi 2004), ensuring that most of its power is moved outside the signal band (Rosa and Río 2013).\nTo understand noise shaping, the system can be analyzed from different perspectives. Starting with Figure 6.2, the 1-bit DAC in the feedback loop can be observed. The primary role of the feedback DAC is to keep the integrator’s average output near the comparator’s reference level. The density of ones at the modulator output is proportional to the input signal. As the input increases, the comparator generates a higher number of ones, and conversely, for a decreasing input, fewer ones are produced. By summing the error voltage, the integrator acts as a low-pass filter for the input signal and a high-pass filter for the quantization noise. As a result, most of the quantization noise is shifted to higher frequencies (Maxim 2003).\nAnother way to analyze the system, especially with regard to noise shaping, is by using linear models.\n\n6.4.1 Linear Model\nFigure 6.10 illustrates an idealized linear model of a delta-sigma modulator, represented as a negative feedback system. \\(x\\) represents the discrete-time input signal to the system, \\(y\\) is the system’s output signal and \\(k_q\\) refers to the gain factor of the quantization error and can be chosen arbitrarily in the case of a 1-bit quantizer. The model aims to improve the understanding that the goal is to have a frequency-dependent gain. This gain should be infinite at low frequencies so that the noise transfer function (NTF) has a small magnitude at low frequencies. The lowest-order system with these characteristics is an integrator. \\(\\frac{1}{1 - z^{-1}}\\) represents the discrete-time integrator. It accumulates the error signal over time and is a key element in shaping the noise spectrum. \\(z^{-1}\\) is a unit delay element, which models the feedback delay in the loop (Pavan, Schreier, and Temes 2017).\n\n\n\n\n\n\nFigure 6.10: Ideal linear model\n\n\n\nAt the heart of the model is the loop filter, a fundamental component that shapes the spectral characteristics of the quantization noise. Functionally, it acts as a discrete-time integrator, enabling past sample values to influence the current output. This feedback mechanism is essential for achieving noise shaping, as it suppresses in-band noise while pushing the quantization error toward higher frequencies, where it can be more easily filtered.\nThe following equation shows the relationship between the system’s input, quantization error, and output:\n\\[\nY(z) = z^{-1} X(z) + (1 - z^{-1}) E(z).\\tag{8}\n\\]\nIt illustrates that the output \\(Y(z)\\) consists of the delayed input signal \\(X(z)\\) and the shaped quantization error. Here, \\(z^{-1}\\) represents the signal transfer function (STF), while the noise transfer function (NTF), \\((1 - z^{-1})\\), exhibits a first-order high-pass characteristic with a transmission zero at DC (\\(\\omega = 0\\), i.e., \\(z = e^{j\\omega} = 1\\)), since \\(1 - e^{-j0} = 0\\).\nThe logarithmic plot of the magnitude response of the NTF in log scale shows the first-order nature of the high-pass response, increasing at a rate of 20 dB per decade (Pavan, Schreier, and Temes 2017).\nThe in-band noise power decreases proportionally to \\(OSR^{-3}\\).\n\\[\n\\text{IBN} = \\frac{\\Delta^2}{24\\pi} \\int_{-\\frac{\\pi}{OSR}}^{\\frac{\\pi}{OSR}} |(1 - e^{-j\\omega})|^2 d\\omega\n= \\frac{\\Delta^2}{12\\pi} \\int_{0}^{\\frac{\\pi}{OSR}} 4 \\sin^2\\left(\\frac{\\omega}{2}\\right) d\\omega\n\\]\n\\[\n\\approx \\frac{\\Delta^2}{12\\pi} \\int_{0}^{\\frac{\\pi}{OSR}} \\omega^2 d\\omega\n= \\frac{\\Delta^2}{36\\pi} \\frac{\\pi^3}{OSR^3}.\n\\]\nWhen the oversampling ratio is doubled, the in-band noise power reduces by 9 dB, which results in an effective resolution improvement of 1.5 bits. In contrast, basic oversampling without noise shaping only increases resolution by 0.5 bits for each doubling of the OSR. In principle, achieving high accuracy is possible by selecting a sufficiently large \\(OSR\\). However, combining oversampling with noise shaping significantly reduces the required OSR value.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#second-order-delta-sigma-modulation",
    "href": "lab/elie1/index.html#second-order-delta-sigma-modulation",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "6.5 Second-Order Delta-Sigma Modulation",
    "text": "6.5 Second-Order Delta-Sigma Modulation\nFollowing oversampling and noise shaping, the question arises as to how quantization noise can be further reduced. A modulator that integrates the input signal twice instead of just once is an effective way for that. Figure 6.11 illustrates a 1-bit, second-order modulator that uses two integrators instead of one. In this case, the noise term depends not only on the previous error but also on the two preceding errors.\n\n\n\n\n\n\nFigure 6.11: Second-order \\(\\Delta\\Sigma\\) modulator\n\n\n\nIncreasing the resolution and the effective number of bits (ENOB) in a \\(\\Delta\\Sigma\\) modulator can be achieved by incorporating an additional integrator and feedback path. A linearized analysis in this scenario leads to the expression:\n\\[\nY(z) = z^{-1} X(z) + (1 - z^{-1})^2E(z). \\tag{9}\n\\]\nThis shows that the NTF takes the form \\((1 - z^{-1})^2\\) in the z-domain, applying a shaping function of \\((2 \\sin(\\omega/2))^4\\) to the PSD. As a result, doubling the OSR leads to an increase of approximately 2.5 bits in resolution. This represents a significantly better trade-off compared to a first-order modulator.\nBy incorporating more integrators and feedback branches within the loop, it is possible to achieve higher-order noise transfer functions. In the case of an L-th order loop filter, the NTF follows the form:\n\\[\nNTF(z) = (1 - z^{-1})^L. \\tag{10}\n\\]\nUnder these conditions, the in-band noise power is given by:\n\\[\nIBN = \\frac{\\pi^{2L} e^2_{rms}}{(2L + 1) OSR^{2L+1}}. \\tag{11}\n\\]\n\n\n\n\n\n\nThe Trade-Offs of High-Order \\(\\Delta\\Sigma\\) Modulators\n\n\n\nThe previous discussion suggests that a \\(\\Delta\\Sigma\\) loop with a carefully chosen, very high-order NTF could, in theory, achieve exceptionally high performance. However, if something sounds too good to be true, it probably is. In practice, high-order loops introduce stability challenges. These limitations reduce the achievable resolution to a lower value than the theoretical predictions.\nMoreover, second- and higher-order modulators come with additional drawbacks, including increased complexity, multiple feedback loops, and greater design difficulty.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#decimation",
    "href": "lab/elie1/index.html#decimation",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "6.6 Decimation",
    "text": "6.6 Decimation\nAfter the \\(\\Delta\\Sigma\\) modulator, the decimator follows, which is shown as the final stage in Figure 6.1. The undesirable characteristics of the modulator output include high-frequency noise and a high-speed, 1-bit output rate. Once the signal is in the digital domain, a low-pass digital filter can be applied to attenuate the high-frequency noise, while a down-sampler can be used to reduce the output data rate (Baker 2011).\nA down-sampler with a downsampling factor \\(M\\), where \\(M\\) is a positive integer, produces an output sequence with a sampling rate that is \\({1}/{M}\\) of the input sequence’s sampling rate. It retains every \\(M\\)-th sample of the input sequence and discards the \\(M - 1\\) intermediate samples to generate the output. By removing samples, down-sampling increases the sampling period. If the input sampling rate is defined as \\(F_T = {1}/{T}\\), then the output sampling rate \\(F_M\\) is related to \\(F_T\\) as follows (Wolter 2023):\n\\[\nF_M = \\frac{1}{T_M} = \\frac{1}{M T} = \\frac{F_T}{M}. \\tag{12}\n\\]\nThis means that after down-sampling, the new sampling frequency is a fraction of the original rate. It is also important to examine the frequency-domain relation of a down-sampler. The relationship between input and output in the z-transform domain can be analyzed by the following relation:\n\\[\nY(z) = \\frac{1}{M} \\sum_{k=0}^{M-1} X\\left(z^{1/M} W_M^k\\right). \\tag{13}\n\\]\nThis equation shows that the output spectrum consists of a sum of \\(M\\) stretched and shifted copies of the input spectrum, scaled by a factor of \\(1/M\\).\nThe output spectrum of a down-sampler with a factor of \\(M\\) is given by:\n\\[\nY(e^{j\\omega}) = \\frac{1}{M} \\sum_{k=0}^{M-1} X\\left(e^{j(\\omega - 2\\pi k)/M}\\right). \\tag{14}\n\\]\nAliasing in \\(Y(e^{j\\omega})\\) is completely avoided if and only if:\n\\[\nX(e^{j\\omega}) = 0 \\quad \\text{for} \\quad {\\pi}/{M} \\leq |\\omega| \\leq \\pi . \\tag{15}\n\\]\nThis means that \\(x[n]\\) must be band-limited to \\(\\pm \\pi / M\\) (Wolter 2023).\nIn multistage signal processing systems, the order of downsampling and filtering can be interchanged under certain conditions. This is particularly useful as it allows for computational efficiency in systems with variable sampling rates. A signal \\(x[n]\\) is first downsampled by a factor of \\(M\\) and then processed by the filter \\(H(z)\\):\n\n\n\n\n\n\nFigure 6.12: Multirate Idenetity: Downsampling before filtering\n\n\n\nThe corresponding representation in the Z-domain is:\n\\[\nY_1(z) = H(z) \\frac{1}{M} \\sum_{k=0}^{M-1} X\\left(z^{1/M} W_M^k\\right).\n\\]\nThe order of filtering and downsampling can be interchanged if the original filter \\(H(z)\\) is replaced with \\(H(z^M)\\):\n\n\n\n\n\n\nFigure 6.13: Multirate Idenetity: Filtering before downsampling\n\n\n\nThis equivalence allows for flexibility in system design.\nThe down-sampler retains only every \\(M\\)-th sample. Consequently, it is sufficient to compute only for values that are multiples of \\(M\\), while skipping the computations of the intermediate samples. This results in a computational complexity reduction by a factor of \\(M\\). The decimation filter can be implemented as either an FIR or an IIR filter. Since the output is being downsampled, it is sufficient to compute only for values of \\(n\\) that are integer multiples of \\(M\\). However, the feedback signal must still be computed for all values of \\(n\\). As a result, in such cases, the computational savings are always less than \\(M\\). Therefore, FIR filters are often preferred in multirate systems due to their advantages in stability and implementation efficiency.\n\n6.6.1 Two-Stage Decimator Structure\nAs previously mentioned, interchanging the positions of individual branches in such a cascade can often lead to a more computationally efficient implementation. The basic building blocks for altering the sampling rate only allow for an integer factor change in the sampling rate of a signal. To achieve a fractional (rational) change in the sampling rate, a cascade consisting of a downsampler with factor \\(M\\) and an upsampler with factor \\(L\\) must be used. These rules allow us to reposition the fundamental sampling rate conversion devices within multirate networks to more favorable locations. They prove to be extremely useful in the design and analysis of more complex systems (Mitra 2001).\n\n\nFor the decimation filter the computational savings can be achieved, especially with FIR filters. With IIR filters, the simplification is only partially applicable. While only every \\(M\\)-th output is used, the internal recursive nature of the filter requires the computation of all intermediate values. This limits the potential efficiency gain. However, IIR filters can still be more efficient overall due to their typically lower required filter order compared to FIR filters.\nThe following example is intended to demonstrate how to design a decimator for specific specifications. It is important to understand the concept behind systems engineering, so that the decimator can be implemented for different parameter values as well. In this case, a decimator is designed for the system in order to reduce the sampling rate of the signal from 220 kHz to 430 Hz. The specifications are assumed to be as follows:\n\n\n\nSpecification\nValue\n\n\n\n\nSampling Rate (\\(f_s\\))\n220 kHz\n\n\nOutput Sampling Rate (\\(f_d\\))\n430 Hz\n\n\nPassband Edge (\\(f_p\\))\n215 Hz\n\n\nStopband Edge (\\(f_{sb}\\))\n250 Hz\n\n\nPassband Ripple (\\(\\delta_p\\))\n0.002\n\n\nStopband Ripple (\\(\\delta_s\\))\n0.001\n\n\nOSR\n512\n\n\n\nThe desired decimator with a down-sampling factor \\(M\\) = 512 is shown below.\n\n\n\n\n\n\nFigure 6.14: Desired Decimator with a down-sampling factor of \\(M\\) = 512\n\n\n\nSince the signal of interest occupies the range \\([-\\pi/\\text{OSR}, \\pi/\\text{OSR}]\\), it can be down-sampled by a factor of OSR without introducing aliasing. This results in a sequence that is sampled at the Nyquist rate (Pavan, Schreier, and Temes 2017), where the output sampling frequency is \\(f_s = 2 \\cdot f_{\\text{sig,max}} = 430\\,\\text{Hz}\\).\nThe meaningful variables in this overall system are the modulator’s sampling rate \\(f_s\\) and the digital/decimation filter’s output-data rate \\(f_d\\). The ratio between these two variables is defined as the decimation ratio (DR). In this example, the decimation ratio (DR) is 512, which is the result of dividing the modulator’s sampling rate of 220 kHz by the output data rate of 430 Hz. A high DR reduces quantization noise and results in a higher effective number of bits (ENOB), whereas a low DR leads to increased noise and lower ENOB.\nThe filter order \\(N\\) (i.e., length \\(N+1\\)) must first be estimated. The required order \\(N\\) can be calculated using the following equation:\n\\[\nN = \\frac{-20 \\log_{10} \\left( \\sqrt{\\delta_p \\delta_s} \\right) - 13}{14.6 \\Delta f} \\tag{16},\n\\]\nwhere \\(\\Delta f = (f_{sb} - f_p) / f_s\\) is the normalized transition bandwidth. Alternatively, the filter order of \\(H(z)\\) can also be estimated using the firpmord function. For these specifications, the filter order is \\(N = 19138\\). Thus, the number of multiplications per second required for the decimation filter is given by:\n\\[\nR_{M,H} = 19138 \\cdot 430 = 8{,}229{,}340\\ \\text{mult/sec.}\n\\]\nThe obvious problem with this approach is that it is extremely computationally intensive and therefore highly inefficient. It would lead to high power consumption, which is particularly disadvantageous for embedded systems, as well as increased resource usage in general. For this reason, a step-by-step design of a two-stage decimator is considered. First, the decimation filter \\(H(z)\\) is implemented using an IFIR filter. The decimation factor \\(M\\) is factorized as \\(512 = 256 \\cdot 2\\), allowing the interpolation factor \\(L\\) for \\(F(z^L)\\) to be chosen as \\(L = 256\\). By exploiting the multirate identity, the final two-stage decimator design is derived.\nThe overall ripple of the filter cascade is given by the sum of the two passband ripples. This can be compensated by designing \\(G(z)\\) and \\(F(z)\\) such that each has an equal passband ripple of \\(\\delta_p = 0.001\\) (rather than 0.002). The cascade of \\(G(z)\\) and \\(F(z)\\) achieves a stopband performance at least as good as either \\(F(z)\\) or \\(G(z)\\) individually. Therefore, a stopband ripple of \\(\\delta_s = 0.001\\) can be selected for both filters. This corresponds to the specifications of \\(H(z)\\) stretched by a factor of \\(L = 256\\).\nAs a result, the filter \\(F(z)\\) has:\n\\[\nf_p = 256 \\cdot 215\\ \\text{Hz} = 55{,}040\\ \\text{Hz},\n\\]\n\\[\nf_{sb} = 256 \\cdot 250\\ \\text{Hz} = 64{,}000\\ \\text{Hz}.\n\\]\nFor the stopband edge of \\(G(z)\\):\n\\[\nf_s / 256 - f_{sb} = \\left({220,000}/{256} - 250\\right)\\ \\text{Hz} = 609\\ \\text{Hz}.\n\\]\nThe frequency specifications of \\(F(z)\\) and \\(G(z)\\) are summarized as follows:\n\n\\(F(z):\\ f_p = 55.04\\ \\text{kHz},\\ f_{sb} = 64\\ \\text{kHz},\\)\n\\(G(z):\\ f_p = 215\\ \\text{Hz},\\ f_{sb} = 609\\ \\text{Hz}.\\)\n\nThe filter orders of \\(F(z)\\) and \\(G(z)\\) estimated using the firpmord function are \\(N_F = 80\\) and \\(N_G = 1818\\).\nThe implementation of \\(F(z)\\) followed by a factor-of-2 down-sampler requires:\n\\[\nR_{M,F} = 80 \\cdot 430 = 34{,}400\\ \\text{mult/sec}.\n\\]\nThe implementation of \\(G(z)\\) followed by a factor-of-256 down-sampler requires:\n\\[\nR_{M,G} = 1818 \\cdot 860 = 1{,}563{,}480\\ \\text{mult/sec}.\n\\]\nTherefore, the savings compared to the single-filter design are approximately 81%.\nBelow is an illustration summarizing the steps in the two-stage realization of the decimator structure.\n\n\n\n\n\n\nFigure 6.15: The steps in the two-stage realization of the decimator structure",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#clock-phases-in-switched-capacitor-circuits",
    "href": "lab/elie1/index.html#clock-phases-in-switched-capacitor-circuits",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "8.1 Clock Phases in Switched Capacitor Circuits",
    "text": "8.1 Clock Phases in Switched Capacitor Circuits\nSwitched capacitor circuits rely heavily on precise timing signals to control the switching events. Typically, two non-overlapping clock signals, denoted as Φ₁ and Φ₂, are used to drive the switches. These two clock phases ensure that switches are never simultaneously closed, which would otherwise create short circuits and result in charge sharing errors.\n\n8.1.1 Non-overlapping Clock Phases\nIn Figure 8.1, the basic waveforms of Φ₁ and Φ₂ are shown. Φ₁ is high during one period while Φ₂ remains low. After Φ₁ transitions to low, Φ₂ becomes high. This non-overlapping behavior is essential for reliable charge transfer in switched capacitor circuits.\n\n\n\n\n\n\nFigure 8.1: Non-Overlapping Clock Phases\n\n\n\nThese clock phases alternate, controlling the sampling and transfer of charge between nodes. The duration of the clock period and its frequency directly affect the equivalent resistance of the switched capacitor circuit. Specifically, the equivalent resistance R_eq can be described as:\n\\[\nR_{eq} = \\frac{1}{f \\cdot C} \\tag{18}\n\\]\nWhere f is the clock frequency, and C is the value of the switched capacitor.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#timing-diagrams-for-switched-capacitor-operation",
    "href": "lab/elie1/index.html#timing-diagrams-for-switched-capacitor-operation",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "8.2 Timing Diagrams for Switched Capacitor Operation",
    "text": "8.2 Timing Diagrams for Switched Capacitor Operation\nUnderstanding the timing behavior of Φ₁ and Φ₂ in different clocking schemes is essential for accurate circuit operation. In Figure 8.2, we see an extended timing diagram of Φ₁ and Φ₂ that emphasizes their non-overlapping nature over multiple cycles.\nThis timing control prevents both switches from conducting at the same time, thereby avoiding charge injection errors and signal corruption. Such precision in clock phase control is a defining feature of CMOS-based SC implementations.\n\n\n\n\n\n\nFigure 8.2: Timing Diagram of Clock Phases\n\n\n\nThe rise and fall times, as well as the phase separation, are carefully designed in modern integrated circuits to minimize clock feedthrough and other non-ideal effects.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#basic-switched-capacitor-circuit-operation",
    "href": "lab/elie1/index.html#basic-switched-capacitor-circuit-operation",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "8.3 Basic Switched Capacitor Circuit Operation",
    "text": "8.3 Basic Switched Capacitor Circuit Operation\nThe simplest switched capacitor circuit, as shown in Figure 3, consists of two switches and one capacitor. This configuration serves as a charge pump, moving charge from an input node to an output node in discrete time intervals controlled by the clock phases Φ₁ and Φ₂.\n\n8.3.1 Operating Principle\n\nDuring Φ₁, switch S₁ is closed, allowing the capacitor C₁ to charge up to the input voltage V₁.\nDuring Φ₂, switch S₁ opens and switch S₂ closes, transferring the stored charge from the capacitor to the output node V₂.\n\nThis charge transfer process effectively samples the input signal and transfers its equivalent charge to the next stage. The circuit emulates the behavior of a resistor by relating the transferred charge to the voltage difference and the switching frequency.\nThe operation of this circuit can be explained using charge conservation:\n\\[\nQ = C \\cdot V \\tag{19}\n\\]\nThe charge transferred per cycle depends on the input voltage and the capacitance, while the average current is given by:\n\\[\nI_{avg} = \\frac{Q}{T} = C \\cdot V \\cdot f \\tag{20}\n\\]\nThis explains how the circuit behaves like a resistor with resistance 1 / (C · f).\n\n\n\n\n\n\nFigure 8.3: Basic Switched Capacitor Circuit\n\n\n\nBy employing non-overlapping clock signals and discrete charge sampling, SC circuits successfully replicate the behavior of passive resistor networks in integrated circuits.\nSuch designs form the foundation of analog filters, integrators, and ADC building blocks, especially in Sigma-Delta modulation schemes. Understanding these fundamentals allows for the design and implementation of low-power, high-precision, and scalable analog signal processing systems.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#area-efficiency-and-frequency-control-in-switched-capacitor-circuits",
    "href": "lab/elie1/index.html#area-efficiency-and-frequency-control-in-switched-capacitor-circuits",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "8.4 Area Efficiency and Frequency Control in Switched Capacitor Circuits",
    "text": "8.4 Area Efficiency and Frequency Control in Switched Capacitor Circuits\nOne of the main challenges is implementing large and accurate resistances without consuming excessive silicon area. Unlike continuous-time RC filters, which require physically large resistors to achieve low-frequency operation, switched capacitor circuits can emulate resistances through controlled charge transfer, depending only on the clock frequency and the capacitor value. This technique allows designers to achieve high accuracy and area efficiency.\nThe schematic shown in Figure 8.4 illustrates a basic switched capacitor structure controlled by non-overlapping clock phases Φ₁ and Φ₂. During Φ₁, the capacitor is connected to the input, allowing it to charge. During Φ₂, the charge is transferred to the output. This operation is equivalent to moving discrete packets of charge, simulating the current that would flow through a resistor.\n\n\n\n\n\n\nFigure 8.4: Switched Capacitor\n\n\n\nOne of the most valuable properties of switched capacitor circuits is that their equivalent resistance is defined by:\n\\[\nR_{eq} = \\frac{1}{C \\cdot f} \\tag{21}\n\\]\nWhere C is the capacitance and f is the switching frequency. This makes the resistance predictable and easily tunable by simply adjusting the clock frequency, without relying on process-sensitive resistor fabrication.\nThe area savings come from the fact that capacitors generally occupy less silicon area than high-value resistors. Additionally, the matching between capacitors is typically better than the matching between resistors, resulting in more stable and accurate circuit behavior. These advantages make switched capacitor circuits ideal for applications such as integrators in Sigma-Delta ADCs, switched capacitor filters, and precision analog signal processing.\nFinally, because the resistance value depends entirely on the switching frequency and capacitance, designers can dynamically modify a filter’s frequency response by changing the clock rate, providing additional flexibility in system design.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#key-components-and-operation",
    "href": "lab/elie1/index.html#key-components-and-operation",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "9.1 Key Components and Operation",
    "text": "9.1 Key Components and Operation\nClock Phase Control: The simulation uses ideal switches controlled by two non-overlapping clock phases Φ₁ and Φ₂ at a frequency of 220 kHz. These clocks are modeled with pulse generators and are configured to ensure there is no overlap. This guarantees that charge transfer occurs without any unintended charge sharing or signal corruption.\nSwitched Capacitor Stages: Each switched capacitor stage consists of: - Sampling capacitors Cs1 and Cs2. - Integration capacitors Ci1 and Ci2. - A set of four switches per stage that perform the sampling and integration steps.\nThe switched capacitor integrators convert the input voltage signal into a charge packet transferred at each clock cycle. This process allows the integrator stages to perform accurate discrete-time integration, critical for the loop filter performance in a ΣΔ modulator.\nOperational Amplifiers: The integrators are idealized as operational transconductance amplifiers (OTAs), realized in LTSpice as voltage-controlled current sources. In the ideal model, the OTA provides a linear response across the full input range. In practical designs, care must be taken to ensure that the OTA does not enter saturation, which would otherwise violate the assumptions made in this idealized simulation.\nComparator and Feedback: The second integrator’s output is connected to an ideal comparator. Its digital output is fed back through the feedback path to both integrator stages. This feedback enforces the quantization noise shaping inherent to ΣΔ modulators.\nSimulation Setup: The simulation parameters include: - Power supply voltage VDD = 1.5 V - Common-mode voltage VCM = 0.75 V - Input signal: A sine wave with an amplitude of 0.5 V centered at VCM - Capacitor values: - Cs1 = 1 pF, Ci1 = 6 pF - Cs2 = 1 pF, Ci2 = 3 pF\nThe transient simulation runs for 30 ms, capturing all relevant node voltages such as vx1, vx2, vq, and vd.\n\nThis LTSpice simulation demonstrates the core functionality of an idealized second-order Sigma-Delta modulator, including: - Precise clock phase control to prevent signal corruption. - Switched capacitor integrator stages emulating discrete-time integration. - Quantization feedback ensuring noise shaping and high-resolution analog-to-digital conversion.\nThis model serves as a foundation for developing more realistic circuits, where non-idealities such as switch resistance, parasitic capacitance, and finite OTA gain are considered.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#output-signals-of-the-first-and-second-integrator-stages",
    "href": "lab/elie1/index.html#output-signals-of-the-first-and-second-integrator-stages",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "9.2 Output Signals of the First and Second Integrator Stages",
    "text": "9.2 Output Signals of the First and Second Integrator Stages\nFollowing the LTSpice simulation of the idealized second-order Sigma-Delta modulator, the voltage outputs of the first and second integrator stages were analyzed. These signals provide crucial insight into the operation and dynamic behavior of the modulator’s loop filter.\nThe voltage waveform V(vx1) represents the output of the first integrator, while V(vx2) corresponds to the output of the second integrator. Both signals are critical in understanding the internal signal processing and how the modulator shapes the quantization noise.\n\n9.2.1 Integrator 1 Output - V(vx1)\nThe output of the first integrator, V(vx1), shows the integration of the input signal combined with the feedback from the quantizer. The integrator accumulates charge, resulting in a signal that closely follows the low-frequency components of the input while reacting to the feedback signal to suppress quantization noise within the signal band.\nThe waveform of V(vx1) demonstrates: - A smoother signal profile compared to the input, due to its integration function. - Oscillations introduced by the feedback loop as the system attempts to keep the quantization error shaped and controlled.\n\n\n9.2.2 Integrator 2 Output - V(vx2)\nThe output of the second integrator, V(vx2), exhibits an even higher degree of integration. It represents the second accumulation in the cascade, further enhancing the low-pass filtering effect of the loop filter. This output typically shows: - A stronger suppression of high-frequency components. - More pronounced signal swings, as the second integrator amplifies the difference between the first integrator’s output and the feedback signal from the comparator.\nThe dynamic range of V(vx2) is larger than that of V(vx1), illustrating the additional integration stage’s impact. The output of the second integrator directly feeds into the quantizer (comparator), making its behavior essential to achieving the desired noise shaping properties.\n\n\n9.2.3 Output Waveforms Visualization\nThe time-domain waveforms for both integrator outputs are shown in Figure 9.2 below. The x-axis represents the simulation time (0 ms to 30 ms), while the y-axis represents the output voltages of the two integrators. The distinct differences in the signal shapes illustrate the successive integration performed by each stage.\n\n\n\n\n\n\nFigure 9.2: Integrator Outputs of the Sigma-Delta Modulator\n\n\n\nThe key observations from these output signals are: - The first integrator output V(vx1) follows the integrated input and feedback signals, acting as the first stage of the loop filter.\n\nThe second integrator output V(vx2) provides a deeper integration, smoothing out the signal further and preparing it for quantization.\nBoth outputs confirm the correct operation of the switched capacitor integrator stages and validate the simulation model.\n\nThe correct functioning of these integrators is fundamental to ensuring the modulator shapes quantization noise effectively. In a practical implementation, the design of these integrators would have to consider non-idealities such as finite OTA gain, thermal noise, and parasitic capacitances. However, for this idealized simulation, the results closely match the expected theoretical behavior.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#ltspice-ota-representation",
    "href": "lab/elie1/index.html#ltspice-ota-representation",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "9.3 LTspice OTA representation",
    "text": "9.3 LTspice OTA representation\nIn modern analog and mixed-signal circuit design, the OTA plays a critical role, particularly in switched-capacitor integrators and analog filters. Unlike traditional opamps, which act as voltage-controlled voltage sources, OTAs behave as voltage-controlled current sources. The key advantage of an OTA lies in its ability to directly control the output current by varying the input differential voltage, making it well-suited for fully integrated implementations.\nAn OTA can be modeled in several ways depending on the design stage. Below, we present both a simplified behavioral model used for system-level simulations in LTSpice, and a transistor-level implementation suitable for IC design.\n\n9.3.1 Behavioral Model of the OTA in LTSpice\nFor early-stage system verification and discrete-time simulations, a simplified behavioral representation of the OTA can be implemented in LTSpice. This model typically consists of a Voltage-Controlled Current Source (VCCS) combined with an output resistor. The VCCS outputs a current proportional to the difference between the two input voltages (\\(V_{in+} - V_{in-}\\)), while the resistor converts the current into an output voltage.\nIn this model, the OTA is assumed to operate in its linear region, ensuring that the output current is linearly dependent on the input differential voltage. This linear model is valid as long as the input signal remains within the OTA’s linear input range. If the OTA is driven into saturation, this behavioral model no longer accurately describes its performance.\n\n\n\n\n\n\nFigure 9.3: LTSpice OTA Behavioral Model\n\n\n\nIn the example shown above: - Gm represents the transconductance element of the OTA.\n- RL is the load resistor converting current to voltage.\n- The Vin+ and Vin- nodes are the positive and negative differential inputs, respectively.\nThe transconductance factor (gm) determines the gain of the OTA. In the simulation, G has a gain of 1000, providing an output current of\n\\[\nI_{out} = G \\cdot (V_{in+} - V_{in-}) \\tag{22}\n\\]\nThe resistor RL converts this current into a voltage drop at the Out terminal.\n\n\n9.3.2 Transistor-Level of the OTA\nFor transistor-level design and IC layout, a more accurate model of the OTA is implemented using MOSFETs. The differential pair forms the input stage, converting the input differential voltage into a differential current. Current mirrors and load transistors process this current, providing the desired output characteristics.\nThe following schematic shows a fully differential OTA structure commonly used in analog integrated circuits:\n\n\n\n\n\n\nFigure 9.4: Transistor-Level OTA Schematic\n\n\n\nIn this circuit: - The differential pair (Vin+ and Vin-) provides the input transconductance function.\n- The current mirrors at the top and bottom bias and mirror the current for differential operation.\n- The differential outputs Vout and Vinn allow for fully differential signal processing, improving noise immunity and power supply rejection.\nThe input differential pair operates in the saturation region, where the drain current\n\\[\nI_D = \\frac{1}{2} \\mu C_{ox} \\frac{W}{L} (V_{GS} - V_{TH})^2 \\tag{23}\n\\]\nis controlled by the gate-source voltage difference. The output current is mirrored and converted into a differential voltage across the load devices.\n\n\n9.3.3 Comparison Between the Models\n\n\n\n\n\n\n\n\nAspect\nLTSpice Behavioral Model\nTransistor-Level Implementation\n\n\n\n\nComplexity\nSimple and fast for simulation\nAccurate but complex and slower simulation\n\n\nUse Case\nCircuit-level simulations, functional testing\nDevice-level design, IC schematic, performance validation\n\n\nNonlinear Effects\nIgnored (ideal behavior)\nFully considered (real-world performance)\n\n\nSaturation / Nonlinearity\nNot modeled\nModeled according to device physics\n\n\n\nBy combining both models in the design flow, system functionality can be verified early with the LTSpice behavioral model, while detailed electrical characteristics are analyzed with the transistor-level implementation. The following sections will represent th IC-schematic with xschem.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#iic-tools-and-ihp-sg13g2-pdk",
    "href": "lab/elie1/index.html#iic-tools-and-ihp-sg13g2-pdk",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "11.1 IIC-Tools and IHP-SG13G2 PDK",
    "text": "11.1 IIC-Tools and IHP-SG13G2 PDK\nThe IIC-OSIC-Tools Repo is a collection of different tools used for open source IC design, simulation and layout. This repository is forked from the origial Repo written by efabless. It contains xschem, klayout, the open pdk’s and ngspice which is used to simulate the drawn circuits in xschem (H. Pretl 2025).\nThe open source SG13G2 PDK from the Leibniz Institute for High Performance Electronics contains different building blocks like pmos and nmos field effect transistors as well as polysiicon resistors and MIM capacitors. The smallest structures that can be made are 130 nm small. This feature size is utilized in FETs and is the lower limit. In electronics design and engineering in general we have to be careful with designing circuits and systems at their limits. This feature size is called the lower limit for a reason and should only be utilized if necessary. (IHP 2025)",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#operational-amplifier",
    "href": "lab/elie1/index.html#operational-amplifier",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "12.1 Operational Amplifier",
    "text": "12.1 Operational Amplifier\nOne of the most important components in analog electronics is the operational amplifier. The OpAmp can be used to amplifiy or attenuate signals, to decouple signals (unity-gain amplifier) in order not to load a signal sources, to build filters (biquad filters) and other signal processing circuits and to build circuits like integrators, comparators and summing amplifiers.\nOperational Amplifiers basically amplify the voltage difference between their input terminals, the inverting and non-inverting input. This amplified differential voltage can then be further processed by the following circuitry. By applying some of the output signal back to the input more complex behaviour and also mathematical operations can be performed. By for example adding a feedback capacitor from the output to the inverting input togehter with a resistor at the inverting input an integrator can be realized. Depending on the type of feedback we get the following behaviour:\n\nSeries-Shunt Feedback: Voltage Amplification\nShunt-Shunt Feedback: Transimpedance Amplification\nShunt-Series Feedback: Current Amplification\nSeries-Series Feedback: Transconductance Amplification\n\nThe Amplification for these variants can be described by the following ratios:\n\n\\(A_{va} = \\frac{v_{out}}{v_{in}}\\)\n\\(A_{tia} = \\frac{v_{out}}{i_{in}}\\)\n\\(A_{ca} = \\frac{i_{out}}{i_{in}}\\)\n\\(A_{tca} = \\frac{i_{out}}{v_{out}}\\)\n\nCapacitors in the feedback path or at the inputs create frequency dependant behaviour like filters. Without any feedback the OpAmp amplifies the differential input voltage with it’s open-loop gain \\(A_{OL}\\). The output voltage in this case can be calculated by the following formula:\n\\[\nV_{out} = A_{OL} \\cdot (V_{inv} - V_{ninv}) = A_{OL}V_{diff} \\tag{26}\n\\]\nThe open-loop configuration is mostly used in comparators, because here we usually want the output of the OpAmp to saturate to the supply voltage \\(V_{DD}\\) or negative supply \\(V_{SS}\\) ground potential. This happens because the smallest deviation at the input of the amplifier is in most cases enough to drive the output to the supply voltage or ground since in real operational amplifiers the open-loop gain is usually in the range of ten thousand to a few hundred thousands. In ideal OpAmps this value is infinite. Other metrics of the OpAmp are the input impedance \\(z_{in}\\), the output impedance \\(z_{out}\\), the input offset voltage \\(v_{os}\\) and input offset current which ultimately limit the performance. (Gift, Stephan J. G. and Maundy, Brent 2022)\nThe following table illustrates the metrics and gives examples for different technologies (added frequency ranges):\n\nComparison of different OpAmp semiconductor types vs. ideal OpAmps  (Gift, Stephan J. G. and Maundy, Brent 2022).\n\n\n\n\n\n\n\n\n\nParameter\nBipolar\nJFET\nCMOS\nIdeal OpAmp\n\n\n\n\n\\(z_{in}\\)\n$ 6 M $\n\\(10^{13} \\Omega\\)\n\\(10^{12} \\Omega\\)\n\\(\\infty\\)\n\n\n\\(z_{out}\\)\n\\(\\leq 100 \\Omega\\)\n\\(\\leq 100 \\Omega\\)\n\\(\\leq 100 \\Omega\\)\n\\(0\\)\n\n\n\\(A_{OL}\\)\n\\(10^3 - 10^6\\)\n\\(10^3 - 10^6\\)\n\\(10^3 - 10^6\\)\n\\(\\infty\\)\n\n\n\\(i_{off}\\)\n\\(\\pm 40 \\mu A\\)\n\\(\\pm 1 pA\\)\n\\(\\leq 1 pA\\)\n\\(0 A\\)\n\n\n\\(v_{os}\\)\n\\(\\approx 25 \\mu V\\)\n\\(\\approx 5 mV\\)\n\\(\\approx 1 - 50 \\mu V\\)\n\\(0\\ V\\)\n\n\n\\(f_{max}\\)\n\\(1 - 500 MHz\\)\n\\(100 kHz - 30 MHz\\)\n\\(10 kHz - 100 MHz\\)\n\\(\\infty\\)\n\n\n\nThe components described at the beginning of this chapter are needed to implement the incremental delta-sigma converter and later the analog-to-digital converter. But not all of these components need the functionality modern OpAmps have. They for example don’t necessarily need current-limiting or rail-to-rail outputs, they don’t need very high bandwidths or other features.\nHere in IC design and ultimately in chip level circuit design we need to carefully balance the trade-offs between power consumption, bandwidth and chip area. In the following chapter we will see that for this balance or rather operation type between power or area efficiency and frequency range we need to design our circuits for certain qualities. Here we want to note that every single square-milimeter of area on the die is costly and therefore careful design is required. To give an example the price per \\(mm^2\\) for the IHP-SG13G2 PDK we’re also using in this project is 7300€. (as of March 2025)(IHP GmbH 2025)",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#gmid---methodology",
    "href": "lab/elie1/index.html#gmid---methodology",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "12.2 gm/ID - Methodology",
    "text": "12.2 gm/ID - Methodology\nOne of the first questions we have to ask in IC design is how small or how large we can design the MOSFETs we’re using in the circuits. MOSFETs can be used in saturation mode or in the triode state (as well as in cut-off but this is not relevant for us). When the FET is in saturation the drain current \\(I_{D}\\) is controlled primarily by the gate-source voltage \\(V_{GS}\\). In this case the drain-source voltage has a smaller impact on the drain current. For the Transistor to work in saturation the drain-source terminals need to be driven with a voltage high enough so this “saturates” the FET and the highest drain-current is achieved.\nOn the other hand if the voltage applied across the drain-source contacts (on a NMOS for example) is relatively low (compared to the voltage for saturation), the FET will operate in the so called triode mode. In triode mode the drain-source voltage \\(V_{DS}\\) has a fundamentally larger impact on the drain current then in the saturation mode. (H. Pretl and Michael Koefinger 2025)\nOne Methodology to solve the question we asked at the beginning of this chapter is the \\(\\frac{gm}{I_{D}}\\) methodology which we will introduce in a moment. There are basically three MOSFET characteristics directly describing the behaviour of it:\n\n\\(\\frac{g_m}{I_D}\\) : Transconductance Efficiency\n\\(\\frac{\\omega_{T}}{f_T}\\) : Transit frequency\n\\(\\frac{g_m}{g_{ds}}\\) : Intrinsic Gain\n\nTo understand the first characteristic for our FETs we have to take a look at the different operating points which depend on the applied voltages. Whenever we apply voltages to a FET in order to control a specific drain current \\(I_{D}\\), we can operate the FET in either weak inversion, strong inversion or moderate inversion. This behaviour is controlled by the Overdrive Voltage \\(V_{OV}\\) which is defined as the difference between the gate-source voltage and the threshold voltage. To note this small point the drain-current is controlled by the voltage between gate and source. Whenever an nmos is not being used as a low-side switch or amplifier or the pmos is being used as a low-side component problems can arise. Since we are using FETs in our switched capacitor integrator for example this is quite important.\n\\[\n    V_{OV} = V_{GS} - V_{TH} \\tag{27}\n\\]\nWe have to keep in mind that the threshold voltage isn’t a magical number that can be applied to every MOSFET, it rather depends on the geometry (with W and L for example) and other factors. For the example nmos given in the Analog Circuit Design IHP SG13G2 Devices Table by Professor Pretl, the threshold voltage is 0.5V. Therefore the overdrive voltage describes how “much” the gate-source voltage is above the threshold of the FET. Depending on this overdrive voltage the circuit/ic designer can apply different \\(\\frac{g_{M}}{I_{D}}\\) values with the unit [\\(\\frac{1}{V}\\)]. This unit is derived in the following way:\nWith \\(g_{M}\\) defined by:\n\\[\ng_{M} = \\frac{\\partial I_D}{\\partial V_{GS}}  \\tag{28}\n\\]\nand \\(I_{D}\\) having the unit Ampere [A] and the voltage \\(V_{GS}\\) we get:\n\\[\n\\frac{\\frac{A}{V}}{A} = \\frac{1}{V} \\tag{29}\n\\]\nBefore we continue with the \\(\\frac{g_{M}}{I_{D}}\\) method we want to note that there also is the square-law model with which circuit designers can design MOSFET circuits. This model is usually applicable for PCB circuits and takes the situation into account where the MOSFET is driven in the stong inversion state. The square-law model is being applied assuming that the FET is operating in the “linear” or “triode” mode, however on nanometer scale FETs (down to 130 nm with the IHP-SG13G2 PDK) this model doesn’t give us precise solutions anymore. Many effects like parasitic capacitances alter the operational behaviour of the FET and lead to the square-law model deviating afar from the real-world behaviour in many situations (Alan Doolittle 2025).\nThe square-model drain-current behavior is being described by the following formula:\n\\[\nI_{D} = \\frac{Z \\cdot \\overline{\\mu_n} \\cdot C_{OX}}{L} [(V_{GS} - V_{T}) \\cdot V_{DS} - \\frac{V_{DS}^2}{2}]  \\tag{30}\n\\]\nwith the two conditions:\n\\(0 \\leq V_{DS} \\leq V_{D_{SAT}}\\) and \\(V_{GS} \\geq V_T\\)\nwith following definitions:\n\n\\(C_{OX} = \\frac{\\epsilon_{ox}}{x_{ox}}\\)\nZ = MOSFET width\nL = MOSFET Channel length\n\\(V_T\\) = Threshold voltage\n\\(\\overline{\\mu_n}\\) = effective electron mobility\n\nThe threshold voltage is defined as:\n\\[\nV_T = 2 \\phi_F + \\frac{\\epsilon_s}{C_{OX}} \\sqrt{\\frac{2q N_{A}}{\\epsilon} (2\\phi_F)} \\tag{31}\n\\]\nwith:\n\\(\\phi_F\\) being the Fermi Potential (surface potential) defined by:\n\\[\n\\phi_F = \\frac{kT}{q} \\cdot ln (\\frac{N_A}{n_i}) \\tag{32}\n\\]\nwith \\(N_A\\) being the acceptor doping concentration and \\(n_i\\) being the intrinsic carrier concentration. The term 2 \\(\\phi_F\\) corresponds to the surface potential required to achieve strong inversion.\nFor more details the reader can consult (Alan Doolittle 2025),(Boris Murmann 2016) or (Silveira, Flandre, and Jespers 1996).\nTo illustrate the problems of the square-law model when designing MOSFET circuits at nanometer scale we will look at some graphs visualizing it’s limitation. First of all let’s look at the formulas for the square-law when we want to achieve more performance with our FETs:\nTransconductance Efficiency: \\[\n\\frac{g_m}{I_D} \\cong \\frac{2}{V_{OV}} \\tag{33}\n\\]\nhigher efficiencs here means more transconductance for the same drain current.\nTransit Frequency:\n\\[\n\\frac{g_M}{C_{gg}} \\cong \\frac{3}{2}\\frac{\\mu V_{OV}}{L^2} \\tag{34}\n\\]\nhigher transit frequency for the same gate-capacitance.\nIntrinsic Gain:\n\\[\n\\frac{g_m}{g_{ds}} \\cong \\frac{2}{\\lambda V_{OV}} \\tag{35}\n\\]\nhigh transconductance (at same drain-current \\(I_D\\)) without higher output conductance.\nThe square-law model completely fails in these cases when the MOSFET is not operation in strong inversion. In moderate and weak inversion we are forced to use a different mathmatical model , and the \\(\\frac{g_M}{I_D}\\) method is a really good starting point (Ross Walker 2017).\nThe following figures will show the deviation between square-law and measurements as well as the \\(\\frac{g_M}{I_D}\\) methodology:\nSo first of all when we use \\(g_M\\) and \\(I_D\\) we specify that for a specific drain-current we get a specific transconductance, for example with a \\(\\frac{g_M}{I_D}\\) of 10 S/A we get 10 \\(\\mu\\) S per 1 \\(\\mu\\) A of bias current. And depending on how “much” the transistor is operating above it’s threshold voltage \\(V_{th}\\) (basically the Overdrive Voltage \\(V_{OV}\\) ) you get different inversion levels. From weak inveresions for low overdrive voltages to moderate inversion when operating at approximately \\(V_{OV}\\) = \\(V_{th}\\) to high inversion when \\(V_{OV}\\) &gt; \\(V_{th}\\).\nWith the square-law value for transconductance efficiency we completely deviate with that approximation in weak and moderate inversion:\n\n\n\n\n\n\nFigure 12.1: Inversion level vs. Overdrive Voltage (Ross Walker 2017)\n\n\n\nAnother deviation from square-law to real MOSFET behaviour can be seen when we increase the gate-source voltage of the FET and measure the drain-current. According to square-law formual for the drain-current the current should just increase to the square with increasing gate-source voltage. But by taking the square of the drain-current and increasing \\(V_{GS}\\) we can see that the drain-current does not magically start flowing above the threshold-voltage and also the behaviour is also not linear (quadratically when not taking the square of the current):\n\n\n\n\n\n\nFigure 12.2: Drain Current over Gate-Source Voltage, Simulation vs. square-law (Ross Walker 2017)\n\n\n\nThis simulation is done for a n-channel MOSFET with a drain-source voltage of 1.8 V and a size of L = 180 nm and W = 5 \\(\\mu\\)m.\nThe drain-current behaviour at sub-threshold gate voltages is completely inaccurate for the square-law too, and the following graph visualizes the limitation of the square-law at this point again:\n\n\n\n\n\n\nFigure 12.3: Drain Current over Gate-Source Voltage, comparison between an nmos, a bjt and the square-law (Ross Walker 2017)\n\n\n\nThese three examples show that the approach using square-law to size MOSFETs is not sufficient when the transistor is operating in weak or moderate inversion and when driving the FET (nmos for example) with a low gate-source (or overdrive-) voltage. To cite Mr. Walker on this topic: “This means that the square law equation (which assumes 100% drift current) does not work unless the gate overdrive is several \\(\\frac{kT}{q}\\), (Ross Walker 2017)”.\nTo conclude this, we can keep in mind that there is no simple formula that can describe the drain-current behaviour in all situations and be universally used. So using the \\(\\frac{g_m}{I_D}\\) methodology is the way to go in our project.\nNow with that out of the way we can design our circuits using the \\(\\frac{g_m}{I_D}\\) methodology. The main properties of our MOSFETs we can manipulate in xschem are the lenght of the channel L, the width W and the bias current \\(I_D\\). The common way to use this method is to first characterize nmos and pmos field effect transistors and then use this data to design the circuits. In the chapter “MOSFET characterization Testbench” chapter in (H. Pretl and Michael Koefinger 2025) we can see how the values for the \\(\\frac{g_m}{I_D}\\) methodology are being simulated for later use.\nThe lenght of the MOSFET channel also has a large influence on it’s frequency characteristic as it can be seen in this simulation:\n\n\n\n\n\n\nFigure 12.4: transit frequency vs. channel length L (H. Pretl and Michael Koefinger 2025)\n\n\n\nThe operating areas of interest for us are the saturation region (when using the FET as an amplifier for example) and the region when the FET is being used to “just” work as a switch. With setting \\(V_{DS}\\) to \\(\\frac{V_{DD}}{2}\\) we keep the FET in saturation. Reminding ourselves again that with larger \\(g_M\\) we have more “gain” and with a smaller \\(I_D\\) we have higher efficiency we try to hit the sweetspot between size (as every square milimeter has it’s cost) and current consumption (if we have wearable battery powered devices for example). Keeping also in mind that temperature has a large effect we cannot use arbitratily large drain currents.\nFollowing plot visualizes the dependancy of \\(\\frac{g_M}{I_D}\\) to the gate-source voltage and shows the transit frequency behaviour too:\n\n\n\n\n\n\nFigure 12.5: \\(\\frac{g_M}{I_D}\\) and \\(f_T\\) over the gate-source voltage (H. Pretl and Michael Koefinger 2025)",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#subcomponents-systems-of-the-incremental-delta-sigma-modulator",
    "href": "lab/elie1/index.html#subcomponents-systems-of-the-incremental-delta-sigma-modulator",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "12.3 Subcomponents/-systems of the incremental Delta-Sigma Modulator",
    "text": "12.3 Subcomponents/-systems of the incremental Delta-Sigma Modulator\nOur incremental \\(\\Delta \\Sigma\\)-Modulator is made up of different clocked non-clocked components. To have a working converter at the end we first build the circuit according to circuits from Professor Pretl and also made use of several circuits which were proved functional from different IEEE publications and other references from literature. Another important source of knowledge were the lecture slides of Professor Boris Murmann from the University of Hawai’i at Mānoa from the lecture: EE 628 - Analysis and Design of Integrated Circuits, which can be found here: (Boris Murmann 2024).\n\n12.3.1 Voltage Reference\nThe first circuit we want to take a look at is the voltage reference in our delta-sigma modulator. The comparator in the delta-sigma converter compares the output voltage of the integrator to the reference voltage and outputs a high- or low-signal (depending on the circuit for example 1.2 V or 0 V). So to set a voltage to which the output of the integrator can be compared against we utilize a bandgap-reference to generate our output voltage. In the case where the reference voltage is not ground this circuit will be used.\nAnother reason to use a voltage-reference is to create the biasing-currents used to drive the 5T-OTA and other circuits where we need a current to shift the voltages (and currents) in a way to the MOSFETs are at their biasing-point (20 \\(\\mu\\) A for example at the OTA).\nThe bandgap-reference utilizes the base-emitter voltage \\(V_{BE}\\) of bipolar junction transistors. In the IHP-SG13G2 pdk we can implement the needed pnp-layers and therefore use the badgap-voltage \\(V_{g0}\\) of silicon which is 1.205 V at 0 K. Even tho, as can be seen from the bandgap-voltage \\(V_{g0}\\), this voltage is temperature dependant, by using two BJTs with different current densities we can generate a refernce voltage that is indepentant of the temperature. The full equasion for the \\(V_{ref}\\) is:\n\\[\nV_{ref} = V_{g0} (1-\\frac{T}{T_0}) + V_{BE0}(\\frac{T}{T_0}) + \\frac{kT}{q} ln(\\frac{J1}{J2}) \\tag{36}\n\\]\nwith J1 and J2 being the differnet emitter current densities.\nThe improvised BJTs don’t have great specs regarding speed and other performance metrics, but this implementation can reach accuracies of \\(\\pm\\) 1 to 3 % (H. Pretl and Michael Koefinger 2025).\n\n\n\n\n\n\nFigure 12.6: Bandgap Reference Circuit (H. Pretl and Michael Koefinger 2025)\n\n\n\nWith the two Resistors R1 and R2 in this circuit we were able to change the reference voltage at the output. The output voltage \\(V_{ref}\\) can be calculated by the following formula:\n\\[\nV_{ref} = V_{BE} + \\frac{R2}{R1} \\frac{kT}{q} ln(m) \\tag{37}\n\\]\nOur implementation in xschem looks like this:\n\n\n\n\n\n\nFigure 12.7: Our Bandgap Reference Circuit\n\n\n\nUsing the formula we changed the resistors R1 and R2 to get a reference voltage of 729 mV. This voltage was used to see how much we can change the reference voltage. In the application we use the half of the supply voltage for the comparator reference and according voltages for the biasing currents for the MOSFET circuits like the OTA.\nFollowing picture shows the output voltage over time:\n\n\n\n\n\n\nFigure 12.8: Our Bandgap Reference Voltage, transient simulation\n\n\n\nEven tho the temperature dependencies canceled out each other in the formuals above, second-order effects still lead to some voltage variation over temperature (H. Pretl and Michael Koefinger 2025). The next picture graph shows the temperature sensitivity of our voltage-reference:\n\n\n\n\n\n\nFigure 12.9: Bandgap reference voltage over temperature\n\n\n\n\n\n12.3.2 Voltage Controlled Ring Oscillator\nAnother important circuit is the Oscillator which is ultimately used to create the system clock. The system clock can be transferred to all circuit elements which need to switch like the switched-capacitor integrator or reset-circuitry to start a new integration cycle. This clock generator ensures together with the clock-splitter that all circuits are synchronized to each other (keep in mind that clock shall never overlap when there are FETs connected in series, or otherwise there can be dead-shorts from \\(V_{DD}\\) to ground).\nThe basic building blocks of our ring oscillator are the inverters working as delay stages (plays an important role for the frequency). Each stage has a specific delay and in total multiple stages cascaded need to have a total phase shift of 2 \\(\\pi\\) or 360°. They also need to have a voltage gain of one at the oscillation frequency. With each stage having a gain of:\n\\[\nA(j\\omega) \\tag{38}\n\\]\nwe get the gain of each stage:\n\\[\nA_1(j\\omega) = A_2(j\\omega) = A_3(j\\omega) = \\frac{-g_MR}{1 + j\\omega RC} \\tag{39}\n\\]\nSince we have an odd number of stages (N) every stage of the inverters needs to provide \\(\\frac{\\pi}{N}\\) phase shift so that with the dc-inversion at the end of the ring (adds another phase-shift of \\(\\pi\\) or 180°) we can fulfill the Barkhausen criterion and our circuit will oscillate:\n\\[\n|A_1(j\\omega) \\cdot A_2(j\\omega) \\cdot A_3(j\\omega)| = 1 \\tag{40}\n\\]\nThe R’s and C’s are coming from the input capacitances of the FETs and are modeled in the formula as being the loads to the transconductances of each stage.\nWith each stage having a phase-shift of:\n\\[\n\\angle A(j\\omega) = \\theta = arctan (\\omega RC) = \\frac{2 k \\pi}{N} \\tag{41}\n\\]\nwe get an oscillation frequency of:\n\\[\n\\omega_0 = \\frac{tan (\\theta)}{RC} \\tag{42}\n\\]\nor with the time-delay \\(t_d\\) of each stage:\n\\[\nf = \\frac{1}{2Nt_d} \\tag{43}\n\\]\nSince in our application we want to have a period of 4.5 \\(\\mu s\\) we need a oscillation frequency of\n\\[\nf_{osc} = \\frac{1}{4.5 \\mu s} = 222.2222 kHz\n\\]\nand we have three stages, we need to have a delay of:\n\\[\nt_d = \\frac{1}{2Nf_{osc}} = \\frac{1}{2\\cdot3\\cdot222.22 kHz} = 75 \\mu s\n\\]\nIn our implementation of the ring oscillator we are intentionally using the voltage controlled (VCO) oscillator. The inverter stages are biased by the current sources which are fed by the MOSFETs M11, M13, M15 and M16. Here we are limiting the biasing current and we can control this current through the voltage applied to the FET M17. This voltage then controls the current and ultimately the delay of each inverter which in turn allows us to change the frequency of our oscillator. The following pictures illustrate our oscillator circuit and additional circuitry:\n\n\n\n\n\n\nFigure 12.10: Ring-Oscillator implemented in xschem\n\n\n\nIn the middle part of the circuit we can see the three inverter stages. These are supplied by the four MOSFETs at the edges with current which is in turn controlled by the voltage applied to the nmos on the left-hand side (G. Jovanovic and Stamenkovic 2010). After implementing multiple different oscillator circuits this was the one that finally oscillated:\n\n\n\n\n\n\nFigure 12.11: Ring-Oscillator output voltage\n\n\n\nWe can see in this plot that after around 10 \\(\\mu\\)s the circuit starts to oscillate. This is a sinusodial oscillation and since we need a rectangular clock signal we implemented a schmitt-trigger circuit after the oscillator in order to get a PWM signal with a duty cycle of 0.5 and a frequency of 222 kHz. The Schmitt-Trigger circuit looks like this (Filanovsky and Baltes 2004):\n\n\n\n\n\n\nFigure 12.12: Schmitt-Trigger\n\n\n\nWhenever the input signal of the schmitt-trigger crosses a set limit the output is pulled to a high state. And if the input signal falls below a certain threshold the output signal goes low again. This transfer function is visualizes in this graph:\n\n\n\n\n\n\nFigure 12.13: Schmitt-Trigger, (Allelco 2025)\n\n\n\nUnfortunately the output of our schmitt-trigger stayed low at all times so we assume that the setpoints for the change of the states from high to low and from low to high were not set correctly.\nTo see if the clock signal from the VCO at least has the right frequency we plotted a reference clock-signal and compared both of them:\n\n\n\n\n\n\nFigure 12.14: VCO Signal compared to a reference clock signal with , (Allelco 2025)\n\n\n\nAs can be seen from this plot there’s only a slight difference in frequency and this can be easily compensated by the control-voltage of the VCO.\n\n\n12.3.3 Clock Generator/Splitter with delay circuit\nNow assuming we have a clean clocking signal we need to split this clock into two non-overlapping clock signals so the switched-capacitor integrator stage and the other circuit elements can be clocked. Our clock splitter circuit is a circuit based on the given splitter in the lecture number 13 from (Boris Murmann 2024) the lectures of Professor Murmann. This in turn is a circuit designed in the Ph. D. Thesis of Dr. Andrew Abo and utilizes inverters and nand-gates to generate four output signals from the one input clock. These four clock-signals come in pairs of two, so two clock signals which are inverted to each other and then another two signals which have a slightly larger delay (or dead-time) in between them ensuring no overlapping. We implemented this circuit not only using logic gates like the mentioned inverters and nand-gates but also transistorized this circuit.\nEach inverter in our Clock-Splitter looks like this:\n\n\n\n\n\n\nFigure 12.15: Inverter for our Clock-Splitter\n\n\n\nAnd we also implemented nand gates with nmos and pmos FETs and added an output driving stage for each nand gate:\n\n\n\n\n\n\nFigure 12.16: NAND-Gate with output driving stage\n\n\n\nBefore continueing with the circuit design we simulated the nand gate to ensure that it operated as we intended. For that we applied clocked signals and checked whether the gate output was low whenever both signal input signals were high and vice versa or not:\n\n\n\n\n\n\nFigure 12.17: Input Signals [V] at the two inputs of the NAND Gate\n\n\n\n\n\n\n\n\n\nFigure 12.18: Output Voltage of the NAND Gate\n\n\n\nFrom these simulations we can see that the nand gate is working.\nNow let’s continue with the complete circuit:\n\n\n\n\n\n\nFigure 12.19: Clocksplitter from Dr. Andrew Abo (Dr. Andrew Masami Abo 1992)\n\n\n\nStarting from this we implemented the inverters and nand gates with discrete MOSFETs and designed a testbench in xschem:\n\n\n\n\n\n\nFigure 12.20: Clocksplitter implemented with n- and pmos FETs from IHP-SG13G2 PDK\n\n\n\nBelow you can see the setup for the simulation. The input is fed by a clock signal with a period time of 4.5 \\(\\mu\\) s:\n\n\n\n\n\n\nFigure 12.21: Simulation setup for the clocksplitter in xschem\n\n\n\nNow let’s look at the outputs:\n\n\n\n\n\n\nFigure 12.22: Clock Phases from our Clocksplitter\n\n\n\nWe can see that the clock-signal edges have some overshoot and ringing. This is a point at which the clock splitter circuit should be further optimized.\n\n\n12.3.4 Inverter as Integrator\nWhile we could use an operational transconductance amplifier at the heart of our SC-Integrator we implemented an inverter as the core of the integrator. Inverters can be used since the main goal of the integrator stage is to transfer the charge from the sample capacitor \\(C_s\\) and integrate it with the help of the integration capacitor \\(C_i\\). For this operation the inverter is enough and we utilize it here. Another drawback with using an OTA or an OpAmp for the integrator is the additional power consumption and area. Additional informations regarding the inverter as an integrator can be found here: (Chae et al. 2011).\nOur implementation in xschem looks like this:\n\n\n\n\n\n\nFigure 12.23: Inverter in our first order idsm\n\n\n\nIn this Figure we can see three capacitors. Usually we have two capacitors in the SC-Integrator but in this schematic we have a third one. While we know the input capacitor being the sampling capacitor \\(C_S\\) and the integrating capacitor \\(C_I\\) the third capacitor after \\(C_S\\) is the holding capacitor \\(C_H\\) which holds the charge from the input capacitor for further processing. Also the switches aren’t yet transistorized. But for now lets look at the outputs of this circuit and the clock signals:\n\n\n\n\n\n\nFigure 12.24: Inverter output\n\n\n\nWe can see that the voltage after the inverter working as an integrator rises. With the constant input voltage at the input this means that our integrator is indeed working. But the other signals are not correct yet since for example q would need to be a PCM signal.\nThe clocking signals are as shown:\n\n\n\n\n\n\nFigure 12.25: Clocking signals\n\n\n\nThe values for the mentioned three capacitors are as follows:\n\n\\(C_S\\) = 1 pF\n\\(C_H\\) = 1 pF\n\\(C_I\\) = 2 pF\n\n\n\n12.3.5 Clocked Comparator\nAnother important subcircuit is the clocked comparator. The output of our integrator is fed into the comparator and being compared to eiter half of the supply voltage \\(V_{DD}\\) or to 0 V. After the comparator the voltage signal is now digital (since the comparator only puts our high or low) and this signal is further processed for the feedback with the 1-Bit DAC and the digital filter and decimator.\nFor our implementation of the comparator and latch we used the StrongARM latch which was utilized in the StrongARM microprocessor from Digital Equipment Corporation. The fundamental circuit was originally introduced by Kobayashi et al. from Toshiba (Razavi 2015). This circuit consists of a differential pair, two cross-coupled pairs and four precharge switches. By applying the clock signal to the comparator we can compare the inputs of the comparator and provide a clocked output as opposed to “classical” comparators which output their states continuesly.\n\n\n\n\n\n\nFigure 12.26: StrongARM Comparator\n\n\n\nAfter the comparison stage we latch the output and store it until in the next clock cycle the comparison happens again. This is the latching circuit after the comparator:\n\n\n\n\n\n\nFigure 12.27: StrongARM Latch after the comparator\n\n\n\nAs can be seen after the latching circuit we added an output driving stage again to ensure that our comparator can drive loads accordingly. We verified the functioality by applying signals to the input and plotting the output. Our comparator works as intended:\nFirst lets see the input signal circuitry. We had to connect a resistor to the two positive input voltage sources because we wanted to skip one pulse at which then the voltage pulse at the negative input would be higher than the voltage of the positive input:\n\n\n\n\n\n\nFigure 12.28: Input voltage circuitry\n\n\n\n\n\n\n\n\n\nFigure 12.29: Input Signals at the two inputs of our comparator\n\n\n\n\n\n\n\n\n\nFigure 12.30: Output signal and the clock signal\n\n\n\nWe observe that whenever the negative input of the comparator is higher than the positive input the output goes low. Otherwise the output signal is high. This verifies the functionality of our StrongArm comparator and latch.\n\n\n12.3.6 1-Bit DAC\nThe last circuitry we want to take a look at is the 1-Bit DAC in the feedback path. This DAC is basically implemented as an inverter. Whenever the output of the comparator is a logical one the output of the DAC is a logical low or 0V. By connecting the inverter between \\(V_{DD}\\), GND and the input signal we can fulfill this functionality of it. A transmission gate is added to the input to switch the signal. This consists of two MOSFETs connected as complementary switch, a cmos. That circuitry looks like this:\n\n\n\n\n\n\nFigure 12.31: The transmission gate at the input",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#first-order-delta-sigma-modulator",
    "href": "lab/elie1/index.html#first-order-delta-sigma-modulator",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "12.4 First Order Delta-Sigma Modulator",
    "text": "12.4 First Order Delta-Sigma Modulator\nOur methodology to implement the first-order delta-sigma modulator was to verifiy the functionality of each subcircuit and then implement this in a complete circuit. We first started by substituting the switches of the SC-Integrator by pmos- and nmos-FETs and then continued with the integrator which was implemented by an inverter and the integrating capacitor. Then we added the comparator and latching circuit after the integrator. After this was implemented we added our bandgap voltage-reference and the clock splitter. We then connected the four phases of our clock splitter to the FETs of the SC-Integrator as well as to the clocked-comparator. Unfortunately the first order idsm does not work yet and we suspect that there is a problem with the Sample- and Hold-Stage or with the SC-Integrator.\n\n\n\n\n\n\nFigure 12.32: SC-Integrator Stage and transmission gate as well as 1-Bit DAC at the bottom left\n\n\n\nThe following plot shows the different signals of the first order idsm:\n\n\n\n\n\n\nFigure 12.33: Output of our first order idsm",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#second-order-delta-sigma-modulator",
    "href": "lab/elie1/index.html#second-order-delta-sigma-modulator",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "12.5 Second Order Delta-Sigma Modulator",
    "text": "12.5 Second Order Delta-Sigma Modulator\nThe second-order idsm has two integrators back to back as well as the feedback signal fed into the summing nodes twice. We would have implemented the second-order idsm once the first order circuit worked. As mentioned in the lecture slides by Professor Meiners it’s not so smart to try and find the error in the finalized circuit. We rather did what he suggested and verified the functionality of most of the circuits.\nThis picture is from the first order idsm but is should give the reader the understanding why errors are harder to fix when the circuit is combined and then harder to fix:\n\n\n\n\n\n\nFigure 12.34: Schematic of our complete first order idsm",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#pcb-design-for-a-board-to-evaluate-the-adc-ads1115",
    "href": "lab/elie1/index.html#pcb-design-for-a-board-to-evaluate-the-adc-ads1115",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.1 PCB Design for a Board to Evaluate the ADC ADS1115",
    "text": "13.1 PCB Design for a Board to Evaluate the ADC ADS1115\nThis Board was designed by us and aims to build a solid base to reduce parasitic effects like stray inductance etc. in comparison to a breadboard prototype and allow the user to take more accurate and reproducible measurements of the ADC. On this playform the ADS1115 as well as our IC can be tested when the IC is produced and then packaged.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#design-steps",
    "href": "lab/elie1/index.html#design-steps",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.2 Design Steps",
    "text": "13.2 Design Steps\nFirst we fixed the design requirements and added following components into the list of parts on our board:\n\nTable 1: Components\n\n\nComponent\nProduct Number\n\n\n\n\nADC\nADS1115\n\n\nAccelerometer\nADXL335\n\n\nLDO\nAZ1117CH-3.3TRG1\n\n\nMain Connector\nUSB-C\n\n\nMCU\nESP8266-12E/ESP-12E\n\n\nSignal Connectors\nSMA Connector\n\n\nUSB-to-UART Converter\nCP2102-GM\n\n\nPower In Connector\nMale Pin Headers",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#additional-features",
    "href": "lab/elie1/index.html#additional-features",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.3 Additional Features",
    "text": "13.3 Additional Features\nWe also added the following features to this board. Even tho this is a relatively simple board we want to have this features anyway:\n\nReverse polarity protection at the power input\nESD protection on important nodes\nEMI protection\nLEDs to show the status of the LDO and debug the MCU\nTight coupling to ground of signals (using a four layer PCB instead of a two layer board)\nClean and uninterupted reference plane\nFour layer board from EU\nLEDs on UART lines between USB-to-UART Converter and ESP8266",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#block-diagram",
    "href": "lab/elie1/index.html#block-diagram",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.4 Block Diagram",
    "text": "13.4 Block Diagram\nHere we have a visualisation of the board in the form of a block diagram. This allows the user and designers to quickly grasp the concept and order of the board and understand the system. Also this is usually thie first step in designing electronic systems as well as software since it gives a good overview.\n\n\n\n\n\n\nFigure 13.1: Block diagram, Credit to: Mustafa Alkaya",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#schematic",
    "href": "lab/elie1/index.html#schematic",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.5 Schematic",
    "text": "13.5 Schematic\nThe schematic consists of four pages in total and is in an hierachical order. On the title page we can find informations of the board and a block diagram of the schematic. In the input and voltage regulator section there is the USB-C connector and the male pinheader. Here we can also find the reverse polarity protection in the form of a schottky diode and TVS diodes for ESD protection. Schottky diodes have a smaller forward voltage drop than silicon diodes and were choosen because of this. Further the 3.3V LDO and LEDs are implemented here. We used net labels to clarify names of nets in the PCB editor. Ports are being used to connect signals and power rails across the project between multiple schematic pages. The USB connector has two 5.1k\\(\\Omega\\) to negotiate 5V and up to 1.5A from the USB supply device.\n\n\n\n\n\n\nFigure 13.2: Title page",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#input-power-regulation-and-usb-c-connector",
    "href": "lab/elie1/index.html#input-power-regulation-and-usb-c-connector",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.6 Input, Power Regulation and USB-C Connector",
    "text": "13.6 Input, Power Regulation and USB-C Connector\nThe schematic in the diagram illustrates the power management and input/output configurations of a circuit design in detail. The “USB-C Power and Programming” section includes circuit components that provide power supply and data communication through a USB-C connection. The “Voltage Supply Input” section ensures the regulation and protection of the input voltage, incorporating components for overcurrent and overvoltage protection. The “3.3V Voltage Regulator” section features a regulator circuit that steps down the 5V input voltage to 3.3V, along with filtering capacitors. Finally, the “Power Connections” section displays the connections of various voltage levels to other circuit modules. This design aims to deliver a compact and protected power management solution.\n\n\n\n\n\n\nFigure 13.3: Title page",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#esp8266-and-usb-to-uart",
    "href": "lab/elie1/index.html#esp8266-and-usb-to-uart",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.7 ESP8266 and USB-to-UART",
    "text": "13.7 ESP8266 and USB-to-UART\nThe ESP8266 Page contains the microcontroller and USB-to-UART converter IC in order to communicate with the MCU over the USB port and a PC. This part was mostly taken from the ESP8266 reference design schematic.\n\n\n\n\n\n\nFigure 13.4: ESP8266 and USB-to-UART",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#adc-accelerometer-and-sma-signal-input-connectors",
    "href": "lab/elie1/index.html#adc-accelerometer-and-sma-signal-input-connectors",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.8 ADC, Accelerometer and SMA Signal Input Connectors",
    "text": "13.8 ADC, Accelerometer and SMA Signal Input Connectors\nThe ADC page contains the ADC ADS1115IDGST itself as well as four SMA connectors to connect to an external signal generator for example. There is also the accelerometer ADXL335BCPZ which can be utilized to aquire signals for the ADC. The connections can be configured by solder jumpers. This gives us the ability to quickly solder and desolder connections without using additional jumpers or 0 \\(\\Omega\\) resistors for example. The SMA connector inputs are also protected by TVS diodes against ESD. This ensures reliable operation of the ADC and other ICs.\n\n\n\n\n\n\nFigure 13.5: ADC, Accelerometer and SMA Signal Input Connectors",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie1/index.html#pcb-design",
    "href": "lab/elie1/index.html#pcb-design",
    "title": "3  Design of an Analog-to-Digital Converter",
    "section": "13.9 PCB Design",
    "text": "13.9 PCB Design\nAfter designing the complete circuit in the schematic editor we checked for errors and annotated the schematics. Annotion means assigning each part an individual number to be able to seperate them. Then we did coarse placement of the components and then adjusted the footprints and did the fine placement.\nIt’s important to place decoupling capacitors close to the respective ICs so they have small parasitic inductance and therefore better power delivery when digital ICs are switching and also analog ICs are pulling higher currents. Additional capacitors reduce voltage drop whenever a device or IC is pulling current from the supply traces. Also we made sure to have a transmission via to all signal vias whenever we are changing signal layer so the signal is always referenced to ground and electric and magnetic fields are contained in a small area. This also helps with crosstalk and noise reduction.\nAround the board we added stitching vias to stitch the ground layers together and created a faraday cage in order to stop incoming em-waves from disturbing our analog and digital signals. Traces can and will act like antennas and we need to be careful with this. The distance of the vias around the edges of the board can be calculated with the following formula:\n\\[\nL = \\frac{1}{20} \\cdot \\frac{c}{\\sqrt{\\epsilon_{r_eff}} \\cdot f_{max}} \\tag{44}\n\\]\nwhere\n\nc = speed of light (\\(3\\cdot 10^{8}\\) m/s)\n\\(\\epsilon_{r\\_eff}\\) = effective dielectric constant of the PCB (for FR4 = 4.6)\n\\(f_{max}\\) = highest frequency of the RF circuit operation (Hz)\n\nwith \\(f_{max}\\) being the highest analog or digital frequency. The highest digital frequency is contained in the rising and falling edges and can therefore be much higher than the digital signal frequency itself.\nThe following pictures show the PCB:\n\n\n\n\n\n\nFigure 13.6: 2D-View of the top copper layer\n\n\n\nThis is the Top and Bottom Layers in the 2D view in Altium Designer\n\n\n\n\n\n\nFigure 13.7: Bottom copper layer\n\n\n\nThis picture shows the top copper layer\n\n\n\n\n\n\nFigure 13.8: Top copper without the ground copper pour\n\n\n\nThe next two pictures show the voltage drop on the 3.3V rails when the ESP and both ICs pull their respective currents. THe lowest voltage here is 3.29V. This can be important whenever high precision is needed for the ADCs since they compare the voltage on the inputs to the ADC reference voltage.\n\n\n\n\n\n\nFigure 13.9: Voltage drop simulation of the top copper layer power traces\n\n\n\n\n\n\n\n\n\nFigure 13.10: Voltage drop simulation of the bottom copper layer\n\n\n\nIn this last picture we can see the 3D rendered view from Altium Designer of our board.\n\n\n\n\n\n\nFigure 13.11: 3D-View of out PCB\n\n\n\n\n\n\n\nAlan Doolittle. 2025. “Lecture 25 - MOSFET Basics (Understanding with Math.” https://alan.ece.gatech.edu/ECE3040/Lectures/Lecture25-MOSTransQuantitativeId-Vd-Vg.pdf.\n\n\nAllelco. 2025. “Schmitt Triggers in Modern Electronics: Understanding Their Role and Capabilities.” https://www.allelcoelec.com/blog/schmitt-triggers-in-modern-electronics-understanding-their-role-and-capabilities.html.\n\n\nBajdechi, Ovidiu. 2004. “Systematic Design of Sigma-Delta Analog-to-Digital Converters.” In Analog Circuit Design: Sensor and Actuator Interface Electronics, Integrated High-Voltage Electronics and Power Management, Low-Power and High-Resolution ADC’s, edited by Michiel Steyaert, Arthur H. M. van Roermund, and Herman Casier, 293–326. Springer. https://doi.org/10.1007/978-1-4020-7997-5_13.\n\n\nBaker. 2011. “How Delta-Sigma ADCs Work, Part 1.” Analog Applications 7.\n\n\nBaker, R. Jacob. 2008. CMOS: Circuit Design, Layout, and Simulation. Wiley-IEEE Press. https://www.wiley.com/en-us/CMOS%3A+Circuit+Design%2C+Layout%2C+and+Simulation%2C+3rd+Edition-p-9780470290260.\n\n\nBoris Murmann. 2016. “Systematic Design of Analog Circuits Using Pre-Computed Lookup Tables.” https://www.ieeetoronto.ca/wp-content/uploads/2020/06/20160226toronto_sscs.pdf.\n\n\n———. 2024. “EE 628 - University of Hawai’i as Manoa, Analysis and Design of Integrated Circuits.” https://github.com/bmurmann/EE628/tree/main/1_Lectures.\n\n\nBoser, B. E., and B. A. Wooley. 1988. “The Design of Sigma-Delta Modulation Analog-to-Digital Converters.” IEEE Journal of Solid-State Circuits 23 (6): 1298–308. https://doi.org/10.1109/4.90025.\n\n\nChae, Youngcheol, Jimin Cheon, Seunghyun Lim, Minho Kwon, Kwisung Yoo, Wunki Jung, Dong-Hun Lee, Seogheon Ham, and Gunhee Han. 2011. “A 2.1 m Pixels, 120 Frame/s CMOS Image Sensor with Column-Parallel \\(\\Delta \\Sigma\\) ADC Architecture.” IEEE Journal of Solid-State Circuits 46 (1): 236–47. https://doi.org/10.1109/JSSC.2010.2085910.\n\n\nClifford, Michael. 2016. “Fundamental Principles Behind the Sigma-Delta ADC Topology: Part 1.” Analog Devices (AD). https://www.analog.com/en/resources/technical-articles/behind-the-sigma-delta-adc-topology.html.\n\n\nDobkin, Bob, and Jim Williams. 2011. Analog Circuit Design: A Tutorial Guide to Applications and Solutions. Elsevier/Newnes. https://www.elsevier.com/books/analog-circuit-design/dobkin/978-0-12-385185-7.\n\n\nDr. Andrew Masami Abo. 1992. “Design for Reliability of Low-voltage, Switched-capacitor Circuits.” https://designers-guide.org/forum/Attachments/SC_Dissertation.pdf.\n\n\nFilanovsky, M., and H. Baltes. 2004. “Theory and Applications of Incremental \\(\\Delta\\Sigma\\) Converters.” IEEE Transactions on Circuits and Systems-1: FUNDAMENTAL THEORY AND APPLICATIONS 41 (1): 46–49. http://web.mit.edu/magic/Public/papers/00260219.pdf.\n\n\nG. Jovanovic, Mile Stojcev, and Zoran Stamenkovic. 2010. “A CMOS Voltage Controlled Ring Oscillator with Improved Frequency Stability.” Scientific Publications of the State University of Novi Pazar Series A Applied Mathematics Informatics and Mechanics 2 (0): 1–9. https://www.researchgate.net/publication/266265623_A_CMOS_Voltage_Controlled_Ring_Oscillator_with_Improved_Frequency_Stability?enrichId=rgreq-ea65c1847781412dd1f866311352b440-XXX&enrichSource=Y292ZXJQYWdlOzI2NjI2NTYyMztBUzoxNDc0MTUzNDA0MjUyMTdAMTQxMjE1Nzk2NDc3NA%3D%3D&el=1_x_3&_esc=publicationCoverPdf.\n\n\nGift, Stephan J. G. and Maundy, Brent. 2022. “Operational Amplifiers.” In Electronic Circuit Design and Application, 325–73. Cham: https://doi.org/10.1007/978-3-030-79375-3_8; Springer International Publishing. https://doi.org/10.1007/978-3-030-79375-3_8.\n\n\nGoldenbaum, Prof. Dr.-Ing. Mario. 2022. “Grundlagen Der Informationstechnik.”\n\n\nH. Pretl. 2025. “IIC-OSIC-TOOLS.” https://github.com/iic-jku/IIC-OSIC-TOOLS.\n\n\nH. Pretl and Michael Koefinger. 2025. “Analog Circuit Design.” https://iic-jku.github.io/analog-circuit-design/.\n\n\nIHP. 2025. “SiGe BiCMOS and Silicon Photonics Technologies.” https://www.ihp-microelectronics.com/services/research-and-prototyping-service/mpw-prototyping-service/sigec-bicmos-technologies.\n\n\nIHP GmbH. 2025. “MPW-Zeitplan 2024 & 2025 und Preisinformationen 2024.” https://www.ihp-microelectronics.com/de/leistungen/forschungs-und-prototyping-service/mpw-prototyping-service/zeitplan-preisliste#c1379.\n\n\nKester, Walt. 2005. The Data Conversion Handbook. Burlington, MA: Newnes/Elsevier.\n\n\nMarkus, J., J. Silva, and G. C. Temes. 2004. “Theory and Applications of Incremental \\(\\Delta\\Sigma\\) Converters.” IEEE Transactions on Circuits and Systems I: Regular Papers 51 (4): 678–90. https://doi.org/10.1109/TCSI.2004.826202.\n\n\nMaxim. 2003. “Demystifying Delta-Sigma ADCs.” Tutorial 1870. Maxim Integrated.\n\n\nMeyer, Martin. 2019. Kommunikationstechnik: Konzepte Der Modernen Nachrichtenübertragung. Wiesbaden: Springer Vieweg.\n\n\nMitra, Sanjit K. 2001. Digital Signal Processing: A Computer-Based Approach. McGraw-Hill Higher Education.\n\n\nPavan, Shanthi, Richard Schreier, and Gabor C. Temes. 2017. Understanding Delta-Sigma Data Converters. IEEE Press Series on Microelectronic Systems. John Wiley & Sons.\n\n\nRazavi, Behzad. 2015. “The StrongARM Latch [a Circuit for All Seasons].” IEEE Solid-State Circuits Magazine 7 (2): 12–17. https://doi.org/10.1109/MSSC.2015.2418155.\n\n\nRosa, Jose M. de la. 2011. “Sigma-Delta Modulators: Tutorial Overview, Design Guide, and State-of-the-Art Survey.” IEEE Journal of Circuits and Systems 58 (1): 1–21. https://ieeexplore.ieee.org/document/5672380.\n\n\nRosa, Jose M. de la, and Rocío del Río. 2013. CMOS Sigma-Delta Converters: Practical Design Guide. John Wiley & Sons, Ltd. https://doi.org/https://doi.org/10.1002/9781118569221.\n\n\nRoss Walker. 2017. “Chapter 5, gm/ID - Based Design.” https://web02.gonzaga.edu/faculty/talarico/EE406/documents/gmid.pdf.\n\n\nSchreier, Richard, Gabor C Temes, et al. 2005. Understanding Delta-Sigma Data Converters. Vol. 74. IEEE press Piscataway, NJ.\n\n\nSilveira, F., D. Flandre, and P. G. A. Jespers. 1996. “A Gm/Id Based Methodology for the Design of CMOS Analog Circuits and Its Application to the Synthesis of a Silicon-on-Insulator Micropower OTA.” IEEE Journal of Solid-State Circuits 31 (9): 1314–19. https://doi.org/10.1109/4.535416.\n\n\nWilliams, Arthur, and Fred J. Taylor. 2006. Electronic Filter Design Handbook, Fourth Edition. 4th ed. McGraw-Hill Professional.\n\n\nWolter, Stefan. 2023. “Digital Signal Processing II – Lecture Slides.” University of Applied Sciences Bremen. https://wolter.hs-bremen.de/skripte/DSP_II/.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html",
    "href": "lab/elie2/index.html",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "",
    "text": "5 System Overview\nConcept Engineering of Mixed Signals and Systems\nWe all live in an analog world where all we percieve is analog in nature but at the same time our technology process on digital data. We have sensors as input nodes. They can be voice signals, RF signals, pressure. temperatur, etc. Every system acquires the analog data and results in analog data which is called as actuators such as Speakers, etc. So the point is we need something which converts the data from analog domain to discrete or digital domain and again converts back to analog domain. Here comes the concept of Data Converters.\nFigure 5.2 tells us that we have Continuous Domain where a signal can be represented as continuous in time and continuous in amplitude and Discrete Domain where the signal can be represented as discrete in time and amplitude. By sampling we discretise the signal from continuous time to discrete time and then by quantizing it we discretise its amplitude.\nOur main focus will be on the design of Analog to Digital Converter",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#sec-NTF",
    "href": "lab/elie2/index.html#sec-NTF",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "6.1 NTF Selection",
    "text": "6.1 NTF Selection\n\n\n\n\n\n\nFigure 6.2: NTF\n\n\n\nThe matlab code creates an NTF (see Figure 6.2) with CIFB topology and performs dynamic scaling using the functions of \\(\\Delta\\Sigma\\) toolbox (see (tb-CIFB-params?))).\n\nTable 2: Specifications. {#tb-CIFB-params}\n\n\nParameter\nValue\n\n\n\n\na(1)\n0.2636\n\n\na(2)\n2.137\n\n\nb(1)\n0.2636\n\n\nc(1)\n0.3097\n\n\nc(2)\n5.7837\n\n\n\nWhile designing NTF, OSR, quantization levels[N] are fixed attributes and order of the modulator, out-band gain[OBG], cut-off frequency, etc are the iterative factors. Let’s discuss some facts about NTF and Quantizer.\n\\(Dynamic Range = SQNR =\\frac{signal power}{noise power}\\)\nand in \\(d\\beta\\), \\(Dynamic Range =6.02 N + 1.76\\) (where N = quantization levels)\nas we decrease N by 1, SQNR decreases by factor of 6 \\(d\\beta\\) and this can be fixed easil by increasing OBG. The working is quantizer is basically we need to compare the output from the loop filter against a bunch of levels and generate PWM quantity which is dependent on these levels. Hence, fewer the levels of quantizer, easier is the design of quantizer. So we try and reduce the number of levels as much as possible and the lowest we can go is 2 levels resulting in 1-bit quantizer. Clearly, we are pushing the assumptions we made in the mathematical analysis of quantizer too much for e.g. the realization of quantizer as white additive noise is only valid when the levels are more.\nIt turns out that for a single-bit modulator, the noise is still shaped out but since we have only two levels, technically speaking, the quantizer is always either in upper saturation or lower saturation. Also it is not answerable defining the gain of the quantizer.\nThis gives rise to an Empirical rule: Lee’s Rule which says that the NTF’s out-band gain (OBG) must be \\(\\le 1.5\\). Whole bunch of simulations were run on 1-bit modulator and proven that Lee’s Rule will somehow make all the mathematical assumptions for quantizer hold true.\nThe mathematical assumptions are as follows:\n\nWe treat quantization noise as ‘white’, ‘broad-banded’ and independent of input signal\nThe error is bounded and also uniformly distributed between \\([-\\frac{\\Delta}{2}, \\frac{\\Delta}{2}]\\) (where\\(\\Delta\\) = step size of quantizer)\n\nAs we are desiging a second order single bit \\(\\Delta\\Sigma\\) modulator, quantization level[N] = 2 and the NTF is being automatically designed using \\(\\Delta\\Sigma\\) toolbox\n\n\n\n\n\n\nFigure 6.3: Block Diagram\n\n\n\nFigure 12.2 shows that we need discrete time integrators for our loop filter, 1-bit quantizer and 1-bit feedback.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#implementation-of-delayed-switch-capacitor-integrator",
    "href": "lab/elie2/index.html#implementation-of-delayed-switch-capacitor-integrator",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "7.1 Implementation of Delayed Switch-Capacitor Integrator",
    "text": "7.1 Implementation of Delayed Switch-Capacitor Integrator\nSo essentially, the equation speaks that we are storing the output and adding the input to the existing output. Therefore, to store the output we need a capacitor \\((C_1)\\), and we want to process this voltage onto the next capacitor \\((C_2)\\), but we also need to make sure that no current is being derived from it. Thus, we need to use a voltage controlled voltage source (Op-amp) but while designing on IC level, mosfets are always current sources controlled by voltage and its better to use OTA instead of Op-amps in our design. So, we need an OTA.\n?fig-phis shows that in phase1, \\(C_1\\) will store the charge from \\(V_{in}\\) and in phase2, the charge will be transfered to \\(C_2\\) and it will store charge from previous sample. To put this together (see ?fig-Club)\n \nNow, we also need to take charge injection into consideration and implement bottom plate sampling. Our derived switch-capacitor integrator will be having a Transfer function: \\(H(z) = \\frac{C_1}{C_2}\\frac{z^{-1}}{1-z^{-1}}\\) (See Figure 7.2)\n\n\n\n\n\n\nFigure 7.2: Delayed Switch capacitor Integrator\n\n\n\nThe input is sampled in track phase \\(\\phi_1\\) and transferred to \\(C_2\\) in hold phase \\(\\phi_2\\) again in next \\(\\phi_1\\), new \\(V_{in}\\) is sampled and hence, the sampled signal is available at output after one cycle proving the delay. (see Figure 7.3)\n\n\n\n\n\n\nFigure 7.3\n\n\n\nThis boils down to a second order switch capacitor circuit follwed by a single bit quantizer as shown in Figure 7.4.\n\n\n\n\n\n\nFigure 7.4: Second order switch capacitor DSM",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#deriving-required-parameters-for-design",
    "href": "lab/elie2/index.html#deriving-required-parameters-for-design",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "9.1 Deriving required parameters for design",
    "text": "9.1 Deriving required parameters for design\nAs mention in Chapter 7 the load driven by our circuit is purely capacitive and hence taking consideration of swing over gain, Folded Cascode topology (see ?fig-OTA) is what best suited in our case, where we have PMOS input pair.\n\n\n\n\n\n\nFigure 9.1: Candidate OTA\n\n\n\nDetailed analysis of Folded Cascode topology can be accessed here. You can find the quantitative as well as qualitative analysis , noise analysis, offset / mismatch analysis.\n\n9.1.1 Deriving \\(I\\)\nAs shown in Figure 9.1 the magnitude of the output current under these conditions is \\(I\\), where \\(I\\) is the bias current in each half of the differential pair. (\\(I\\) is also assumed to be the standing current in the output cascodes.) Clearly, \\(I\\) must be large enough to transfer the charge from the input capacitor(s) to the integrating capacitor in the allotted time.(S. Pavan and Temes 2017)\nLet’s allocate half of a clock phase (i.e., one quarter of a clock period) for slewing. Since the voltage on the left side of the input capacitor C1 can change by as much as \\({{V_\\mathrm{DD}}} = 1.5 V\\) , we therefore need\n\\[\nI &gt; \\frac{C_1 VDD}{T/4} = \\frac{0.36 \\, \\mathrm{pF} \\cdot 1.5 \\, \\mathrm{V}}{1.13 \\, \\mu\\mathrm{s}} = 0.8 \\, \\mu\\mathrm{A}.\n\\]\n\n\n9.1.2 Deriving \\({g_\\mathrm{m}}\\) from Time-constant calculation\n\n\n\n\n\n\nFigure 9.2: Time Constant Calculation\n\n\n\nFigure 9.2 shows the small-signal model of an integrator in the charge-transfer phase and an equivalent circuit from which we see that the time-constant is\n\\[\n\\tau = RC = \\frac{C_1 + C_3 + \\frac{C_1 C_3}{C_2}}{g_\\mathrm{m}}\n\\]\nNow let’s say we take the linera settling to provide attenuation of 100 \\(dB\\)\n\\[\n\\frac{T}{4} = \\tau \\ln(10^5) \\approx 12\\tau\n\\]\nThis gives us \\[\n{g_\\mathrm{m}} = \\frac{C_1 + C_3 + \\frac{C_1 C_3}{C_2}}{\\frac{T}{48}} = 5.7 \\, \\mu\\frac{A}{V}\n\\]\n\n\n9.1.3 Deciding \\(L\\) and \\(W\\) for MOSFETS\nNow that we have the exact values for \\({g_\\mathrm{m}}\\) and \\({I_\\mathrm{D}}\\), we can derive the values of \\(L\\) and \\(W\\) by making use of \\({g_\\mathrm{m}}\\)\\({I_\\mathrm{D}}\\) vs \\({I_\\mathrm{D}}\\)\\(W\\) curve. Refer to Chapter 10 for detailed discussion regarding sizing.\nWe already know the current flowing throught each MOSFET (See Figure 9.1). As shown in Figure 9.3 and Figure 9.4, by appropriately choosing the \\(L\\), we can obtain \\(W\\) for $ = 7.12 $\n\n\n\n\n\n\nImportant\n\n\n\nThe minimum length consideration while designing in low voltage CMOS technology should be atleast 3 to 4 times the \\(L_\\min\\). In our case \\(L_\\min = 0.13 \\, \\mu\\).\n\n\n\n\n\n\n\n\nFigure 9.3: \\({g_\\mathrm{m}}\\)\\({I_\\mathrm{D}}\\) vs \\({I_\\mathrm{D}}\\)\\(W\\) curve for nmos\n\n\n\n\n\n\n\n\n\nFigure 9.4: \\({g_\\mathrm{m}}\\)\\({I_\\mathrm{D}}\\) vs \\({I_\\mathrm{D}}\\)\\(W\\) curve for pmos\n\n\n\n\n\n9.1.4 OTA biasing using current mirror\n\n\n\n\n\n\nFigure 9.5: OTA Biasing\n\n\n\nFigure 9.5 explains the biasing of the OTA using Wilson’s current mirror topology.\n\n\n9.1.5 Performance of designed OTA\nFor understanding how the designed OTA is performing, we run transient analysis, ac analysis and dc analysis. In order to achieve these analysis, we need to put our OTA in negative feedback loop (unity feedback loop in our case) and realize the plots. Figure 9.6 shows the transient plot and gives us the time constant in which it reaches the steady state. NgSpice yeilds tsettle = 8.663771e-09\nFigure 9.8 and Figure 9.7 shows us the magnitude and phase over a range of frequency.Where NgSpice yeilds dc_gain = 9.156547e-01 fbw = 7.544229e+07 Gain_error = -8.41453e-02\n\n\n\n\n\n\nFigure 9.6: Transient Analysis\n\n\n\n\n\n\n\n\n\nFigure 9.7: AC Analysis\n\n\n\n\n\n\n\n\n\nFigure 9.8: AC Analysis",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#sec-techsweep-testbench",
    "href": "lab/elie2/index.html#sec-techsweep-testbench",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "10.1 Testbench for MOSFETSWEEP",
    "text": "10.1 Testbench for MOSFETSWEEP\nIn order to get all the operating points for lv nmos shown in Figure 10.1, and lv pmos shown in Figure 10.2, we run a techsweep and obtain curves related to parameters such as \\({g_\\mathrm{m}}\\), \\({g_\\mathrm{ds}}\\), \\({C_\\mathrm{gs}}\\), \\({I_\\mathrm{d}}\\), \\({V_\\mathrm{GS}}\\), \\({V_\\mathrm{DS}}\\), \\(L\\), \\(W\\). We create a testbench in Xschem which sweeps the terminal voltages, and records various large- and small-signal parameters, which are then stored in large tables.\n\n\n\n\n\n\nFigure 10.1: Testbench for LV NMOS \\(g_\\mathrm{m}/I_\\mathrm{D}\\) characterization.\n\n\n\n\n\n\n\n\n\nFigure 10.2: Testbench for LV PMOS \\(g_\\mathrm{m}/I_\\mathrm{D}\\) characterization.\n\n\n\nAfter obtaining the parameters we plot them using Matlab, and obtain some important curves or graphs in order to understand the MOSFET’s behaviour.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#designing-of-the-1-bit-quantiser",
    "href": "lab/elie2/index.html#designing-of-the-1-bit-quantiser",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "11.1 Designing of the 1-Bit Quantiser",
    "text": "11.1 Designing of the 1-Bit Quantiser\nBased on the collected experience in this lecture we are desiging a 1-bit Quantiser (Comparator) in Xschem.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#defining-a-comparator",
    "href": "lab/elie2/index.html#defining-a-comparator",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "11.2 Defining a Comparator",
    "text": "11.2 Defining a Comparator\nThis block compares two input voltages, \\({V_\\mathrm{1}}\\) and \\({V_\\mathrm{2}}\\) and determines their relationship. If \\({V_\\mathrm{1}}\\) &gt; \\({V_\\mathrm{2}}\\) output is set to \\({V_\\mathrm{DD}}\\). Otherwise, if \\({V_\\mathrm{1}}\\) &lt; \\({V_\\mathrm{2}}\\) the output is 0\\({V_\\mathrm{}}\\).\nThe ideal input-output characteristics should resemble a signum function, as illustrated in ?fig-Ip_Op(Comp).\n{#fig-Ip_Op(Comp)}",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#realising-a-comparator",
    "href": "lab/elie2/index.html#realising-a-comparator",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "11.3 Realising a Comparator",
    "text": "11.3 Realising a Comparator\nConsider an amplier with a sufficiently large gain. For simplicity consider one input \\({V_\\mathrm{in}}\\), the output is going to be amplified by factor A. Amplifier operates between \\({V_\\mathrm{DD}}\\) and GND. If the gain is large emough the output will saturate to \\({V_\\mathrm{DD}}\\) or GND.\nThe minimum input required for the output to reach \\({V_\\mathrm{DD}}\\) is \\({V_\\mathrm{DD}}\\)/\\(A\\), at which point the comparator produces an output of \\({V_\\mathrm{DD}}\\).\nThe output is then fed into a digital block, typically a flip-flop, to resample the obtained signal. For the flip-flop to register a digital 1, the amplifier’s output must exceed the input threshold voltage \\({V_\\mathrm{TH}}\\).\nAs we know that the common implementation of first stage OTA is Differential Pair as shown in Figure 11.1.\n\n\n\n\n\n\nFigure 11.1: Differential Pair\n\n\n\nThe gain of the circuit, as shown in Figure 11.1 is given by: \\({V_\\mathrm{out}}\\) = \\({g_\\mathrm{m}R}\\)\\(\\Delta V\\) Initially, the output of Figure 11.1 is zero. When an input is applied, the output gradually increases due to the influence of parasitic capacitances. Over time, it settles exponentially to its final value. The closed form expression for exponentially settling behaviour is given by: \\[\nV_{\\mathrm{out}} = g_m R \\Delta V \\left(1 - e^{-t/\\tau}\\right)\n\\]\nTo accelerate the response of the output curve, we need to adjust \\({\\tau}\\) as its magnitude cannot be directly altered. One effective approach is to replace the resistor with a negative resistor, which helps achieve faster settling.\n\\[\n-g_m R \\Delta V \\left(1 - e^{t/\\tau}\\right)\ng_m R \\Delta V \\left(1 - e^{t/\\tau}\\right) - {g_\\mathrm{m}R}\\Delta V\n\\tag{11.1}\\]\nEquation 11.1 gives much quicker settling in the output.\nNegative resistor is if we apply voltage we should not be drawing current but we should put the current in the node in order get negative reistance. We cannot have a constant current source because it should depend on \\({V_\\mathrm{t}}\\) so we should use voltage control current source. Simplest voltage control current source is MOSFET. Therefore we replace resistors by PMOS’s as shown in Figure 11.2.\nA negative resistor is characterized by the property that when a voltage is applied, it does not draw current but instead injects current into the node, effectively creating negative resistance. A constant current source cannot be used in this case, as the current must depend on \\({V_\\mathrm{t}}\\). Therefore, a voltage-controlled current source is required. The simplest implementation of a voltage-controlled current source is a MOSFET. Consequently, resistors are replaced with PMOS transistors, as illustrated in Figure 11.2.\n\n\n\n\n\n\nFigure 11.2: Updated Differential Pair\n\n\n\nInitially, the output voltages \\({V_\\mathrm{x}}\\) and \\({V_\\mathrm{y}}\\) decrease as current is drawn from the top PMOS transistors. Among them, \\({V_\\mathrm{x}}\\) drops more rapidly than \\({V_\\mathrm{y}}\\). As \\({V_\\mathrm{x}}\\) decreases, the current through its corresponding transistor increases, eventually surpassing the externally drawn current. As a result, \\({V_\\mathrm{y}}\\) begins to rise. As \\({V_\\mathrm{y}}\\) increases, the gate voltage at \\({V_\\mathrm{x}}\\) also increases, reducing the current through the transistor. Consequently, the amount of current being pushed into the node becomes less than the current being pulled out, causing \\({V_\\mathrm{x}}\\) to drop even further.\nUltimately, this feedback process leads to: \\({V_\\mathrm{y}}\\) reaching to \\({V_\\mathrm{DD}}\\) \\({V_\\mathrm{x}}\\) reaching to 0\\({V_\\mathrm{}}\\)\nThis kind of exponential increase is called “Regeneration”.\nWhen \\(\\Delta V\\) &lt; 0, the voltage \\({V_\\mathrm{y}}\\) should decrease while \\({V_\\mathrm{x}}\\) should should rise to \\({V_\\mathrm{DD}}\\). However, a challenge with this approach arises due to the positive feedback, which reinforces the voltages at \\({V_\\mathrm{DD}}\\) and 0\\({V_\\mathrm{}}\\). Once these values are established, the positive feedback works to maintain them, preventing a smooth transition.\nIn this configuration, the PMOS transistors remain in the same state, and the switching action relies on the two NMOS transistors. However, unless the current drawn from node \\({V_\\mathrm{y}}\\) is significantly stronger, it cannot be effectively pulled down to 0\\({V_\\mathrm{}}\\).\nThe key issue is that after completing a comparison for the previous input, the circuit retains the same output state while starting a new comparison. To ensure proper operation, both outputs must be reset before a new comparison begins.\nThe total time available is from 0 to \\({T_\\mathrm{s}}\\) where, the first half is dedicated to sampling and the second half is allocated for regeneration.\nThe comparator operates in the regeneration phase, denoted as \\(\\phi c\\) and in the sampling phase, represented a \\(\\overline{\\phi c}\\). During the sampling phase, the outputs can be reset. To achieve this, switches are used to reset the outputs to \\({V_\\mathrm{DD}}\\) as in Figure 11.3.\n\n\n\n\n\n\nFigure 11.3: Addition of Switches\n\n\n\nIn Figure 11.3, the two NMOS transistors do not need to be active during the reset phase of the PMOS transistors. Therefore, they can be turned off by switching off the bottom NMOS transistor. This allows the circuit to be clocked at \\(\\phi c\\). Additionally, PMOS transistors can be used as switches for this operation as in Figure 11.4.\n\n\n\n\n\n\nFigure 11.4: PMOS_NMOS Comparator Circuit\n\n\n\nTo describe the output behavior of a PMOS switch with respect to the clock signal \\(\\phi c\\), here’s how it works step-by-step: 1.When \\(\\phi c\\) = 0: The switches are off, so both The output of above Figure 11.4, \\({V_\\mathrm{x}}\\) and \\({V_\\mathrm{y}}\\) are at 0\\({V_\\mathrm{}}\\). 2.When \\(\\phi c\\) = 1: The switches are now on. Initially, \\({V_\\mathrm{x}}\\) starts to drop faster because the PMOS transistor turns on when the voltage difference \\({V_\\mathrm{DD}}\\)-\\({V_\\mathrm{TH}}\\) is large enough. 3.As \\({V_\\mathrm{x}}\\) drops and approaches a certain threshold, the PMOS turns on completely. The voltage at \\({V_\\mathrm{y}}\\) then starts increasing and approaches \\({V_\\mathrm{DD}}\\). Simultaneously, \\({V_\\mathrm{x}}\\) continues to drop due to the action of the PMOS switch.\nIssue with Static Power Consumption in Comparator Circuit\nIn the described PMOS-NMOS comparator circuit, the comparison process halts at a certain point where: \\({V_\\mathrm{y}}\\) = \\({V_\\mathrm{DD}}\\) and \\({V_\\mathrm{x}}\\) = 0 At this stage, the NMOS transistor on the right side is turned on, which keeps the corresponding PMOS transistor in the ON state. Static Power Consumption: After the comparison is complete, and there is no change in the inputs and outputs, static power consumption persists. This is due to a direct path from \\({V_\\mathrm{DD}}\\) to ground, as the NMOS remains on while the PMOS continues to conduct.\nInfluence of Differential Voltage(\\({\\Delta V}\\)): When the differential voltage \\({\\Delta V}\\) is large, the term \\(\\frac{\\Delta V}{2}\\) becomes significant. This results in ${V_} being very small, which in turn causes the PMOS transistor to turn off, effectively reducing power consumption. However, when the differential voltage \\({\\Delta V}\\) is small, the voltage difference is insufficient to turn off the PMOS, allowing a direct path from \\({V_\\mathrm{DD}}\\) to ground, and consequently leading to static power consumption.\nTo address this issue, a direct connection exists between the PMOS and NMOS transistors, creating an unintended path from \\({V_\\mathrm{DD}}\\) to ground. To resolve this, an additional element should be introduced between points A and B, as illustrated in the diagram below Figure 11.5\n\n\n\n\n\n\nFigure 11.5: PMOS_NMOS Comparator Circuit\n\n\n\nThe goal is to ensure that node B is OFF when \\({V_\\mathrm{x}}\\) = 0 \\({V_\\mathrm{}}\\) and node A is ON when \\({V_\\mathrm{y}}\\) = \\({V_\\mathrm{DD}}\\). This can be achieved by using an NMOS transistor, with its gate connected to \\({V_\\mathrm{x}}\\) and \\({V_\\mathrm{y}}\\) as shown in #fig-comp-1\n\n\n\n\n\n\nFigure 11.6: Comparator\n\n\n\nIn the diagram Figure 11.6, the drains and gates of the PMOS and NMOS transistors are connected to each other, forming a CMOS inverter.\nThi circuit is known as Strong-Arm Latch. Drawing it neatly as in ?fig-comp-final \nIn practice there is one more modification made, along with ressetting X and Y we will also reset P and Q.\n\\({V_\\mathrm{1}}\\)-\\({V_\\mathrm{2}}\\) = \\({\\Delta V}\\) &gt; 0\nThe output analysis of ?fig-comp-final is showin in Figure 11.7.\nWhen, \\(\\phi c\\) = 0, \\({V_\\mathrm{X,Y,P,Q}}\\) = \\({V_\\mathrm{DD}}\\) When, \\(\\phi c\\) = ON, switches are OFF.\n\n\n\n\n\n\nFigure 11.7: Output Analysis of Strong Arm Latch\n\n\n\nFigure 11.8 shows the transient analysis of our comparator.\n\n\n\n\n\n\nFigure 11.8: Transient Analysis of Comparator",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#implementing-a-strong-arm-latch-for-delta-sigma-modulator",
    "href": "lab/elie2/index.html#implementing-a-strong-arm-latch-for-delta-sigma-modulator",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "11.4 Implementing a Strong Arm Latch for Delta-Sigma Modulator",
    "text": "11.4 Implementing a Strong Arm Latch for Delta-Sigma Modulator\nBased on the above theory, we need to design a comparator and a latch that stores the output data from the comparator and converts it into a strong digital output.\n(ig-comp2-sch?)- and Figure 11.10 shows the implementation and transient analysis of Strong Arm Latch Comparator respectively.\n\n\n\n\n\n\nFigure 11.9: Schematic representation of a Strong-Arm Latch Comparator\n\n\n\n\n\n\n\n\n\nFigure 11.10: Transient Analysis of a Strong-Arm Latch Comparator",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#why-non-overlapping-phases",
    "href": "lab/elie2/index.html#why-non-overlapping-phases",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "12.1 Why non-overlapping phases?",
    "text": "12.1 Why non-overlapping phases?\n1. Preventing short circuit current:\nIn switched-capacitor circuits, two switches are controlled by complementary clock phases. If both clock signals go high simultaneously, both switches turn on, creating a short circuit to ground or supply voltage. A non-overlapping clock eliminates this issue by ensuring a small delay (Dead Time) between the two clock phases.\n2. Improving Sampling Accuracy:\nIn \\(\\Delta\\Sigma\\) ADCs, capacitors require sufficient time to charge or discharge before the clock phase changes. If the clock phases overlap, the capacitor may not fully charge, leading to sampling errors. A non-overlapping clock ensures accurate data transfer and minimizes noise.\n3. Reducing Charge Injection & Clock Feedthrough:\nOverlapping clock phases can cause charge injections and clock feedthrough, leading to signal distortion and increased noise. A non-overlapping clock helps to reduce these effects significantly.\n\n\n\n\n\n\nFigure 12.1: Block Diagram",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#how-to-generate-a-non-overlapping-clock",
    "href": "lab/elie2/index.html#how-to-generate-a-non-overlapping-clock",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "12.2 How to Generate a Non-Overlapping Clock?",
    "text": "12.2 How to Generate a Non-Overlapping Clock?\nTo generate ϕ1 and ϕ2 clock phases that never overlap, delay elements (RC delay, buffers, inverters) and AND/NOR gates are commonly used. The propagation delay is determined by the number and sizing of inverters in the non-overlapping circuit. While increasing the number of inverters extends the delay, it also increases power consumption and chip area. Transmission gates can be used alongside inverters to optimize delay and reduce the number of inverter stages. Switched capacitor circuits are widely used in ADCs, comparators, filters, and sample-and-hold circuits due to their compact and reliable design. The inverter chain configuration affects clocking sequences, where odd/even numbers of inverters generate specific logic transitions. Proper inverter sizing is crucial for achieving high-speed operation while minimizing area.\nSo, we saw that for example we don’t need 2 clocks to be high. At the same time phase 2 is going high after phase 1 is low by this you need logic to give you an output of 1 when both inputs are zero so that’s a NOR gate.\nAs you can see in the picture The basic non-overlapping clock generator consists of a S-R flip-flop, with inverters in series before the feedback, to add delay as required. Each sub-block contains inverters and one transmission gate to produce desired delay in the falling or rising edge.\n\n\n\n\n\n\nFigure 12.2: Block Diagram",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie2/index.html#schematic-entry-of-clock-generator",
    "href": "lab/elie2/index.html#schematic-entry-of-clock-generator",
    "title": "4  Discrete-Time Delta-Sigma Modulator",
    "section": "12.3 Schematic entry of Clock Generator",
    "text": "12.3 Schematic entry of Clock Generator\nThere is the design of the non-overlapping clock phases with our project specifications.\n\n\n\n\n\n\nFigure 12.3: CLK_GEN_output\n\n\n\n\n\n\n\n\n\nFigure 12.4: CLK_GEN_testbench",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Discrete-Time Delta-Sigma Modulator</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html",
    "href": "lab/elie3/index.html",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "",
    "text": "6 Introduction\nIn today’s digital world, Analog-to-Digital Converters (ADCs) are everywhere—from smartphones and medical devices to industrial sensors and audio systems. They convert real-world analog signals, like sound and motion, into digital data that computers can understand.\nOne of the most powerful types of ADCs is the Delta-Sigma Modulator (DSM), known for its high accuracy and noise reduction. Unlike traditional ADCs, DSMs use oversampling and feedback loops to improve signal quality, making them ideal for applications that require precision, such as communication systems, and high-fidelity audio processing.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#what-this-document-covers",
    "href": "lab/elie3/index.html#what-this-document-covers",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "6.1 What This Document Covers",
    "text": "6.1 What This Document Covers\nThis work explores the design, implementation, and analysis of Delta-Sigma ADCs through both theory and hands-on experimentation. We will cover:\nHow ADCs work, including key components like filters, samplers, and quantizers. Types of ADCs, including Flash, Successive Approximation, and Delta-Sigma. The practical design of a Delta-Sigma ADC system, integrating: -ADXL335 Accelerometer for motion sensing. -ADS1115 ADC for signal conversion. -ESP8266 Microcontroller for data processing and display.\nCircuit design and simulations using MATLAB/Simulink, LTSpice, and Xschem to model and test ADC performance along with findings and challenges have been documented.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#why-delta-sigma-adcs",
    "href": "lab/elie3/index.html#why-delta-sigma-adcs",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "6.2 Why Delta-Sigma ADCs?",
    "text": "6.2 Why Delta-Sigma ADCs?\nDelta-Sigma ADCs stand out because they filter out noise, enhance precision, and are cost-effective. They use a clever trick—oversampling—to capture more signal details than conventional ADCs, making them ideal for low-frequency, high-accuracy applications.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#how-this-document-is-organized",
    "href": "lab/elie3/index.html#how-this-document-is-organized",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "6.3 How This Document is Organized",
    "text": "6.3 How This Document is Organized\nThis document is structured to take you from the basics of ADCs to the design, simulation, and practical implementation of Delta-Sigma ADCs. You’ll find:\n-Introduction – Understanding ADCs and why Delta-Sigma is special. -Design and Implementation – Hands-on system design using sensors, microcontrollers, and ADCs. -Circuit Simulations – Testing and analyzing ADC performance in MATLAB, LTSpice, and Xschem. -Applications and Challenges – Real-world uses and common design hurdles.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#analog-signal-processing-system",
    "href": "lab/elie3/index.html#analog-signal-processing-system",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "6.4 Analog Signal Processing System",
    "text": "6.4 Analog Signal Processing System\n\n6.4.1 System Overview\nThis documentation presents the design and implementation of a Delta Sigma Modulator. The system successfully captures real-time acceleration data, converts it into digital form, processes it using a microcontroller, and visualizes the results on a screen. The primary focus was the ADC subsystem, particularly the custom Delta-Sigma Modulator (DSM) integrated within the ADS1115, replacing the standard comparator with a 5T OTA in the design of 1st order and 2nd order DSM.\nThe system comprises the following components: - ADXL335 Accelerometer for motion sensing. - ADS1115 Analog-to-Digital Converter (ADC) for high-resolution signal conversion. - ESP8266 Microcontroller for processing and data transmission. - Custom Delta-Sigma Modulator (DSM) with a 5T Operational Transconductance Amplifier (OTA) to replace ADC.\n\n\n6.4.2 Block Diagram of the System\n\n\n\n\n\nflowchart LR\n  A[\"Accelerometer\"] --&gt; B[/Analog to Digital convertor/] --&gt; C[\"Microcontroller\"]\n\n\n\n\n\n\nThe system consists of three main blocks: an accelerometer, an analog-to-digital converter (ADC), and a microcontroller. The accelerometer detects motion and generates analog voltage signals corresponding to acceleration in three axes (X, Y, and Z). These analog signals are then fed into the ADC, which converts them into a digital format for further processing. Finally, the microcontroller receives the digitized data, processes it, and transmits the results for visualization or further analysis.\n\n6.4.2.1 System Implementation on Breadboard\nThe designed system has been successfully assembled on a breadboard, as shown in the image below.\n\n\n\nBreadboard\n\n\nThe hardware components are interconnected according to the block diagram, ensuring proper signal flow and data acquisition. The accelerometer, ADC, and microcontroller are wired to facilitate seamless communication. This physical setup validates the theoretical design and allows for real-time testing and evaluation.\nThis setup ensures high-precision motion sensing, making it suitable for applications such as vibration monitoring, tilt sensing, and real-time motion tracking.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#functional-blocks-and-interfaces-of-our-system",
    "href": "lab/elie3/index.html#functional-blocks-and-interfaces-of-our-system",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "6.5 Functional Blocks and Interfaces of our System",
    "text": "6.5 Functional Blocks and Interfaces of our System\n\n6.5.1 Accelerometer (ADXL335)\nThe ADXL335 is a low-power, three-axis MEMS accelerometer by Analog Devices, capable of measuring both static and dynamic accelerations such as gravity, motion, shock, or vibration.\n\n\n\nADXL335\n\n\n\nBasic Functionality: Measures acceleration in X, Y, and Z axes.\nOutput: Analog voltage signals proportional to acceleration.\nInterfacing: Connected to ADS1115’s analog input channels and outputs interfaced with ADS1115.\nKey Features:\n\n\n\n\nFeature\nValue\n\n\n\n\nOperating Voltage\n1.8V – 3.6V\n\n\nOperating Current\n350μA (typical)\n\n\nSensing Range\n±3g (Full Scale)\n\n\nTemperature Range\n−40°C to +85°C\n\n\nSensing Axis\n3 Axis\n\n\nSensitivity\n270–330mV/g\n\n\nShock Resistance\nUp to 10,000g\n\n\nDimensions\n4mm x 4mm x 1.45mm\n\n\n\n\n6.5.1.1 MEMS Accelerometer Working Principle\n\n\n\nMEMS acc\n\n\nA MEMS (Micro-Electro-Mechanical System) accelerometer is a tiny structure built on a silicon wafer, suspended by polysilicon springs. When the sensor experiences acceleration along the X, Y, and/or Z axes, the suspended structure moves, causing a change in capacitance between fixed plates and the attached plates. This change is proportional to the acceleration, and the sensor converts it into an analog output voltage.\n\nReference: ADXL335 Datasheet | ADXL335 working\n\n\n\n\n6.5.2 Analog-to-Digital Converter (ADS1115)\n\nReasons why we use the ADC as an intermediate block between the Accelerometer and the Microcontroller:\n\nHigher Resolution: ADS1115 provides more accurate readings than the ESP8266’s built-in ADC.\nLower Noise: ADS1115 minimizes noise interference for cleaner data.\nProgrammability: ADS1115 offers flexible configuration for optimal performance.\nReduced ESP8266 Load: Offloads ADC tasks, freeing up resources for other functions.\nSimplified Interfacing: I2C communication simplifies wiring and reduces pin count.\n\n\n\n\n\nADS1115\n\n\n\nFunction: Converts the analog signal from ADXL335 to a 16-bit digital output.\nInternal Components:\n\nMultiplexer (MUX): Selects input channels\nProgrammable Gain Amplifier (PGA): Enhances signal resolution\nDelta-Sigma ADC: Converts analog to digital signal\nComparator: Used for threshold-based signal analysis\n\nModes of Operation:\n\nContinuous conversion mode\nSingle-shot conversion mode (low-power optimization)\n\n\n - Specifications: - Resolution: 16-bit - Input range: ±256 mV to ±6.144 V - Data rate: Programmable up to 860 samples per second - Low power consumption: 150 µA (typical) - Integrated voltage reference and oscillator\n - Interfacing: Communicates with ESP8266 via I²C protocol.\n\nReference: ADS1115 Datasheet\n\n\n\n6.5.3 Microcontroller (ESP8266)\n\n\n\nESP8266\n\n\n\nFunction: Processes the digitized signal and transmits data to the laptop.\nProgramming Interface: Arduino IDE with I²C communication.\nSpecifications:\n\n80 MHz CPU frequency\n96KB RAM\nSPI/I2C/UART interfaces\n\nReference: ESP8266 Documentation 1 | ESP8266 Documentation 2\n\n\n\n6.5.4 IDE Code Execution (Arduino IDE)\nThe following code was executed through Arduino IDE to initialize the system, acquire signals from the accelerometer, data conversion them by the ADC, process through Microcontroller and display the results on the laptop.\n#include &lt;ADS1115_WE.h&gt;\n#include &lt;Wire.h&gt;\n\n#define I2C_ADDRESS 0x48\n\nADS1115_WE adc = ADS1115_WE(I2C_ADDRESS);\n\nvoid setup() {\n    Wire.begin();\n    Serial.begin(9600);\n\n    if (!adc.init()) {\n        Serial.println(\"ADS1115 not connected!\");\n        while (1);\n    }\n\n    adc.setVoltageRange_mV(ADS1115_RANGE_6144);\n    adc.setCompareChannels(ADS1115_COMP_0_GND);\n    adc.setMeasureMode(ADS1115_CONTINUOUS);\n    adc.setConvRate(ADS1115_128_SPS);\n\n    Serial.println(\"ADS1115 Initialization Complete\");\n    Serial.println(\"Starting Continuous Measurement...\");\n    Serial.println(\"All values are in volts.\\n\");\n}\n\nvoid loop() {\n    Serial.print(\"Ax: \");\n    Serial.print(readChannel(ADS1115_COMP_0_GND));\n\n    Serial.print(\"   Ay: \");\n    Serial.print(readChannel(ADS1115_COMP_1_GND));\n\n    Serial.print(\"   Az: \");\n    Serial.print(readChannel(ADS1115_COMP_2_GND));\n\n    Serial.println();\n    delay(1000);\n}\n\nfloat readChannel(ADS1115_MUX channel) {\n    adc.setCompareChannels(channel);\n    return adc.getResult_V();\n}\n\n\n6.5.5 System Output and Analysis\n\n\n\nArduino Out\n\n\nThe output readings obtained from our system are as follows: - Ax (X-axis acceleration): Ranging from 1.39V to 1.91V - Ay (Y-axis acceleration): Ranging from 1.40V to 1.93V - Az (Z-axis acceleration): Ranging from 1.57V to 2.01V\nThe data showcases variations in acceleration detected by the ADXL335 accelerometer. As the system operates in continuous measurement mode, the ADC continuously samples and transmits data to the microcontroller, which then displays the results. The variations in Ax, Ay, and Az indicate changes in motion along the three axes, which can be correlated to tilting, rotation, or vibration of the sensor.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#signal-and-interface-descriptions",
    "href": "lab/elie3/index.html#signal-and-interface-descriptions",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "6.6 Signal and Interface Descriptions",
    "text": "6.6 Signal and Interface Descriptions\n\n\n\n\n\n\n\n\n\nBlock\nInput\nOutput\nCommunication Protocol\n\n\n\n\nADXL335\n3.3V Power, Motion\nAnalog Voltage (X, Y, Z)\nConnected to ADS1115 Analog Inputs\n\n\nADS1115\nAnalog Signals\n16-bit Digital Output\nI²C Communication\n\n\nESP8266\nDigital Data (I²C)\nProcessed Data via Serial\nUSB (Laptop)",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#st-order-delta-sigma-modulator",
    "href": "lab/elie3/index.html#st-order-delta-sigma-modulator",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.1 1st Order Delta-Sigma Modulator",
    "text": "7.1 1st Order Delta-Sigma Modulator\n\n7.1.1 System Model Description\nA Delta-Sigma Modulator (DSM) is a key component in analog-to-digital conversion. It works by oversampling an input signal and shaping the quantization noise to high frequencies outside the signal bandwidth. This allows for increased resolution within the desired bandwidth after digital filtering and downsampling.\n\n7.1.1.1 Key Components:\n\nInput Signal: A sine wave used as the test input.\nNoise Transfer Function (NTF): Shapes the quantization noise.\nQuantizer: Produces a discrete output.\nFeedback Loop: Ensures stability and improves accuracy.\n\nThe 1st Order DSM consists of a single integrator in the feedback loop. The noise shaping improves the signal-to-noise ratio (SNR) by pushing the quantization noise to higher frequencies.\n\n\n\n7.1.2 Design Procedure\n\n7.1.2.1 Parameters\nL = 1;                % Order of modulator\nform = 'CIFB';        % Cascade of integrator feedback\nfs = 220e3;           % Sampling frequency (higher to improve resolution)\nTs = 1/fs;            % Sampling time\nOSR = 256;            % Oversampling Ratio\nN = 16 * OSR;         % Simulation length (output samples), FFT points\nfB = fs / (2 * OSR);  % Bandwidth\ncycles = 5;           % Number of sinusoids in the input\nfx = cycles * fs / N; % Input test tone frequency\nA = 0.7;              % Signal amplitude (scaled for input range)\nt = Ts * (0:N-1);     % Time vector\nu = A * sin(2 * pi * fx * t); % Input sinewave signal\n\n\n7.1.2.2 Design Steps\n\nDefine Parameters: Set modulator order, sampling frequency, oversampling ratio, and input signal.\nSynthesize NTF: Use the synthesizeNTF function to generate the noise transfer function.\nRealize DSM: Realize the DSM using realizeNTF and scale coefficients with scaleABCD.\nSimulate DSM: Simulate the modulator and obtain the output using simulateDSM.\nAnalyze Outputs: Generate time-domain response, Bode plot, pole-zero plot, and spectral analysis.\n\n\n\n\n7.1.3 MATLAB Code\n%% 1st Order Delta-Sigma Modulator by Peter\nclc;\nclear all;\n\n%% Parameters\nL = 1;                % Order of modulator\nform = 'CIFB';        % Cascade of integrator feedback\nfs = 220e3;           % Sampling frequency (higher to improve resolution)\nTs = 1/fs;            % Sampling time\nOSR = 256;            % Oversampling Ratio\nN = 16 * OSR;         % Simulation length (output samples), FFT points\nfB = fs / (2 * OSR);  % Bandwidth\ncycles = 5;           % Number of sinusoids in the input\nfx = cycles * fs / N; % Input test tone frequency\nA = 0.7;              % Signal amplitude (scaled for input range)\nt = Ts * (0:N-1);     % Time vector\nu = A * sin(2 * pi * fx * t); % Input sinewave signal\n\n%% Design NTF\nH = synthesizeNTF(L, OSR); % Noise Transfer Function (NTF)\n\n%% Bode Plot\nf = linspace(0, 0.5, N/2 + 1); % Normalized frequency vector\nz = exp(2i * pi * f);          % Frequency domain representation\nfigure;\nplot(f, dbv(evalTF(H, z)), 'LineWidth', 2);\ngrid on;\ntitle('Bode Plot of NTF');\nxlabel('Normalized Frequency (f/fs)');\nylabel('Magnitude (dB)');\n\n%% Realize DSM and Scale Coefficients\n[a, g, b, c] = realizeNTF(H, form);\nb(2:end) = 0; % Modify feedback path\nABCD = stuffABCD(a, g, b, c, form);\n[ABCDs, umax] = scaleABCD(ABCD); % Scale the ABCD matrix\n\n%% Simulate DSM\n[v, xn, xmax, y] = simulateDSM(u, ABCDs);\n\n%% Time-Domain Plot of DSM\nfigure;\nset(gca, 'fontsize', 14); % Set font size for readability\n\n% Plot input signal (u)\nplot(t, u, 'LineWidth', 2);\nhold on;\n\n% Stair-step the quantized output (v)\nstairs(t, v, 'LineWidth', 2);\nhold off;\n\n% Apply scaling as per the reference\naxis([min(t), max(t)/8, 1.1*min(v), 1.1*max(v)]);\ngrid on;\n\n% Add labels and title\nxlabel('Time t/T');\nylabel('Amplitude');\nlegend('u', 'v', 'Location', 'best');\ntitle('1st Order \\Sigma\\Delta: Time-Domain Response');\n%% Spectral Analysis (FFT)\nsq = abs(fft(v));\n\n% Normalize and process FFT\nf_fft = (0:N/2-1) / N; % Frequency vector\nsq_hlf = sq(1:N/2) * 2 / N;\nsqdBFS = 20 * log10(sq_hlf);\nsqdBFS(sqdBFS == -Inf) = -150; % Correct log(0) issues\n\n% Signal-to-Noise Ratio (SNR) Calculation\nsignal_bin = cycles + 1;\nnoise = [sq_hlf(1:signal_bin-1), sq_hlf(signal_bin+1:end)];\nsnr = 10 * log10(sq_hlf(signal_bin)^2 / sum(noise.^2));\n\n% Plot Spectral Analysis\nfigure;\nplot(f_fft, sqdBFS, 'LineWidth', 2);\naxis([0 0.25 -120 5]);\nyticks(-120:10:5); % Set Y-axis ticks from -150 to 0 in steps of 10\ngrid on;\ntitle(['Spectral Analysis (SNR = ', num2str(snr, '%.2f'), ' dB)']);\nxlabel('Normalized Frequency (f/fs)');\nylabel('Magnitude (dBFS)');\n\n%% Enhanced Pole-Zero Plot for Stability Visualization\nfigure;\nhold on;\n\n% Plot the unit circle\ntheta = linspace(0, 2*pi, 500);\nplot(cos(theta), sin(theta), 'k--', 'LineWidth', 1.5); % Dashed unit circle\n\n% Plot zeros and poles\nscatter(real(H.z{1}), imag(H.z{1}), 100, 'bo', 'filled', 'DisplayName', 'Zeros'); % Zeros\nscatter(real(H.p{1}), imag(H.p{1}), 100, 'rx', 'LineWidth', 2, 'DisplayName', 'Poles'); % Poles\n\n% Add grid, axis equal, and labels\ngrid on;\naxis equal;\nxlabel('Real Part');\nylabel('Imaginary Part');\ntitle('Enhanced Pole-Zero Plot with Stability Criterion');\nlegend('Unit Circle', 'Zeros', 'Poles', 'Location', 'best');\n\n% Annotate stability check\nif all(abs(H.p{1}) &lt; 1)\n    stability_msg = 'System is Stable (All poles inside the unit circle)';\n    color = 'g';\nelse\n    stability_msg = 'System is Unstable (Some poles outside the unit circle)';\n    color = 'r';\nend\ntext(-1.5, 1.2, stability_msg, 'FontSize', 12, 'FontWeight', 'bold', 'Color', color);\n\nhold off;\n\n%% Windowed FFT (Hann Window)\nspecHW = fft(v .* ds_hann(N)) / (N / 4);\nfigure;\nplot(f_fft, dbv(specHW(1:N/2)), 'LineWidth', 2);\naxis([0 0.23 -120 5]);\nyticks(-120:10:5); % Set Y-axis ticks from -150 to 0 in steps of 10\ngrid on;\ntitle('Windowed Spectral Analysis with Hann Window');\nxlabel('Normalized Frequency (f/fs)');\nylabel('Magnitude (dBFS)');\n\n\n7.1.4 Graphical Outputs and Analysis\n\n7.1.4.1 1. Time-Domain Response\n\n\n\nTime-Domain Response\n\n\n\nDescription: This plot shows the input signal ((u)) and the quantized output signal ((v)) over time for the 1st-order DSM.\nObservations:\n\nThe input signal ((u)) is a continuous sinewave.\nThe output ((v)) is a stair-stepped version of (u), reflecting quantization.\nSmall deviations between (u) and (v) represent quantization error.\n\nSignificance: This response illustrates the quantization process. Despite the error, the output tracks the input accurately, demonstrating the modulator’s performance.\n\n\n\n7.1.4.2 2. Pole-Zero Plot with Stability Criterion\n\n\n\nPole-Zero Plot\n\n\n\nDescription: This plot displays the locations of the poles and zeros of the NTF in the complex plane. The unit circle is included to assess stability.\nObservations:\n\nOne zero lies near the unit circle on the right-hand side.\nA single pole is located inside the unit circle on the left-hand side.\nStability message: System is Stable (All poles inside the unit circle).\n\nSignificance: The modulator is stable for the given parameters, as all poles are within the unit circle. Stability is essential for correct operation.\n\n\n\n7.1.4.3 3. Spectral Analysis\n\n\n\nSpectral Analysis\n\n\n\nDescription: This plot shows the frequency-domain representation of the modulator’s output, with the signal and quantization noise plotted in decibels relative to full scale (dBFS).\nObservations:\n\nA distinct peak at the test signal frequency represents the input sinewave.\nQuantization noise dominates the higher frequencies, as expected.\n\nSignificance: The calculated Signal-to-Noise Ratio (SNR) of ( -4.87 , ) demonstrates the modulator’s performance. Noise shaping aligns with the expected behavior of pushing noise outside the signal bandwidth.\n\n\n\n7.1.4.4 4. Bode Plot of Noise Transfer Function (NTF)\n\n\n\nBode Plot\n\n\n\nDescription: This plot represents the magnitude response of the Noise Transfer Function (NTF) for the 1st-order DSM. It highlights how the modulator attenuates quantization noise at different frequencies.\nObservations:\n\nAt lower frequencies (normalized frequency (f/fs)), the magnitude is close to 0 dB, indicating minimal noise.\nAs frequency increases, the magnitude rises significantly, reflecting that quantization noise is pushed to higher frequencies outside the signal bandwidth.\n\nSignificance: The NTF ensures that most quantization noise is concentrated outside the desired signal bandwidth, making it easier to filter.\n\n\n\n7.1.4.5 5. Windowed Spectral Analysis with Hann Window\n\n\n\nWindowed Spectral Analysis with Hann Window\n\n\n\nDescription: This plot represents the frequency-domain analysis of the modulator’s output using a Hann window to minimize spectral leakage.\nObservations:\n\nA sharp peak is visible at the test signal frequency.\nQuantization noise is uniformly distributed across the spectrum due to the windowing effect.\n\n\n\n\n\n7.1.5 Significance:\nThe Hann window ensures that spectral analysis accurately reflects signal and noise characteristics, without boundary artifacts caused by FFT limitations.\n\n\n7.1.6 Analysis and Observations\n\nThe 1st Order DSM achieves noise shaping, pushing quantization noise to high frequencies.\nStability is verified using the Pole-Zero Plot.\nThe Bode Plot confirms the frequency response aligns with expectations for a 1st Order NTF.\nThe Time-Domain Response shows accurate quantization of the sine wave.\nThe Spectral Analysis validates high SNR in the signal bandwidth.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#nd-order-delta-sigma-modulator",
    "href": "lab/elie3/index.html#nd-order-delta-sigma-modulator",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.2 2nd Order Delta-Sigma Modulator",
    "text": "7.2 2nd Order Delta-Sigma Modulator\n\n7.2.1 System Model Description\nA Delta-Sigma Modulator (DSM) is a critical component in analog-to-digital conversion. It operates by oversampling an input signal and shaping the quantization noise to higher frequencies outside the signal bandwidth. This approach allows for increased resolution within the desired bandwidth after digital filtering and downsampling.\n\n7.2.1.1 Key Components:\n\nInput Signal: A sine wave used as the test input.\nNoise Transfer Function (NTF): Shapes the quantization noise to higher frequencies.\nQuantizer: Produces discrete output values.\nFeedback Loop: Ensures stability and improves accuracy.\n\nThe 2nd Order DSM consists of two integrators in the feedback loop. This design improves noise shaping, resulting in better Signal-to-Noise Ratio (SNR) by pushing even more quantization noise to higher frequencies compared to the 1st order DSM.\n\n\n\n7.2.2 Design Procedure\n\n7.2.2.1 Parameters\nL = 2;                % Order of modulator (2nd order)\nform = 'CIFB';        % Cascade of integrator feedback\nfs = 220e3;           % Sampling frequency\nTs = 1/fs;            % Sampling time\nOSR = 256;            % Oversampling Ratio\nN = 16 * OSR;         % Simulation length (output samples), FFT points\nfB = fs / (2 * OSR);  % Bandwidth\ncycles = 5;           % Number of sinusoids in the input\nfx = cycles * fs / N; % Input test tone frequency\nA = 0.7;              % Signal amplitude (scaled for input range)\nt = Ts * (0:N-1);     % Time vector\nu = A * sin(2 * pi * fx * t); % Input sinewave signal\n\n\n7.2.2.2 Design Steps\n\nDefine Parameters: Set modulator order, sampling frequency, oversampling ratio, and input signal.\nSynthesize NTF: Use the synthesizeNTF function to generate the noise transfer function.\nRealize DSM: Realize the DSM using realizeNTF and scale coefficients with scaleABCD.\nSimulate DSM: Simulate the modulator and obtain the output using simulateDSM.\nAnalyze Outputs: Generate time-domain response, Bode plot, pole-zero plot, and spectral analysis.\n\n\n\n\n7.2.3 MATLAB Code\n%% 2nd Order Delta-Sigma Modulator by Peter\nclc;\nclear all;\n\n%% Parameters\nL = 2;                % Order of modulator (2nd order)\nform = 'CIFB';        % Cascade of integrator feedback\nfs = 220e3;           % Sampling frequency\nTs = 1/fs;            % Sampling time\nOSR = 256;            % Oversampling Ratio\nN = 16 * OSR;         % Simulation length (output samples), FFT points\nfB = fs / (2 * OSR);  % Bandwidth\ncycles = 5;           % Number of sinusoids in the input\nfx = cycles * fs / N; % Input test tone frequency\nA = 0.7;              % Signal amplitude (scaled for input range)\nt = Ts * (0:N-1);     % Time vector\nu = A * sin(2 * pi * fx * t); % Input sinewave signal\n\n%% Design NTF\nH = synthesizeNTF(L, OSR); % Noise Transfer Function (NTF)\n\n%% Bode Plot\nf = linspace(0, 0.5, N/2 + 1); % Normalized frequency vector\nz = exp(2i * pi * f);          % Frequency domain representation\nfigure;\nplot(f, dbv(evalTF(H, z)), 'LineWidth', 2);\ngrid on;\ntitle('Bode Plot of NTF (2nd Order)');\nxlabel('Normalized Frequency (f/fs)');\nylabel('Magnitude (dB)');\n\n%% Realize DSM and Scale Coefficients\n[a, g, b, c] = realizeNTF(H, form);\nb(2:end) = 0; % Modify feedback path\nABCD = stuffABCD(a, g, b, c, form);\n[ABCDs, umax] = scaleABCD(ABCD); % Scale the ABCD matrix\n\n%% Simulate DSM\n[v, xn, xmax, y] = simulateDSM(u, ABCDs);\n\n%% Time-Domain Plot of DSM\nfigure;\nset(gca, 'fontsize', 14); % Set font size for readability\n\n% Plot input signal (u)\nplot(t, u, 'LineWidth', 2);\nhold on;\n\n% Stair-step the quantized output (v)\nstairs(t, v, 'LineWidth', 2);\nhold off;\n\n% Apply scaling as per the reference\naxis([min(t), max(t)/8, 1.1*min(v), 1.1*max(v)]);\ngrid on;\n\n% Add labels and title\nxlabel('Time t/T');\nylabel('Amplitude');\nlegend('u', 'v', 'Location', 'best');\ntitle('2nd Order \\Sigma\\Delta: Time-Domain Response');\n\n%% Spectral Analysis (FFT)\nsq = abs(fft(v));\n\n% Normalize and process FFT\nf_fft = (0:N/2-1) / N; % Frequency vector\nsq_hlf = sq(1:N/2) * 2 / N;\nsqdBFS = 20 * log10(sq_hlf);\nsqdBFS(sqdBFS == -Inf) = -150; % Correct log(0) issues\n\n% Signal-to-Noise Ratio (SNR) Calculation\nsignal_bin = cycles + 1;\nnoise = [sq_hlf(1:signal_bin-1), sq_hlf(signal_bin+1:end)];\nsnr = 10 * log10(sq_hlf(signal_bin)^2 / sum(noise.^2));\n\n% Plot Spectral Analysis\nfigure;\nplot(f_fft, sqdBFS, 'LineWidth', 2);\naxis([0 0.16 -140 0]);\nyticks(-140:10:0); % Set Y-axis ticks from -150 to 0 in steps of 10\ngrid on;\ntitle(['Spectral Analysis (SNR = ', num2str(snr, '%.2f'), ' dB)']);\nxlabel('Normalized Frequency (f/fs)');\nylabel('Magnitude (dBFS)');\n\n%% Enhanced Pole-Zero Plot for Stability Visualization\nfigure;\nhold on;\n\n% Plot the unit circle\ntheta = linspace(0, 2*pi, 500);\nplot(cos(theta), sin(theta), 'k--', 'LineWidth', 1.5); % Dashed unit circle\n\n% Plot zeros and poles\nscatter(real(H.z{1}), imag(H.z{1}), 100, 'bo', 'filled', 'DisplayName', 'Zeros'); % Zeros\nscatter(real(H.p{1}), imag(H.p{1}), 100, 'rx', 'LineWidth', 2, 'DisplayName', 'Poles'); % Poles\n\n% Add grid, axis equal, and labels\ngrid on;\naxis equal;\nxlabel('Real Part');\nylabel('Imaginary Part');\ntitle('Enhanced Pole-Zero Plot with Stability Criterion');\nlegend('Unit Circle', 'Zeros', 'Poles', 'Location', 'best');\n\n% Annotate stability check\nif all(abs(H.p{1}) &lt; 1)\n    stability_msg = 'System is Stable (All poles inside the unit circle)';\n    color = 'g';\nelse\n    stability_msg = 'System is Unstable (Some poles outside the unit circle)';\n    color = 'r';\nend\ntext(-1.5, 1.2, stability_msg, 'FontSize', 12, 'FontWeight', 'bold', 'Color', color);\n\nhold off;\n\n%% Windowed FFT (Hann Window)\nspecHW = fft(v .* ds_hann(N)) / (N / 4);\nfigure;\nplot(f_fft, dbv(specHW(1:N/2)), 'LineWidth', 2);\naxis([0 0.16 -140 0]);\nyticks(-140:10:0); % Set Y-axis ticks from -150 to 0 in steps of 10\ngrid on;\ntitle('Windowed Spectral Analysis with Hann Window');\nxlabel('Normalized Frequency (f/fs)');\nylabel('Magnitude (dBFS)');\n\n\n7.2.4 Graphical Outputs and Analysis\n\n7.2.4.1 1. Time-Domain Response\n\n\n\nTime-Domain Response\n\n\n\nDescription: This plot shows the input signal ((u)) and the quantized output signal ((v)) over time for the 2nd-order DSM.\nObservations:\n\nThe input signal ((u)) is a continuous sinewave.\nThe output ((v)) exhibits high-frequency quantization noise but maintains the general shape of (u).\nIncreased quantization granularity reflects enhanced noise shaping characteristics.\n\nSignificance: The time-domain response demonstrates how the 2nd-order DSM accurately tracks the input signal while minimizing low-frequency noise.\n\n\n\n7.2.4.2 2. Pole-Zero Plot with Stability Criterion\n\n\n\nPole-Zero Plot\n\n\n\nDescription: This plot displays the locations of the poles and zeros of the NTF in the complex plane. The unit circle is included to assess stability.\nObservations:\n\nThe poles lie well within the unit circle, confirming system stability.\nZeros are strategically placed to ensure effective noise shaping in the frequency domain.\nStability message: System is Stable (All poles inside the unit circle).\n\nSignificance: The pole-zero configuration ensures the modulator remains stable under the given parameters while providing optimal noise shaping performance.\n\n\n\n7.2.4.3 3. Spectral Analysis\n\n\n\nSpectral Analysis\n\n\n\nDescription: This plot shows the frequency-domain representation of the modulator’s output, with the signal and quantization noise plotted in decibels relative to full scale (dBFS).\nObservations:\n\nA distinct peak at the test signal frequency represents the input sinewave.\nQuantization noise is concentrated at higher frequencies, aligning with the noise shaping goal.\nThe calculated Signal-to-Noise Ratio (SNR) is approximately ( -4.89 , ), reflecting effective noise shaping.\n\nSignificance: The 2nd-order DSM achieves better noise suppression in the signal bandwidth than the 1st-order DSM, improving SNR.\n\n\n\n7.2.4.4 4. Bode Plot of Noise Transfer Function (NTF)\n\n\n\nBode Plot\n\n\n\nDescription: This plot represents the magnitude response of the Noise Transfer Function (NTF) for the 2nd-order DSM. It highlights how the modulator attenuates quantization noise at different frequencies.\nObservations:\n\nAt lower frequencies (normalized frequency (f/fs)), the magnitude is close to 0 dB, indicating minimal noise within the signal bandwidth.\nAs frequency increases, the magnitude rises significantly, reflecting that quantization noise is aggressively pushed to higher frequencies outside the signal bandwidth.\n\nSignificance: The improved NTF of the 2nd-order DSM results in better noise shaping compared to the 1st-order DSM, enhancing overall signal quality.\n\n\n\n7.2.4.5 5. Windowed Spectral Analysis with Hann Window\n\n\n\nWindowed Spectral Analysis with Hann Window\n\n\n\nDescription: This plot represents the frequency-domain analysis of the modulator’s output using a Hann window to minimize spectral leakage.\nObservations:\n\nA sharp peak is visible at the test signal frequency.\nQuantization noise is uniformly distributed across the spectrum due to the windowing effect.\n\nSignificance: The Hann window ensures accurate spectral representation, removing boundary artifacts caused by the FFT.\n\n\n\n\n7.2.5 Analysis and Observations\n\nThe 2nd Order DSM achieves superior noise shaping, pushing quantization noise to even higher frequencies compared to the 1st-order DSM.\nStability is verified using the Pole-Zero Plot.\nThe Bode Plot confirms the frequency response aligns with expectations for a 2nd-order NTF.\nThe Time-Domain Response shows enhanced quantization and better tracking of the sine wave.\nThe Spectral Analysis validates improved SNR in the signal bandwidth.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#first-order-delta-sigma-modulator-dsm---simulink-model",
    "href": "lab/elie3/index.html#first-order-delta-sigma-modulator-dsm---simulink-model",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.3 First-Order Delta-Sigma Modulator (DSM) - Simulink Model",
    "text": "7.3 First-Order Delta-Sigma Modulator (DSM) - Simulink Model\n\n7.3.1 First-Order DSM Model in Simulink\n\n\n\nFirst-Order DSM Model in Simulink.png\n\n\n\n\n7.3.2 Explanation of the Simulink Model\nThe model consists of the following key components:\n\nInput Signal (u): A sinusoidal input with:\n\nFrequency: 268.55 Hz (converted to rad/sec: 1687.14 rad/sec)\nSample Time: 4.545e-6 sec (based on a 220 kHz sampling frequency)\n\nGain Blocks:\n\nb1 = 0.2665, a1 = 0.2665 (feedback gain)\nc1 = 0.3418 (forward path gain)\nThese values are optimized for stability and noise shaping.\n\nIntegrator (Transfer Function):\n\nThe transfer function used:\n\\[\nH(z) = \\frac{z^{-1}}{1 - z^{-1}}\n\\]\nThis represents a discrete-time integrator, which ensures noise shaping and improved quantization performance.\n\nRelay (Quantizer):\n\nThe relay acts as a non-linear quantizer, which introduces quantization noise and simulates bitstream behavior.\n\nOutput (v & Spectrum Analyzer):\n\nThe scope captures the modulator output.\nThe spectrum analyzer helps observe the quantization noise shaping effect.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#why-are-we-choosing-simulink-models-with-transfer-functions",
    "href": "lab/elie3/index.html#why-are-we-choosing-simulink-models-with-transfer-functions",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.4 Why are we choosing Simulink models with Transfer Functions?",
    "text": "7.4 Why are we choosing Simulink models with Transfer Functions?\nWhile MATLAB scripting allows direct implementation of DSM using difference equations, Simulink with transfer functions is preferred for:\n\nGraphical Representation: Easy to visualize the modulator structure.\n\nModularity & Flexibility: Components like integrators and quantizers can be independently analyzed.\n\nAccurate Simulation: Simulink provides precise time-domain behavior and noise shaping analysis.\n\nParameter Tuning: Gains, sampling rates, and quantizer settings can be easily adjusted.\n\nReal-Time Performance Analysis: Enables direct visualization of spectrum analysis, quantization noise, and modulated output.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#output-analysis",
    "href": "lab/elie3/index.html#output-analysis",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.5 Output Analysis",
    "text": "7.5 Output Analysis\n\n7.5.1 Spectrum Analysis & Time-Domain Plots\n\n7.5.1.1 Spectrum Analyzer Output\n\n\n\nSpectrum Analysis.png\n\n\nFigure 2: Spectrum Analysis of DSM Output. Observations: - Noise shaping is visible, where low-frequency noise is suppressed while Noise is pushed to high-frequency. - Signal power is 26.63 dBm, showing successful quantization.\n\n\n7.5.1.2 Time-Domain Plots (Scope Outputs)\n\n\n\nTime-Domain Plot.png\n\n\nObservations: - The input sine wave remains smooth. - The integrator output accumulates values, forming a staircase-like waveform. - The quantized relay output exhibits binary levels, confirming Delta-Sigma Modulation.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#design",
    "href": "lab/elie3/index.html#design",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.6 Design",
    "text": "7.6 Design\n\n7.6.1 1. Input Signal Selection\n\nThe input frequency is chosen as 268.55 Hz, converted to 1687.14 rad/sec for consistency in discrete-time analysis.\nThe sampling frequency is 220 kHz, ensuring a high oversampling ratio (OSR), which is critical for effective noise shaping.\nThe sample time is calculated as: \\[\nT_s = \\frac{1}{f_s} = \\frac{1}{220000} = 4.545 \\times 10^{-6} \\text{ sec}\n\\] ensuring that the system operates well within Nyquist criteria and provides enough resolution for quantization noise shaping.\n\n\n\n7.6.2 2. Gain Selection (b1, a1, c1)\n\nGains are chosen based on stability and performance trade-offs:\n\nb1 = 0.2665, a1 = 0.2665: Control the feedback loop, ensuring stable integration without excessive amplification.\nc1 = 0.3418: Affects the output scaling, ensuring the modulator operates within an optimal dynamic range.\n\nProper gain selection balances the modulator performance by:\n\nAvoiding integrator saturation.\nEnsuring a sufficient signal-to-noise ratio (SNR).\nEnhancing quantization noise suppression.\n\n\n\n\n7.6.3 3. Integrator Transfer Function\n\nThe discrete-time integrator is represented by the transfer function: \\[\nH(z) = \\frac{z^{-1}}{1 - z^{-1}}\n\\]\nThis function is essential because:\n\nIt acts as a leaky accumulator, ensuring quantization noise is pushed to higher frequencies.\nIt enhances the low-frequency signal, making the system behave like an ideal noise-shaping filter.\nThe feedback mechanism in the loop compensates for quantization errors, improving modulator resolution.\n\n\n\n\n7.6.4 4. Relay as Quantizer\n\nThe Relay block is used to perform non-linear quantization, simulating the behavior of an ADC.\nKey reasons for using a relay-based quantizer:\n\nIt simplifies the DSM architecture, making it suitable for low-power applications.\nConverts the continuous signal into a binary output (bitstream) required for oversampled ADCs.\nIntroduces controlled non-linearity, ensuring proper error feedback and noise shaping.\n\nThe relay effectively models real-world quantization effects, making the Simulink model closely resemble practical DSM implementations.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#second-order-delta-sigma-modulator-dsm---simulink-model",
    "href": "lab/elie3/index.html#second-order-delta-sigma-modulator-dsm---simulink-model",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.7 Second-Order Delta-Sigma Modulator (DSM) - Simulink Model",
    "text": "7.7 Second-Order Delta-Sigma Modulator (DSM) - Simulink Model\nA second-order DSM introduces two integrators in the loop, significantly improving noise shaping characteristics and reducing in-band quantization noise.\n\n7.7.1 Why Move to a Second-Order DSM?\nThe primary reasons for increasing the order of the DSM are:\nEnhanced Noise Shaping: A first-order DSM pushes noise to higher frequencies with a slope of -20 dB/decade, whereas a second-order DSM achieves -40 dB/decade, providing superior noise suppression in the signal band.\nHigher Signal-to-Noise Ratio (SNR): The second-order DSM increases the effective number of bits (ENOB), improving resolution and dynamic range.\nBetter Performance for Low-Frequency Signals: The second-order DSM minimizes low-frequency quantization noise, making it ideal for high-precision ADC applications.\nTrade-Offs: While a higher-order DSM improves performance, it can introduce stability concerns, which require careful gain selection.\n\n\n7.7.2 Design of Second-Order DSM Model in Simulink\n\n\n\nSecond-Order DSM Model in Simulink\n\n\n\n\n7.7.3 Explanation of the Simulink Model\nThe model consists of the following key components:\n\nInput Signal (u): A sinusoidal input with:\n\nFrequency: 268.55 Hz (converted to rad/sec: 1687.14 rad/sec)\nSample Time: 4.545e-6 sec (based on a 220 kHz sampling frequency)\n\nGain Blocks:\n\nb1 = 0.2665, a1 = 0.2665 (feedback gain)\nc1 = 0.3418 (forward path gain)\na2 = 0.2385, c2 = 5.18 (additional gains for second-order integration)\nThese values are optimized to ensure stability while achieving superior noise shaping.\n\nTwo Integrators (Transfer Functions):\n\nEach integrator uses the discrete transfer function:\n\\[\nH(z) = \\frac{z^{-1}}{1 - z^{-1}}\n\\]\nThe two integrators accumulate the quantization noise, shaping it more aggressively than in a first-order DSM.\n\nRelay (Quantizer):\n\nThe relay acts as a non-linear quantizer, introducing quantization noise while simulating a bitstream output.\n\nOutput (v & Spectrum Analyzer):\n\nThe scope captures the modulator output.\nThe spectrum analyzer visualizes the quantization noise distribution.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#why-we-are-using-these-gain-values",
    "href": "lab/elie3/index.html#why-we-are-using-these-gain-values",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.8 Why We Are Using These Gain Values?",
    "text": "7.8 Why We Are Using These Gain Values?\nIn a second-order DSM, proper gain selection ensures stability and optimal noise shaping:\n\nb1 = 0.2665, a1 = 0.2665: Maintains stability in the feedback loop, preventing integrator saturation.\nc1 = 0.3418: Balances the signal amplitude within the quantizer’s range.\na2 = 0.2385, c2 = 5.18:\n\na2 adjusts the second integrator’s feedback strength, preventing excessive noise amplification.\nc2 boosts the high-frequency noise shaping, further reducing in-band quantization noise.\n\n\nThe goal is to shape the quantization noise more aggressively, ensuring that most of it is pushed out of the signal band.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#output-analysis-1",
    "href": "lab/elie3/index.html#output-analysis-1",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.9 Output Analysis",
    "text": "7.9 Output Analysis\n\n7.9.1 Spectrum Analysis & Time-Domain Plots\n\n7.9.1.1 Spectrum Analyzer Output\n\n\n\nSpectrum Analysis.png\n\n\nObservations: - Compared to the first-order DSM, the quantization noise suppression is more effective. - Steeper noise shaping (-40 dB/decade) is visible, reducing noise in the signal band. - The signal power remains stable, ensuring correct modulation.\n\n\n7.9.1.2 Time-Domain Plots (Scope Outputs)\n\n\n\nTime-Domain Plot.png\n\n\nFigure 3: Time-Domain Plots of Input, Integrator Outputs, and Quantized Output.\nObservations: - The integrator outputs show a more gradual accumulation of noise. - The quantized output is more refined, indicating reduced quantization error. - The relay output transitions more smoothly, improving bitstream quality.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#design-justifications",
    "href": "lab/elie3/index.html#design-justifications",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.10 Design Justifications",
    "text": "7.10 Design Justifications\n\n7.10.1 1. Noise Shaping Improvement\nA first-order DSM shifts noise at -20 dB/decade, while a second-order DSM shifts it at -40 dB/decade. This means:\n\nMore noise is pushed outside the signal band.\nHigher effective resolution in the signal band.\nBetter SNR and ADC accuracy.\n\n\n\n7.10.2 2. Gain Selection (b1, a1, c1, a2, c2)**\n\na2 and c2 are crucial for controlling the second-order integration.\nIf a2 is too large, the system may become unstable.\nc2 enhances high-frequency noise shaping, reducing low-frequency quantization noise.\n\n\n\n7.10.3 3. Two Integrator Transfer Functions\n\nThe two discrete integrators provide an extra level of noise shaping.\nThey ensure that low-frequency components are preserved, while quantization noise is heavily attenuated.\n\n\n\n7.10.4 4. Relay as Quantizer\n\nThe Relay block remains the same, performing binary quantization.\nThe improved noise shaping ensures cleaner quantized output, beneficial for ADC applications.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#conclusion",
    "href": "lab/elie3/index.html#conclusion",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "7.11 Conclusion",
    "text": "7.11 Conclusion\nThe First-Order and Second-Order Delta-Sigma Modulator (DSM) Simulink models have provided valuable insights into oversampling, noise shaping, and quantization effects.\nThrough Simulink, we have visualized how increasing the order of a DSM significantly improves quantization noise suppression, making it easier to analyze and optimize system parameters.\n\n7.11.1 Key Learnings from First-Order vs. Second-Order DSM:\n\n\n\n\n\n\n\n\nFeature\nFirst-Order DSM\nSecond-Order DSM\n\n\n\n\nNoise Shaping\n-20 dB/decade (Moderate shaping)\n-40 dB/decade (Sharper noise shaping)\n\n\nQuantization Noise Reduction\nLimited suppression in the signal band\nMore effective suppression, better signal fidelity\n\n\nSignal-to-Noise Ratio (SNR)\nModerate\nHigher SNR, improved ADC resolution\n\n\nNumber of Integrators\nOne (single-stage integration)\nTwo (cascaded integration for stronger shaping)\n\n\nBitstream Quality\nGood\nBetter, with smoother transitions\n\n\nComplexity\nSimple, easy to design and analyze\nSlightly more complex but significantly better performance\n\n\nStability\nStable under normal conditions\nCan become unstable if gains are not chosen carefully\n\n\n\n\n\n7.11.2 Fundamental Understanding from Both Models\n\nNoise shaping is the key technique in DSM, and increasing the order improves noise suppression.\n\nThe second-order DSM provides steeper noise shaping (-40 dB/decade vs. -20 dB/decade in first-order).\n\nHigher-order DSMs improve SNR and ADC accuracy but require careful gain tuning for stability.\n\nSimulink allows modular and visual analysis, making it easier to optimize system parameters.\n\n\n\n7.11.3 Final Thoughts\nThe transition from a first-order to a second-order DSM highlights the trade-off between complexity and performance. While the first-order DSM introduces noise shaping, the second-order DSM refines it, achieving superior noise suppression and higher resolution.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#simulation-approach",
    "href": "lab/elie3/index.html#simulation-approach",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "8.1 Simulation Approach",
    "text": "8.1 Simulation Approach\n\n1st Order Modulator:\n\nDesigned with a single integrator, 1-bit quantizer, and feedback loop.\nSimulated with a 80 Hz sine wave input and oversampling clock.\n\n2nd Order Modulator:\n\nDesigned with dual integrators, 1-bit quantizer, and feedback loop.\nSimulated under the same conditions for comparison.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#simulation-and-output",
    "href": "lab/elie3/index.html#simulation-and-output",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "8.2 Simulation and Output",
    "text": "8.2 Simulation and Output\n\n1st Order Modulator:\n\nCircuit Diagram\n\n\n\n1st Order Delta Sigma Modulator\n\n\nThe DSM1 circuit comprises the following key components:\n\nInput Stage: A sample-and-hold circuit controlled by non-overlapping clock signals (phi1 and phi2) samples the input signal (Vin).\nIntegrator: An op-amp integrator integrates the sampled input signal, generating an output voltage (vx1).\nQuantizer: A comparator compares the integrator output (vx1) to a reference voltage (VCM) and produces a 1-bit digital output (vq).\nFeedback Loop: The quantized output (vq) is fed back to the input stage, influencing the subsequent integration process.\n\nOutput Waveform Analysis\n\n\n\nTransient Analysis of 1st Order Delta Sigma Modulator\n\n\nThe simulated output waveform reveals the following:\n\nInput Signal: The input signal (Vin) is a sine wave, representing the analog input to the DSM1.\nIntegrator Output: The integrator output (vx1) is a ramp-like waveform that increases and decreases in response to the input signal. The slope of the ramp is determined by the input signal’s amplitude and polarity.\nQuantized Output: The quantized output (vq) is a digital signal that switches between two levels (high and low). This digital output represents the quantized version of the input signal.\n\nDSM1 Operation\nThe DSM1 operates as follows:\n\nSampling: The input signal is sampled at regular intervals determined by the clock signals phi1 and phi2.\nIntegration: The sampled input signal is integrated by the op-amp, resulting in a ramp-like voltage at the integrator’s output.\nQuantization: The comparator compares the integrator’s output to the reference voltage. If the integrator’s output exceeds the reference, the comparator output goes high; otherwise, it stays low.\nFeedback: The quantized output is fed back to the input stage, influencing the subsequent integration process and contributing to noise shaping.\n\nNoise Shaping\nThe DSM1 employs noise shaping to improve its resolution. Noise shaping pushes the quantization noise to higher frequencies, allowing the signal of interest to be more accurately represented at lower frequencies.\nConclusion\nThe analysis demonstrates the fundamental operation of a 1st-order Delta-Sigma Modulator. The circuit effectively converts the analog input signal into a digital representation using integration, quantization, and feedback. The noise shaping technique inherent in the DSM1 architecture allows for improved resolution and signal fidelity.\n\n2nd Order Modulator:\n\nCircuit Diagram\n\n\n\n2nd Order Delta Sigma Modulator\n\n\nThe DSM2 circuit consists of the following key elements:\n\nInput Stage: A sample-and-hold circuit, controlled by non-overlapping clock signals (phi1 and phi2), samples the input signal (Vin).\nFirst Integrator: An op-amp integrator integrates the sampled input signal, generating an output voltage (vx1).\nSecond Integrator: A second op-amp integrator integrates the output of the first integrator (vx1), producing a second integrated signal (vx2).\nQuantizer: A comparator compares the output of the second integrator (vx2) to a reference voltage (VCM) and generates a 1-bit digital output (vq).\nFeedback Loop: The quantized output (vq) is fed back to the input of the first integrator through a switch controlled by phi1 and phi2. This feedback loop plays a crucial role in noise shaping and overall performance.\n\nOutput Waveform Analysis\n\n\n\nTransient Analysis of 2nd Order Delta Sigma Modulator\n\n\n\nInput Signal (Vin): This is the original analog input signal to the DSM2. It can be any arbitrary waveform, but for simplicity, we consider a sine wave.\nIntegrator Outputs:\n\nvx1 (Output of the First Integrator):\n\nExpected to exhibit a ramp-like behavior.\nThe slope of the ramp will depend on the amplitude and polarity of the input signal.\nNoise will be present due to the quantization process and the inherent noise of the op-amp.\n\nvx2 (Output of the Second Integrator):\n\nWill have a smoother waveform compared to vx1 due to the second integration stage.\nNoise levels should be further reduced compared to the first integrator’s output.\nThe waveform may exhibit more complex shapes depending on the input signal and circuit parameters.\n\n\nQuantized Output (vq):\n\nThis is the primary output of the DSM2.\nIt’s a digital signal switching between two levels (e.g., ‘0’ and ‘1’ or ‘high’ and ‘low’).\nThis bitstream represents the quantized version of the input signal.\nDue to the noise shaping, the bitstream will appear more random and contain less low-frequency noise compared to a 1st-order DSM.\n\n\nDSM2 Operation\nThe DSM2 operates as follows:\n\nSampling: The input signal (Vin) is sampled at regular intervals determined by the clock signals phi1 and phi2.\nFirst-Stage Integration: The sampled input signal is integrated by the first op-amp, resulting in a ramp-like voltage (vx1) at its output.\nSecond-Stage Integration: The output of the first integrator (vx1) is further integrated by the second op-amp, generating a second-order integrated signal (vx2).\nQuantization: The comparator compares the output of the second integrator (vx2) to the reference voltage (VCM). If vx2 exceeds VCM, the comparator output (vq) goes high; otherwise, it stays low.\nFeedback: The quantized output (vq) is fed back to the input stage, influencing the subsequent integration process and contributing to noise shaping.\n\nNoise Shaping\n\nThe 2nd-order DSM’s key advantage is its enhanced noise shaping.\nThe cascading of two integrators pushes quantization noise to higher frequencies.\nThis means that the noise in the output bitstream is concentrated at frequencies above the signal band of interest.\nThis noise shaping is crucial for achieving higher resolution and improved dynamic range.\n\nAdvantages of 2nd-Order DSM\n\nHigher Resolution: Due to improved noise shaping, the 2nd-order DSM generally achieves higher resolution compared to the 1st-order design.\nEnhanced Performance: The 2nd-order architecture provides better dynamic range and lower distortion.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#conclusion-1",
    "href": "lab/elie3/index.html#conclusion-1",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "8.3 Conclusion",
    "text": "8.3 Conclusion\nThe 2nd-order Delta-Sigma Modulator is a sophisticated architecture that offers significant advantages over its 1st-order counterpart. By employing two cascaded integrators, it achieves enhanced noise shaping, higher resolution, and improved overall performance. The analysis and simulation of the DSM2 circuit are crucial for understanding its behavior, optimizing its design, and achieving desired performance in practical applications.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#findings",
    "href": "lab/elie3/index.html#findings",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "8.4 Findings",
    "text": "8.4 Findings\n\n8.4.1 1st Order Delta-Sigma Modulator\n\nPerformance:\n\nModerate noise shaping observed.\nSuitable for low-resolution applications.\n\nChallenges:\n\nLimited noise suppression at higher frequencies.\n\nIndustry Applications:\n\nAudio ADCs (e.g., Texas Instruments PCM1808).\nLow-power sensor interfaces.\n\n\n\n\n8.4.2 2nd Order Delta-Sigma Modulator\n\nPerformance:\n\nImproved noise shaping compared to 1st order.\nHigher resolution achieved.\n\nChallenges:\n\nIncreased complexity and stability concerns.\n\nIndustry Applications:\n\nPrecision measurement equipment.\nHigh-resolution data acquisition systems.\n\n\n\n\n8.4.3 Comparison of 1st and 2nd Order Modulators\n\n\n\nFeature\n1st Order Modulator\n2nd Order Modulator\n\n\n\n\nNoise Shaping\nModerate\nImproved\n\n\nComplexity\nLow\nHigher\n\n\nStability\nMore stable\nLess stable\n\n\nApplications\nLow-resolution ADCs\nHigh-resolution ADCs",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#industry-applications-and-case-studies",
    "href": "lab/elie3/index.html#industry-applications-and-case-studies",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "8.5 Industry Applications and Case Studies",
    "text": "8.5 Industry Applications and Case Studies\n\n8.5.1 Audio Processing\n\nDelta-Sigma ADCs are extensively used in audio applications due to their high resolution and noise shaping capabilities.\nExample: Texas Instruments’ PCM1808 audio ADC.\n\n\n\n8.5.2 Precision Measurement\n\nHigh-order Delta-Sigma ADCs are employed in multimeters and data acquisition systems for accurate signal measurement.\nExample: Analog Devices’ AD7124-8 precision ADC.\n\n\n\n8.5.3 Sensor Interfaces\n\nIndustrial sensors, such as temperature and pressure sensors, often use Delta-Sigma ADCs for high-resolution signal conversion.\nExample: Maxim Integrated’s MAX11270 for industrial sensor applications.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#challenges-and-recommendations",
    "href": "lab/elie3/index.html#challenges-and-recommendations",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "8.6 Challenges and Recommendations",
    "text": "8.6 Challenges and Recommendations\n\n8.6.1 Challenges\n\nStability:\n\nHigher-order modulators are prone to instability.\nRequires careful design and tuning.\n\nComplexity:\n\nIncreased component count and design complexity for 2nd order modulators.\n\nClock Jitter:\n\nHigh clock frequencies can introduce jitter, affecting performance.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#introduction-1",
    "href": "lab/elie3/index.html#introduction-1",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "9.1 Introduction",
    "text": "9.1 Introduction\nHere we present the design, simulation, and analysis of a 5-Transistor Operational Transconductance Amplifier (5T OTA). The OTA was implemented in LTSpice using the 130nm bulk technology library provided by Hochschule Kempten. The primary objective was to replace the integrator opamp in the Delta-Sigma Modulator with the designed OTA and evaluate its performance.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#ota-design-and-implementation",
    "href": "lab/elie3/index.html#ota-design-and-implementation",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "9.2 OTA Design and Implementation",
    "text": "9.2 OTA Design and Implementation\nThe design of the 5T OTA was based on the methodologies outlined in the Analog Circuit Design resource from Johannes Kepler University Linz. This reference provided essential guidelines for transistor sizing and biasing strategies.\nThe OTA topology consists of: - Input Differential Pair: - M1 & M2 (NMOS) – Convert input voltage difference into a current signal. - Current Mirror Load: - M5 & M6 (PMOS) – Implement a current mirror for a high-impedance load. - Tail Current Source & Biasing: - M3 & M4 (NMOS) – Provide tail current biasing for differential pair stability. - I1 – 20µA constant current source for biasing reference.\n\n\n\n5T OTA\n\n\n\n9.2.1 LTSpice Subcircuit for 5T OTA\n.subckt ota_basic vdd Vinn Vinp vss Vout\nI1 vdd N003 20µ\nM1 N001 Vinp N002 0 NMOS l=5u w=2u\nM2 Vout Vinn N002 0 NMOS l=5u w=2u\nM3 N002 N003 vss vss NMOS l=5u w=0.5u\nM4 N003 N003 vss vss NMOS l=5u w=2.5u\nM5 N001 N001 vdd vdd PMOS l=5u w=1.5u\nM6 Vout N001 vdd vdd PMOS l=5u w=1.5u\n.ends ota_basic",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#performance-in-different-applications",
    "href": "lab/elie3/index.html#performance-in-different-applications",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "9.3 Performance in Different Applications",
    "text": "9.3 Performance in Different Applications\n\n9.3.1 Simple Comparator\n\nThe OTA worked effectively, providing clear high/low transitions.  2. DSM1 Circuit The OTA performed nearly identically to an ideal opamp, making it a viable replacement.  3. Comparison \n\n\n\n\n\n\n\n\n\nFeature\nIdeal Op-Amp Integrator\n5T OTA Integrator\n\n\n\n\nIntegrator Output\nLinear, clean ramp\nDistorted, noisy, limited swing\n\n\nComparator Output\nSharp, clean digital signal\nNoisy, jittery transitions\n\n\nNoise\nMinimal\nSignificant\n\n\nSignal Swing\nLarger, utilizes full range\nLimited\n\n\nLinearity\nExcellent\nPoor\n\n\n\n\n9.3.1.1 Analysis\nThe significant difference in performance arises from the non-ideal characteristics of the 5T OTA compared to the ideal op-amp:\n\nFinite Gain and Bandwidth: The 5T OTA has limited gain and bandwidth, leading to non-ideal integration behavior and reduced signal swing.\nNon-Linearities: The 5T OTA exhibits non-linearities, especially for larger signal swings, distorting the integrated waveform.\nNoise: The 5T OTA is more susceptible to noise due to factors like transistor mismatch and thermal noise, resulting in a noisy comparator output.\n\n\n\n9.3.1.2 “Nearly the Same” Digital Output\nWhile the general pattern of the digital output (V(vq) or V(Vx1)) appears similar in some respects (especially when considering long timescales or slowly varying inputs), a detailed examination reveals significant performance degradation with the 5T OTA:\n\nAverage Switching Frequency: The average switching frequency might be close, but the instantaneous switching times are much more irregular and noisy.\nNoise and Distortion: Even if the pulse density seems similar, the noise and jitter in the 5T OTA output will severely impact the accuracy of the digital representation. This noise will be apparent in the frequency spectrum.\nPerformance Metrics: Metrics like SNR and THD will be drastically worse with the 5T OTA.\n\n\n\n\n9.3.2 DSM2 Circuit\nThe OTA failed to meet performance requirements. DSM2, being a second-order modulator, has an additional level of feedback and increased complexity in its loop dynamics. A higher gain is often needed to maintain the accuracy of the feedback in DSM2.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#st-order-modulator-analysis",
    "href": "lab/elie3/index.html#st-order-modulator-analysis",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "10.1 1st Order Modulator Analysis",
    "text": "10.1 1st Order Modulator Analysis\nA 1st order modulator is a key building block in Sigma-Delta (ΣΔ) Analog-to-Digital Converters (ADCs). It is designed to shape quantization noise while providing high-resolution digital output. The circuit consists of four primary stages:\n\nInput Stage (Sampling Circuit)\nIntegrator\nQuantizer (Comparator + Flip-Flop)\nFeedback Loop\n\nThe primary function of this modulator is to shape noise, improve signal resolution, and enable oversampling techniques for ADCs.\n\n10.1.1 Circuit Diagram with Description\n\n\n\nCircuit Diagram\n\n\n\n10.1.1.1 Input Stage (Sampling Circuit)\n\nThe switched-capacitor network samples the input signal (Vin).\nClock Signals (p1 and p2) control the switching operation.\nSampling capacitor (C1) temporarily stores charge corresponding to the input voltage.\n\n\n\n10.1.1.2 Integrator (Charge Accumulation)\n\nThe integrator accumulates the charge transferred by the switched capacitor.\nThe output voltage (Vo) represents the integrated version of Vin.\nA gain element (E1) scales the output voltage appropriately.\n\n\n\n10.1.1.3 Quantizer (Comparator + Flip-Flop)\n\nThe comparator (E2) compares Vo with a reference voltage (Vcmp).\nThe flip-flop latches the comparator output to generate a stable digital signal (Q).\n\n\n\n10.1.1.4 Feedback Loop\n\nThe digital output (Q) is fed back to control the reference voltage.\nThis ensures error correction and stabilizes the modulator operation.\n\n\n\n\n10.1.2 Waveform Analysis of First-Order Delta-Sigma Modulator (DSM1)\n\n\n\nWaveform Analysis\n\n\n\n10.1.2.1 Input Signal (Vi)\n\nThe input voltage (Vi) appears as a constant DC signal.\nThis input is sampled and processed by the switched-capacitor circuit before integration.\n\n\n\n10.1.2.2 Integrator Output (Vo)\n\nThe integrator output (Vo) exhibits a staircase waveform, which is characteristic of charge accumulation over time.\nWhen a threshold is reached, the output resets, creating periodic downward transitions.\nThis behavior is essential for the noise shaping mechanism.\n\n\n\n10.1.2.3 Quantized Output (Q)\n\nThe quantized output (Q) is switches between high (1) and low (0) states, functioning as a 1-bit digital representation of Vo.\nThe comparator evaluates Vo against a threshold.When Vo crosses the threshold, Q flips between 1 and 0.\nThis binary sequence represents a digitized version of the input signal.\n\n\n\n\n10.1.3 Operation of Each Stage\n\n10.1.3.1 Sampling\n\nWhen p1 is HIGH, Vin is sampled onto C1.\nWhen p2 is HIGH, the stored charge is transferred, affecting Vx and Vo.\n\n\n\n10.1.3.2 Integration\n\nThe capacitor moves charge from Vx to Vo, accumulating voltage over time.\nThis operation ensures continuous integration of the input signal.\nThe integrator filters high-frequency noise, crucial for noise shaping.\n\n\n\n10.1.3.3 Quantization\n\nThe comparator (E2) evaluates Vo against Vcmp.\nIf Vo &gt; Vcmp, the output goes HIGH, else it goes LOW.\nThe flip-flop (x1) stabilizes this decision, preventing rapid oscillations.\n\n\n\n10.1.3.4 Feedback\n\nThe feedback loop uses the digital output (Q) to adjust the reference voltage dynamically.\nThis action corrects quantization errors, ensuring accurate digitization.\n\n\n\n\n10.1.4 Noise Shaping in the Modulator\n\nQuantization noise is pushed to higher frequencies, improving in-band SNR.\nDue to oversampling, low-frequency signals retain higher accuracy.\nThe integrator smooths the signal, ensuring high-resolution output.\nThe feedback mechanism minimizes error, contributing to effective noise shaping.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#nd-order-modulator-analysis",
    "href": "lab/elie3/index.html#nd-order-modulator-analysis",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "10.2 2nd Order Modulator Analysis",
    "text": "10.2 2nd Order Modulator Analysis\nA second-order sigma-delta (ΣΔ) modulator extends the principles of a first-order modulator by introducing a second integrator, which enhances noise shaping and improves resolution. It is a fundamental block in high-resolution Analog-to-Digital Converters (ADCs), particularly in applications requiring high dynamic range and low quantization noise.\nA second-order ΣΔ modulator consists of the following primary stages:\n\nInput Stage (Sampling Circuit)\nFirst Integrator\nSecond Integrator\nQuantizer (Comparator + Flip-Flop)\nFeedback Loop\n\nThis design improves noise shaping performance by increasing the suppression of quantization noise at low frequencies.\n\n10.2.1 Circuit Diagram with Description\n\n\n\nCircuit Diagram\n\n\n\n10.2.1.1 Input Stage (Sampling Circuit)\n\nThe switched-capacitor network samples the input signal (Vin).\nClock Phases (p1, p2) control the charge transfer process.\nSampling capacitor (C1) temporarily stores the charge representing Vin.\n\n\n\n10.2.1.2 First Integrator\n\nThe first integrator accumulates charge from the input stage.\nIt acts as a low-pass filter, shaping quantization noise.\nThe integrator consists of an operational amplifier (Op-Amp) and a feedback capacitor (C2).\nOutput (Vo1) represents the first level of integration.\n\n\n\n10.2.1.3 Second Integrator\n\nThe output of the first integrator is fed into the second integrator.\nThis stage further shapes the noise, improving quantization noise suppression.\nThe output (Vo2) is an enhanced version of Vo1, ensuring better noise shaping.\n\n\n\n10.2.1.4 Quantizer (Comparator + Flip-Flop)\n\nThe comparator (E2) determines whether Vo2 is above or below a reference (Vcmp).\nThe flip-flop (x1) stabilizes the digital decision, preventing unintended toggling.\nThe output (Q) is a 1-bit representation of Vo2.\n\n\n\n10.2.1.5 Feedback Loop\n\nThe digital output (Q) is fed back via a Digital-to-Analog Converter (DAC).\nThe feedback adjusts the reference voltage dynamically, reducing errors and improving stability.\nThe feedback is applied to both integrators, ensuring system stability and enhancing linearity.\n\n\n\n\n10.2.2 Waveform Analysis of Second-Order Sigma-Delta Modulator\n\n\n\nWaveform Analysis\n\n\n\n10.2.2.1 Input Signal (Vi)\n\nThis is the original analog signal that is sampled and processed.\nThe signal is sampled and processed in discrete steps.\n\n\n\n10.2.2.2 Integrator Outputs\n\n10.2.2.2.1 Vo1 (Output of 1st Integrator)\n- The first integrator accumulates the input signal, forming a **staircase pattern**.\n- The output shows gradual upward and downward movement, reflecting charge accumulation and discharge.\n- `Vo1` acts as a **low-pass filter**, preventing high-frequency noise from dominating.\n- This signal represents the first level of **quantization noise shaping**.\n\n\n10.2.2.2.2 Vo2 (Output of 2nd Integrator)\n- Further smooths `Vo1`, providing additional **noise shaping**.\n- The waveform appears more **oscillatory**, reflecting improved quantization noise suppression.\n- The orange waveform is **less staircase-like than** `Vo1`, meaning that the second integration has smoothed out variations.\n\n\n\n10.2.2.3 Quantized Output (Q)\n\nThe quantized signal (Q) alternates between 1 and 0, representing the digital version of the modulated input.\nThe comparator makes decisions based on Vo2, generating the digital output.\nRapid toggling indicates feedback-driven quantization.\nThe feedback loop ensures accurate digital representation.\n\n\n\n\n10.2.3 Operation of Each Stage\n\n10.2.3.1 Sampling\n\nWhen p1** is HIGH**, Vin is sampled onto C1.\nWhen p2** is HIGH**, the charge is transferred to the first integrator.\n\n\n\n10.2.3.2 First Integration\n\nThe first integrator accumulates charge, integrating the input over time.\nThe output (Vo1) represents the summed charge, shaping quantization noise.\n\n\n\n10.2.3.3 Second Integration\n\nThe second integrator further processes Vo1, adding another layer of noise shaping.\nThis stage ensures higher accuracy and better low-frequency noise suppression.\n\n\n\n10.2.3.4 Quantization\n\nThe comparator (E2) compares Vo2 with Vcmp.\nIf Vo2 &gt; Vcmp, the output is HIGH (1), else LOW (0).\nThe flip-flop (x1) stabilizes the output to prevent spurious transitions.\n\n\n\n10.2.3.5 Feedback Loop\n\nThe feedback DAC converts Q** back to an analog signal**.\nThis signal is subtracted from the input, reducing error and improving linearity.\nThe feedback is applied to both integrators, maintaining stability and dynamic range.\n\n\n\n\n10.2.4 Noise Shaping in the Modulator\n\nQuantization noise is pushed to even higher frequencies compared to a first-order modulator.\nThe integrators act as low-pass filters, ensuring high SNR and improved resolution.\n\n\n\n10.2.5 Advantages Over First-Order Modulator\n\nImproved Noise Shaping: Second-order modulation pushes more quantization noise to higher frequencies.\nHigher Signal-to-Noise Ratio (SNR): Provides better SNR compared to a first-order modulator.\nEnhanced Dynamic Range: Two integrators result in better suppression of low-frequency quantization noise.\nIncreased Effective Number of Bits (ENOB): More precise digital representation of analog signals.\nBetter Linearity: Reduces in-band noise and distortion effects, improving performance for high-precision applications.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie3/index.html#five-transistor-operational-transconductance-amplifier-ota",
    "href": "lab/elie3/index.html#five-transistor-operational-transconductance-amplifier-ota",
    "title": "5  Design of an Analog-to-Digital Converter",
    "section": "10.3 Five-Transistor Operational Transconductance Amplifier (OTA)",
    "text": "10.3 Five-Transistor Operational Transconductance Amplifier (OTA)\n\n10.3.1 Introduction\nHere we present the design, simulation, and analysis of a 5-Transistor Operational Transconductance Amplifier (5T OTA). For the circuit simulation, we are using Xcshem for schematic entry and ngspice for simulation.The 130nm CMOS technology SG13G2 from IHP Microelectronics is used. The primary objective was to replace the integrator opamp in the Delta-Sigma Modulator with the designed OTA and evaluate its performance.\n\n\n10.3.2 OTA Design and Implementation\nThe design of the 5T OTA was based on the methodologies outlined in the Analog Circuit Design resource from Johannes Kepler University. The Five-Transistor OTA is a fundamental building block in analog circuits, particularly in low-power and high-gain applications.\nThe 5T OTA comprises the following components:\nThe circuit consists of six MOSFETs (M1 to M6) and a bias current source (Ibias)\n\nDifferential Input Pair (M1, M2)\n\nConverts the differential input voltage into a current difference.\n\nCurrent Mirror Load (M3, M4)\n\nProvides high gain by mirroring the current and acting as an active load.\n\nTail Current Source (M5)\n\nSets a constant bias current for the differential pair.\n\nBiasing Circuit (M6)\n\nGenerates the required bias voltage for M5.\n\nBias Current Source (Ibias)\n\nProvides a stable current to the circuit. This current sets the transconductance of the OTA.\n\n\n\n\n\nimage-1\n\n\n\n\n10.3.3 Working of Each Component\n\n10.3.3.1 Differential Input Pair (M1, M2)\n\nM1 and M2 form an NMOS differential amplifier.\nThey receive differential inputs (Vin+ and Vin-).\nThe gate voltage difference (Vin+ - Vin-) modulates the drain currents of M1 and M2.\nIf Vin+ &gt; Vin-, more current flows through M1, decreasing current through M2.\n\n\n\n10.3.3.2 Current Mirror Load (M3, M4)\n\nM3 and M4 form a PMOS current mirror, acting as an active load.\nThe current in one branch is mirrored in the other branch by matching the transistor sizes and ensuring similar operating conditions.\nConverts the current difference of M1 and M2 into a voltage output.\nProvides high output impedance, improving voltage gain.\n\n\n\n10.3.3.3 Tail Current Source (M5)\n\nM5 acts as a current source, ensuring a constant current bias for the differential pair.\nOperates in saturation mode, ensuring that I(M1) + I(M2) = I_bias.\nImproves common-mode rejection ratio (CMRR).\n\n\n\n10.3.3.4 Biasing Circuit (M6)\n\nM6 is responsible for biasing M5, ensuring a stable operating point.\nIt provides a reference current, ensuring correct biasing of the OTA.\n\n\n\n\n10.3.4 Creating a Symbol in Xschem\nTo use the 5T OTA in a larger circuit, we create a symbol in Xschem.\n\n10.3.4.1 Steps:\n\nOpen Xschem and the OTA schematic.\nClick “Symbol” → “Make Symbol”.\nModify the .sym file (arrange input/output pins).\nSave and use the symbol in new circuits.\n\n\n\n\nimage-2\n\n\n\n\n\n10.3.5 5T OTA Testbench and Performance Evaluation\n\n\n10.3.6 Voltage Buffer with OTA\nIn order to design an OTA we need an application, and from this we derive the circuit specifications.We have used this OTA to function as a voltage buffer which lightly loads an input voltage source and can drive a large capacitive load.\nIn designing the OTA for this voltage buffer application, we have referred to the specifications outlined in the Analog Circuit Design resource. The key specifications are as follows:\n\n\n\nimage-3\n\n\n\n10.3.6.1 Circuit Diagram with Description\n\n\n\nimage-4\n\n\n\nOTA (Operational Transconductance Amplifier): The core component used to buffer the input voltage.\nInput Voltage Source (Vin): Provides a DC bias of 0.8V with an AC signal for analysis.\nPower Supply (Vdd = 1.5V, Vss = 0V): Supplies the OTA.\nCapacitive Load (C1 = 50 fF): Represents the output load.\nDC Analysis (dc Vin 0.7 0.9 0.01): Sweeps the input voltage from 0.7 to 0.9V in steps of 10mV.\n\n\n\n10.3.6.2 Expected Waveform Analysis\n\n\n\nimage-5\n\n\nSince the OTA is used as a voltage buffer, the ideal behavior would be: 𝑉out≈𝑉in\n\n\n\n10.3.7 OTA as a Comparator\nThe circuit presented here utilizes an OTA in a comparator configuration where an AC signal is applied at the non-inverting input, and a reference voltage is provided at the inverting input. The output waveform reflects the behavior of a comparator, switching states based on the input conditions.\n\n10.3.7.1 Circuit Diagram with Description\n\n\n\nimage-6\n\n\nThe given OTA circuit acts as a comparator. The configuration consists of: - Input Signal (Vin1): A sinusoidal signal of amplitude 0.8V and frequency 1kHz. - OTA Module (OTA_test): The core component acting as a comparator. - Reference Voltage (Vinn): A DC bias voltage of 0.4V. - Power Supply (Vdd): A 1.5V source powering the OTA. - Load Capacitor (50fF): A small capacitive load stabilizing the output.\n\n\n10.3.7.2 Working Principle and Waveform\n\n\n\nimage-7\n\n\nThe OTA operates as a comparator where: - When Vinp &gt; Vinn (0.4V), the output switches high (approximately Vdd = 1.5V). - When Vinp &lt; Vinn (0.4V), the output switches low (approximately 0V). - The OTA amplifies the difference between Vinp and Vinn, pushing the output to either the supply rail or ground.\n\n\n\n10.3.8 OTA as a Integrator\n\n10.3.8.1 Circuit Diagram with Description\n\n\n\nimage-8\n\n\nThe given circuit consists of: - Input Voltage(Vin) A pulse waveform acting as the input signal. - Resistor (10kΩ) which converts the input voltage into current. - Capacitor (53pF) which integrates the current at the output. - OTA Block Acts as the active element performing integration. - Power supply of 1.5V.\nThe OTA operates as an integrator due to the capacitor connected at the output node. The input voltage difference is converted to current, which then charges the capacitor over time, producing an integrated output waveform. Ideally, the output should be a perfect triangular waveform corresponding to the integral of the square wave input.\n\n\n10.3.8.2 Waveform Analysis\n\n\n\nimage-9\n\n\n\n\n10.3.8.3 Expected Integrator Output:\n\nIdeally, an integrator should produce a triangular wave when driven by a square wave input.\nThe integration process converts the high and low levels of the input pulse into a continuous increase or decrease in output voltage.\n\n\n\n10.3.8.4 Observed Output:\n\nThe output waveform starts high and gradually decreases over time, rather than forming a clear triangular wave.\nInstead of oscillating symmetrically, the output drifts downward, indicating a DC bias shift.\n\n\n\n10.3.8.5 Reasons for Output Behavior\n\nDC Bias Shift (Leakage Effects) The exponential downward drift indicates that the capacitor is losing charge over time.\nOTA Non-Idealities Different design approaches need to be explored for OTA.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Design of an Analog-to-Digital Converter</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html",
    "href": "lab/elie4/index.html",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "",
    "text": "7 Introduction\nSince more and more manufacturers are ending their production of integrated circuit solutions, the development of full custom solutions is becoming increasingly attractive. Thus, the different subgroups of the course “Concept Engineering Mixed-Technology Systems”, held by Professor Meiners at Hochschule Bremen, are tasked with the development of an Analog-Digital-Converter, roughly modeled in a way to replace the ADS1115 by Texas Instruments within a specified measurement system-chain.\nData conversion is a hot topic in the world of electronics. Most signal processing nowadays has shifted to the digital domain, due to the enourmous pace with which digital electronics have evolved in terms of speed and size, to the point where data rates in the Gigahertz range are becoming the norm, while the underlying semiconductor technologies continuously shrink to mere nanometers.\nHowever, this does not change our analog world, nor the need to interface data from that domain into that of our “state-of-the-art” technologies. This consideration applies to all sorts of trackable or sensable data, of accustic, optical or mechanical nature. To fit into the evolving nature of the digital domain, converters should be able to keep up, regarding the speed, precision and reliability with which they interface.\nFor this reason, we shall attempt to outline one of the most popular ways to convert data given the technology of our time. The approach is that of the Sigma-Delta converter. In the following we present our approach to designing such an ADC. This includes a theoretical analysis of the workings of \\(\\Sigma \\Delta\\) ADC’s, an exploration of it’s basic behavioural characteristics on system-level, deriving basic and idealized circuits to match the behaviour, and lastly a detailed design of the established circuit-level system using SPICE simulations within the xschem design environment, where concrete solutions on IC-level will be proposed.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#top-level-overview-of-considered-system",
    "href": "lab/elie4/index.html#top-level-overview-of-considered-system",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "7.1 Top-Level Overview of Considered System",
    "text": "7.1 Top-Level Overview of Considered System\nThe considered system of interest for this semester is a classical meassurement system, consisting of an accelerometer as our analog data source, an ADC to convert said analog data to the digital domain, which can then be handled by a microcontroller as our processing unit.\nThe specific board-level components that are considered for this signal-chain are the ADXL335 accelerometer, the ADS1115 ADC and an ESP8266 microcontroller.\n\n\n\n\n\n\nFigure 7.2: Concerned Top-Level Measurement System\n\n\n\nThe mentioned ICs are given as evaluation- & breakout boards as part of the lab inventory.\n\n\n\n\n\n\nFigure 7.3: ADXL335 Functional Block Diagram (Devices 2010)\n\n\n\nThe accelerometer is a specific example of a micro electro-mechanical system (MEMS) used for the purpuse of sensing. This in essence utilizes capacitive Accelerometer, where the plates of that capacitor are within the internal structure, which allows for varying distances of the plates (or potentially “fingers”) resulting in a varying capacitance given an acceleration. The analog change in capacitance is what we will ultimately need to consider when it comes to system interfacing. (Fraden 2015)\n\n\n\n\n\n\nFigure 7.4: ADS1115 Functional Block Diagram (Instruments 2009)\n\n\n\nThe ADS1115 is a Delta-Sigma ADC which includes various auxillary subsystems, like a multiplexer for the multiple input channels, an input programmable gain amplifier (PGA), an interface section to support the I2C communication protocol, etc.\n\n\n\n\n\n\nFigure 7.5: ESP8266 Breakoutboard Pinout\n\n\n\nThe ESP8266 is a typical microcontroller, which allows us to measure data either directly through analog pins, which would utilize internal ADCs, or we can use the digital pins to utilize the full-fletched ADS1115 for the job of data conversion.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#general-overview-of-given-adc",
    "href": "lab/elie4/index.html#general-overview-of-given-adc",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "7.2 General Overview of given ADC",
    "text": "7.2 General Overview of given ADC\nFigure 7.6 shows a more detailed block diagram of the ADS1115, which adopts informations from it’s datasheet (Instruments 2009). The focus of our work lies on the components in the orange box. The theory for the digital filter stage following the modulator is also briefly explored. The modulator itself comprises the switched capacitance to sample the input signal, an integrator (or accumulator) and the quantizing comparator to output a PWM signal. The other blocks depicted are considered auxillary block. These include the multiplexer which can be used to switch between different inputs. It is followed by a programmable gain amplifier. The amplification factor can be selected via an I2C interface which is also used to select the input channel, sample rate, as well as for the read out of the converted digital data among others. Since these auxillary blocks do not add to the functionality of the modulator itself it was decided to not explore them any further. In case of the reference oscillator and the voltage reference, these are modeled as ideal inputs during simulations.\n\n\n\n\n\n\nFigure 7.6: Block diagram internal structure ADS1115",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#top-level-overview",
    "href": "lab/elie4/index.html#top-level-overview",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "8.1 Top-Level Overview",
    "text": "8.1 Top-Level Overview\nDelta-Sigma modulators (\\(\\Delta\\Sigma\\)) are generally speaking 1-bit sampling systems that utilize the principle of “oversampling”. To start this chapter of, we would like to briefly elaborate on some of the key elements of these modulator systems.\nAn ADC with respect to \\(\\Delta\\Sigma\\) modulator systems can be represented, using the following block diagram for the case of analog-to-digital conversion.\n\n\n\n\n\nflowchart LR\n  A[Anti-Alias Filtering] --&gt; B[Sampling]\n  B --&gt; C[Quantization]\n  C --&gt; D[Digital Filtering]\n\n\n\n\n\n\nAnti-Aliasing measures have to be considered to ensure a “clean” input signal to the modulator system, without unwanted parasitic components.\nThe sampling then discretizes the input signal in time, before the quentization does the same with regard to its value (or amplitude).\nThe digital filtering is then responsible to transform the discrete signal into an output from which the original input can be extracted. This typically involves lowpass filtering, specifically utilizing a “moving-average” filter. In case of \\(\\Delta\\Sigma\\) modulators, which utilize oversampling, it also includes down-sampling/ decimating. The resulting data rate then most often resembles something close to the Nyquist rate of the signal band.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#system-overview-of-deltasigma-modulators",
    "href": "lab/elie4/index.html#system-overview-of-deltasigma-modulators",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "8.2 System overview of \\(\\Delta\\Sigma\\) Modulators",
    "text": "8.2 System overview of \\(\\Delta\\Sigma\\) Modulators\nThe modulator, which is a 1-bit sampling system, gets it’s name from two fundamental characteristics of it’s functionality.\n\n\n\n\n\n\nFigure 8.1: Starting Model of the \\(\\Delta\\Sigma\\) Modulator\n\n\n\nFigure 8.1 shows the fundamental block diagram of the modulator. The delta (\\(\\Delta\\)) is realised through the fact that we take the difference between our input signal and the fed back signal from the output as our reference. Therefore we are not exactly sampling the input, but instead the difference/ delta between our input and our previous reference point.\nThe next fundamental block in an integrator, which in the discrete domain is also considered an accumulator or summator (\\(\\sum\\)). Therefore, our established difference at it’s input is continuously summed up.\nIt is because of this that the system is characterizable as an “error accumulation structure”.\nThe result of that summation is then fed into a quantizer, which is realized through a 1-Bit ADC, which is in essence a comparator. this checks the incomming accumulator output at the defined high sampling rate and outputs either a ‘1’ or ‘0’, resulting in a 1-Bit datstream that resembles a pulse-width-modulated signal, correlated to the duration of the “rising” and “falling” slopes of the accumulator/ integrators outputs.\nThe resulting duty-cycle of the PWM-datastream will then be an indication for the inputsignal of the modulator. Assuming an initial condition of the quantizer output, an input level of zero would result in a \\(\\Delta\\) that shifts between the two extremes of the quantizer, equally around 0. The integrator would therefore have equal slope speeds for both the rising and falling periods, leading to equal pulse lengths at the output.\nIn case of a non-zero input, e.g. positive, the high-pulses of the PWM will be longer, due to the integrator being fed with a “lower magnitude” of \\(\\Delta\\) during this time, therefore showing a slower change at the output, compared to the complementary case.\nThe resultig PWM can then lead to valid representations of our input samples by utilizing digital filtering. As mentioned previously, we average a bunch of samples from the PWM datastream, using triangularly weighted coefficients within the filter structure, to get proper individal samples. Those in turn are then down-sampled to the requiered Nyquist rate.\n\n\n\n\n\n\nFigure 8.2: Filterstages after the Modulator\n\n\n\nSo summarized, the digital filtering will reduce high-frequency noise while passing the input signal to the output of the converter at a reduced data rate.\nThe reason why we oversampled in the first place, only to end-up with a lower datarate anyways, will be discussed in the next chapter.\n\n8.2.1 Oversampling and Noise Shaping\nOversampling converters offer an alternative to the classical Nyquist-Converters. The latter utilize sampling rates that are either equal or slightly higher than the Nyquist-frequency of the system, meaning at least twice the required signal bandwidth \\(f_B\\), so that the input can be reconstructed reliably afterwards, according to the Nyquist-Theorem (in turn avoiding aliasing) (Schreier 2017). \\[\\begin{align}\n  f_s \\geq 2\\cdot f_B\n\\end{align}\\]\nNyquist-converters generally suffer from the following aspects, limiting them in their potential to offer outputs with high resolution at decent speeds. They require a high degree of complexity and matching accuracy regarding their analog components for proper precision, which even than is still constrained. Those that can achieve high resolution, meaning a high number of effective bits (ENOB), need circuitries that ultimately result in major slow-downs. They also require more complex anti-aliasing filters due to higher demand for sharp transition bands. Lastly, it has to deal with quantization noise that is uniformly spread across the given sampling bandwidth (assuming it to be white noise).\nOversampling converters are able to out-perform such classical converters by utilize sampling rates that are well beyond the minimum required Nyquist-rate, while also utilizing multiple samples (so including preceeding ones) for their outputs.\nThe oversampling ratio (OSR) denotes the factor by which the Nyquist rate is exceeded.\n\\[\\begin{align}\n  OSR = \\frac{f_s}{2 \\cdot f_B}\n\\end{align}\\]\nOversampling systems require high precision & -speed digital circuitry which, as we stated initially, has evolved significantly while becoming increasingly more affordable throughout recent years. Therefore it is a reasonable trade-off. The analog sections in turn are generally less demanding and complex compared to Nyquist converters, e.g. the anti-aliasing filters which can be simpler and of lower order due to lesser likelyhood of “signal folding” (Schreier 2017).\nThe key advantage that Delta-Sigma Modulation brings to the table is “noise shaping”. This is enabled by the feedback structure that is given in our modulator system.\nFor that, let’s observe the following block diagram of a first order model.\n\n\n\n\n\n\nFigure 8.3: Linear Model of the 1st-Order Modulator\n\n\n\nIt showcases a simple I/O behavioural model of a system that is inherently representative of what a Delta-Sigma modulator is.\n\\('U(z)'\\) is our input signal, in case of an ADC application it should therefore denote our “analog input”, which we will assume to be handled in a discrete fashion. \\('V(z)'\\) denotes the output of our feedback system, which should contain sufficient information about our original input, leading to \\(\\hat{U}(z)\\) after the averaging- and decimation process mentioned earlier.\nThe system contains the so called “loopfilter”, the elemental block for the desired shaping process which is ultimately a delayed discrete integrator, indicating the impact of past samples on the current computation. We also include an additive error, representing the error in our output due to quantization.\nUsing the markings \\(*_1\\) and \\(*_2\\), we can derive the transfer behaviour of our system as follows:\n\\[\\begin{align}\n  V(z) &= E(z) + *_2\\,;\\quad *_2 = \\Big(\\frac{z^{-1}}{1-z^{-1}}\\Big) \\, *_1\\,; \\quad *_1 = U(z) - V(z)\\,z^{-1} \\\\\n  \\Rightarrow& *_2 = \\Big(\\frac{z^{-1}}{1-z^{-1}}\\Big)\\, (U(z)-V(z)\\,z^{-1})\\\\\n  \\Rightarrow& V(z) = E(z) + \\Big(\\frac{z^{-1}}{1-z^{-1}}\\Big)\\,(U(z)-V(z)\\,z^{-1})\\\\\n  \\Leftrightarrow&\\, V(z) = \\frac{U(z)\\,z^{-1}}{1-z^{-1}} - \\frac{V(z)\\,z^{-1}}{1-z^{-1}} + E(z) \\\\\n  \\Leftrightarrow&\\, V(z)\\,(1-z^{1}) = U(z)\\,z^{-1} - V(z)\\,z^{-1} + e(1-z^{-1}) \\\\\n  \\Leftrightarrow&\\, V(z) \\cancel{-V(z)\\,z^{-1}} \\cancel{+ V(z)\\,z^{-1}} = U(z)\\,z^{-1} + E(z)\\,(1-z^{-1})\n\\end{align}\\]\nThis shows that the output V(z) is comprised of the delay input and the filtered quantization error. We can denote these functions of \\(z\\) as our transfer functions for either the signal (\\(STF(z) = z^{-1}\\)) or our quantization “noise” (\\(NTF(z) = 1-z^{-1}\\))\n\\[\\begin{align}\n  V(z) = STF(z)\\,U(z) + NTF(z)\\,E(z)\n\\end{align}\\]\nThe noiseshaping is now privided due to the given NTF, which will apply a high-pass characteristic onto the internal quantization noise, with a slope of about 20 dB/decade. As a first general validation of that, if we check over a normalized frequency range of \\(\\omega = [0, \\pi]\\) we derive for \\(z = e^{j\\omega}\\) at either z = e^{j} = 1 or z = e^{j} = -1. Plugging that into the proposed NTF will lead to:\n\\[\\begin{align}\n  NTF(z) &= 1-z^{-1} \\hat{=} 1-\\frac{1}{e^{j\\omega}} = 0\\,; \\quad \\text{for}\\ \\omega \\rightarrow 0  \\\\\n  NTF(z) &= 1-z^{-1} \\hat{=} 1-\\frac{1}{e^{j\\omega}} = 2\\,; \\quad \\text{for}\\ \\omega \\rightarrow \\pi  \\\\\n\n\\end{align}\\]\nHence, the noise is attenuated for low frequencies, while amplified for high frequencies.\n\n\n8.2.2 SQNR and ENOB\nHaving effective noise shaping will increase the Signal-to-Quantazation-Noise-Ratio (SQNR) of the system within the band of interest. The SQNR is fundamentally tied to the “effective number of bits” (ENOB) that can be converted reliably, which is obviously of great interest for our applications.\nFor a sine wave input to an ideal Nyquist converter, the relation between SNR and the ENOB is given through the following equation, which will serve as our approximation.(Meiners 2024)\n\\[\\begin{align}\n  SNR_{dB} = 6.02 \\cdot ENOB + 1.76 \\\\\n  \\Leftrightarrow ENOB = \\frac{SNR_{dB}}{6.02} - 1.76\n\\end{align}\\]\nFor oversampling circuits, the resulting SQNR of a system is tied to the applied OSR.\nIn case of the first order system the peak in-band SQNR can be denoted with the following equation\n\\[\\begin{align}\n  SQNR_{1, peak, dB} = 10\\,\\log \\Big(\\frac{9\\,M^2\\, (OSR)^3}{2\\,\\pi^2}\\Big)\n\\end{align}\\] where \\(M\\) indicates the quantizer levels.\nThe “in-band” region shall be defined from \\(\\omega = 0\\) up to \\(\\omega = \\frac{\\pi}{OSR}\\). Applying different values for the OSR to this shows, that for each doubling of the oversampling ratio an SNR increase of about 9 dB results.\nUsing the relation between the SNR and ENOB we can further derive that such an increase in the OSR results in +1.5 effective bits.\nLastly, the topic of stability. The first order model is, in theory, inhereantly stable, due to it’s pole in the very center of the \\(z\\)-domains unit circle. The only consideration has to be given in the context of the quantizers gain. This however will only result in the condition, that the input has to be chosen bounded, in order to ensure a bounded output (BIBO stability). bounded means, that the input stays within the systems full-scale range (normalized: |u| \\(\\leq\\), ‘1’)\nThere are more non-ideal aspects to be considered when it comes to the first order \\(\\Delta\\Sigma\\) modulator, such as finite accumulator gain, the generation of idle tones or possible deadzones for weak inputs level. We will however not elaborate on those here and instead go over to the topic of increasing our models order.\n\n\n8.2.3 2nd-Order Modulator Extension\nA fundamental second order \\(\\Delta\\Sigma\\) modulator can be realized by simply exchanging the quantizer of the first order system with yet another instance of the first-order system. This is an alternative way of increasing the in-band noise suppression instead of utilizing more quantizer levels.\nThe Blockdiagram will end-up like in Figure 8.4.\n\n\n\n\n\n\nFigure 8.4: Linear Model of the 2nd-Order Modulator\n\n\n\nRegarding the noise shaping we will ultimately end up with \\[\\begin{align}\n  NTF_2(z) &= (1-z^{-1})^2 \\\\\n           & = 1 - 2\\cdot z^{-1} + z^{-2}\n\\end{align}\\] , so the square of the previous NTF.\nFrom that we can see that by making this substitution, we are reducing the in-band quantization noise further. As typical for 2nd-order filters, we can now expect a slope with an inclide of 40 dB/ decade for the highpass characteristic of the new \\(NTF\\).\nThe peak SQNR achievable with a 2nd order structure, dependend on the given \\(OSR\\), while M denotes the quantization levels, is given by (Schreier 2017):\n\\[\\begin{align}\n  SQNR_{2, peak, dB} = 10\\,\\log \\Big(\\frac{15\\,M^2\\, (OSR)^5}{2\\,\\pi^4}\\Big)\n\\end{align}\\]\nThe in-band noise is proportional to \\(OSR^{-5}\\) (prev.: \\(OSR^{-5}\\)). From the equation we can observe that for doubling the OSR we will achieve approximately +15 dB in SQNR, which in turn results in roughly +2.5 ENOB, which are both reasonable increases to the 1st-order case.\nThe second order model may require non-linear considerations for the quantizers gain, tied to the relationship between the quant. noise and the input amplitudes. More representative estimations would require adjustments to the \\(NTF\\). Something that might for example be done for the synthesis of NTFs in MATLAB when using functions from the “delsig” toolbox (Schreier 2017).\nFor a gain of \\(k\\), we can rewrite the \\(NTF_k(z)\\) as\n\\[\\begin{align}\n  NTF_k(z) = \\frac{NTF_1(z)}{k+(1-k)\\,NTF_1(z)}\n\\end{align}\\]\nThe topic of stability generally gains more importance for the MOD2 system, due to the chance of second-order oscillatory behaviour.\nThis will result in the need to consider further tweaks to ones model to, leading to the consideration of gain coefficients to sections of the model shown in Figure 8.4. The previous “BIBO” stable condition is also more stright, where the input usually has to be bound to less then the systems full-scale range (e.g. &lt; 0.9). (Schreier 2017)\nTable 8.1 shows some of the main impacts that the transformation of our system to the one of second order has.\n\n\n\nTable 8.1: Impacts for changing to \\(2^{nd}\\)-Order System\n\n\n\n\n\n\n\n\n\nAspect\nDue to \\(2^{nd}\\)-Order\n\n\n\n\nNoise Shaping\n40dB/dec instead of 20db/dec\n\n\n2xOSR impact: Noise Reduction\n9dB -&gt; 15 dB\n\n\n2xOSR impact: Extra ENOB\n1.5 bit -&gt; 2.5 bit\n\n\nStability\nincreased risk -&gt; tighter bounds\n\n\nComplexity\nmore circuitry (+ stability concerns)\n\n\n\n\n\n\n\n\n8.2.4 Specifications for the System\nTo later interface the system in the context of a system-chain, given e.g. by our meassurement system, a few things should be specified about our desired converter system up front, given the now séstablished theory. Among them are for example the following things, mainly related to our expected inputs.\n\n\n\nParameter\nValue\n\n\n\n\nDynamic Range\n16 Bit ~ 98 dB\n\n\nSystem Order L\n2\n\n\nSignal Bandwidth f_B\n215 Hz\n\n\nNyq. Frequency f_N\n430 Hz\n\n\nSampling Frequency f_s\n220 kHz\n\n\nOversampling Ratio (OSR)\n512\n\n\nSamples per Second (SPS_{max})\n860\n\n\n\n\n\n8.2.5 Behavioural Analysis/ Confirmation using MATLAB\nThe behavioural analysis in MATLAB starts by setting some specifications for the system, which are the following:\n\n\n\n\n\n\n\nParameter\nValue\n\n\n\n\nOrder of modulator\nL = 1 or 2 (order)\n\n\nStructure\nform = ‘CIFB’ % Cascade of Integrators Feedback;\n\n\nNo optimisation\nopt = 0;\n\n\nQuantizer level\nnLev = 2;\n\n\nSampling frequency\nfs = 220e3;\n\n\nSampling time\nTs = 1/fs;\n\n\nOSR\nM = 512;\n\n\nSim. length (output samples), FFT points\nN = 16*M;\n\n\nBandwidth\nfB = fs/2/M;\n\n\nNumber of sinusoids\ncycles = 9;\n\n\nTest tone\nfx = cycles * fs/N;\n\n\nSignal amplitude\nA = 0.8;\n\n\nTime vector\nt = Ts * [0:N-1];\n\n\nInput signal\nu = A * sin(2 * pi * fx/fs * [0:N-1]);\n\n\n\nTo validate some of the behavioural characteristics, given by the established theoretical concepts, models for the the 1st- and 2nd order modulators were used within MATLAB & MATLAB Simulink. We will mainly focus on the results from the 2nd-order model to keep this section concise\n\n\n\n\n\n\nFigure 8.5: Utilized 2nd-Order Model in Simulink (CIFB)\n\n\n\nThe second order model, as mentioned before, requires tighter bounds, enforced e.g. by gain coefficients which are computed within the initial cells of our MATLAB code, taking into acount the specifications above.\n\n\n\n\n\n\nFigure 8.6: I/O behaviour from MATLAB simulation model\n\n\n\nThe plot of the model output in the time domain shows the expected indirect representation of the input signal in the momentary duty-cycle of the PMW output, from which one could obtain the input signal by applying a moving average filter to the PMW datastream.\n\n\n\n\n\n\nFigure 8.7: Pole-Zero Plot from the NTF, synthesized by MATLAB\n\n\n\nThe pole-zero plot from the synthesized NTF object ‘H’ shows the adjusted locations, due to dynamic quantization gain.\nMATLAB provides us in this case with an NTF of\n\\[\\begin{align}\n  H = \\frac{(z-1)^2}{(z^2 - 0.7639\\,z + 0.2361)}\n\\end{align}\\]\n\n\n\n\n\n\nFigure 8.8: Spectral Analysis from Models for L=1 & L=2\n\n\n\nLastly, we do observe the expected PSD change betwee the 1st- and 2nd order models, where for the latter the noise power close to dc is lower than for the former, before indicating a slope that is inclining faster (seemingly twice as much, as to be expected) until eventually surpassing the level of the first order PSD. For both cases we observe a signal peak that is clearly separated from the shaped noise power.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#non-idealities",
    "href": "lab/elie4/index.html#non-idealities",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "9.1 Non-Idealities",
    "text": "9.1 Non-Idealities\nUnlike ideal Switches, real switches have some On-Resistance \\(R_{on}\\) which is some function of input. \\(\\frac{1}{R_{onC}}\\) is the bandwidth during the tracking phase. The signal is being stored in Capacitor in terms of charge, smaller the Capacitor more the tendency of getting disturbed or leakage.\nTaking a closure look, Resistance is much suspectable to thermal noise and is modelled as voltage \\(V_n\\) in series with resistance. Ouput Noise is present for all frequencies also known as White Noise and is given as\n\\[\nV_\\mathrm{n}^2 = \\frac{k T}{C}\n\\]\nwhere \\(k\\) is Boltzmann’s constant, \\(T\\) is temperature in Kelvin.\nCandidate for switch in circuit is MOSFET. Above were the non-idealities present if switch is ON. Even if switch is OFF its far from being ideal. Ideally, it should be open circuit but there is some \\(C_{OFF}\\) present.\nMore critical areas are when MOSFET is transitioning from ON to OFF and vice versa, they give rise to Charge Injection. Injected Charge is Non-Linear function of \\(V_{in}\\). Due to these reasons we are using Bottom Plate Sampling. Instead of sampling directly at top plate, the bottom plate is switched before capturing the sampled value ensuring non distorted output at feedback or top plate capacitor.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#switched-capacitor-integrator",
    "href": "lab/elie4/index.html#switched-capacitor-integrator",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "9.2 Switched Capacitor Integrator",
    "text": "9.2 Switched Capacitor Integrator\nA classic implementation of realizing an active integrator would be with the opamp circuit using a switch capacitor. However, in IC level implementation we use OTA instead of OpAMP as output resistance of OTA is infinte which benefits us heavily. \\(H(z)\\) enables us to realize any Discrete Time Transfer Function. There are two types of integrators:\n\nDelay Free Integrator: This form of integrator include the current sample of the input signal as well. Its transfer function is given as:\n\n\\[\\begin{align}\n  {H(z)} = \\frac{1}{1-z^{-1}}\n\\end{align}\\]\n\nDelayed Integrator: This form of integrator does not include the current sample of the input signal. Its transfer function is given as:\n\n\\[\\begin{align}\n  {H(z)} = \\frac{z^{-1}}{1-z^{-1}}\n\\end{align}\\]\nWe will be using the second form of integrator in our system.\nTherefore, for our desired discrete integrator, it is worth utilizing the following input structure in Figure Figure 9.2, which leads to a switched-capacitor integrator.\n\n\n\n\n\n\nFigure 9.2: Opamp based switched capacitor integrator\n\n\n\nThe depicted switches are clocked in a way to ensure non-overlapping high levels. This is of great importance, since turning both switches marked as \\(\\phi_1\\) off simultaneously would result in part of the channel charge of the series transistor transfering to the sample capacitor. Since this channel charge is signal dependent, it is nonlinearly related to the input signal. If however the series transistor is still on when turning off the parallel transistor, only a fixed amount of charge is added which introduces a dc offset. (Schreier 2017)\nTo derive the system behaviour of this circuitry, let’s consider the two phases of operation, given be the switching phases, depicted in Figures Figure 9.3 and Figure 9.4.\n\n\n\n\n\n\nFigure 9.3: Integrator state during phase 1\n\n\n\n\n\n\n\n\n\nFigure 9.4: Integrator state during phase 2\n\n\n\nThe first phase allows for the capacitor \\(C_1\\) to be charged from the input, leading to the charge accumulation \\(q_1[1]\\), during which the integrating capacitor \\(C_2\\) holds it’s previous charge (\\(q_2[n]\\)). Due to the relation \\(V = \\frac{Q}{C}\\), the output voltage will be equal to the ratio of that charge \\(q_2[n]\\) to the capacitance \\(C_2\\).\nThe second phase will than result in the charge of \\(C_1\\) to accumulate in \\(C_2\\), due to the opamps input behaviour related to it’s “virtual ground”. C2 will therefore have the sum of charges, leading to\n\\[\\begin{align}\\label{sc_charge_ph2}\n  q_2[n+1] = q_2 + q_1.\n\\end{align}\\]\nAfter applying the \\(z\\)-transform, the result is\n\\[\\begin{align}\n  Q_2(z) = Q_2(z)\\,z^{-1} + Q_1(z)\\,z^{-1}\n\\end{align}\\]\nwhich in turn can be rearranged to get\n\\[\\begin{align}\n  \\frac{Q_2(z)}{Q_1(z)} = \\frac{z^{-1}}{1-z^{-1}}\n\\end{align}\\]\nUtilizing the aforementions relation between voltage, charge and capacitance, we can derive the voltage I/O behaviour (transfer function) to be the following\n\\[\\begin{align}\n  \\frac{V_{out}}{V_{in}} = \\frac{z^{-1}}{1-z^{-1}} \\frac{C1}{C2} = H_v(z)\n\\end{align}\\]\nThe ratio of the capacitors would be a potential gain factor for the, which could also be choosen to achieve unity gain (\\(C_1 = C_2\\)).\nThe remaining term, describing a delayed integrator, is what will be utilized in the MATLAB assited system analysis. That ultimately leads to the following description of out feedback system, which overlaps with the established linear model from our system analysis in MATLAB, previously shown in Figure 8.3.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#ideal-system-model-in-ltspice",
    "href": "lab/elie4/index.html#ideal-system-model-in-ltspice",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "9.3 Ideal system model in LTSpice",
    "text": "9.3 Ideal system model in LTSpice\nFor first simulation results the behaviour described in the previous subchapter can be implemented as an indealized model in LTSpice. Files for this were provided by the supervising professor and will be explained briefly.\n  The simulation of the second order idealized \\(\\Delta \\Sigma\\)-Modulator (figure Figure 9.5) comprises two casecaded versions of a switched capacitance stage followed by an integrator. The output of the second integrator is fed into the comparator, whose output is fed back through an inverter to both switched capacitor stages. The second sampling stage is responsible for correctly adding the delayed sample to the output sample of the first integrator.\n\n\n\n\n\n\n\nFigure 9.5: LTSpice simulation of idealized model\n\n\n\nFor the input stage, ideal switches are used which are controlled by voltage sources modeling the 220kHz input clocks. These are configured in such a way, that the clock phases are not overlapping. As explained earlier, this is needed to prevent corruption of the sampled signal.\n  The operational amplifier is is planned to be an operational transconductrance amplifier (OTA) which is realized as a voltage controlled current source that outputs a current proportional to the difference of its two input signals. A parallel resistor creates a corresponding voltage drop. This representation is linear for all inputs and can be chosen, if the input signal can is guaranteed to be within the linear range of the real OTA. If the OTA is to operate in saturation, this model would not be valid anymore.\n\n\n\n\n\n\n\nFigure 9.6: LTSpice representation of the OTA\n\n\n\nThe comparator has to compare the current input sample to a fixed value. If, at the rising edge of the reference clock, the input voltage lies above this threshold a logic high, represented by \\(V_{DD}\\) is output, if the value lies below the threshold a logic low (\\(V_{SS}\\)) will be output. Additionally, this output value has to be held until the next rising edge of the controlling clock. This latching functionallity is realized using two clock controlled switches that open and close inversely. The comparison for the dermination of the output is done through a voltage source and a mathematical comparison.\n\n\n\n\n\n\n\nFigure 9.7: LTSpice representation of the comparator\n\n\n\nThe delay of the comparator output fed back into the switched capacitor stages is realized through an inverter. This is possible, since due to the high sample frequency of the comparator, the width of two successive pulses can be assumed to be very small. Thus, inverting the signal is equal to a delay by one sample. The inversion is again done by a mathematical comparison.\n\n\n\n\n\n\nFigure 9.8: LTSpice representation of the delaying inverter",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#clock-phase-generation",
    "href": "lab/elie4/index.html#clock-phase-generation",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "10.1 Clock-Phase generation",
    "text": "10.1 Clock-Phase generation\nThe aforementioned delay in the phases of the clocks acting on the switched capacitor can be achieved by the structure in Figure 10.1. This takes a reference clock signal which provides a signal at the frequency required by the system and outputs four different phases \\(\\phi_1\\), \\(\\phi_{1d}\\), \\(\\phi_2\\) and \\(\\phi_{2d}\\). The feedback between the upper and lower strand of the structure, in conjunction with the NAND gates, ensures the prevention of overlap between \\(\\phi_1\\) and \\(\\phi_2\\) and in turn for their respective delayed versions.\n\n\n\n\n\n\nFigure 10.1: Basic structure for delayed clock phase generation\n\n\n\nBy changing the capacitance of the marked inverters the actual delay between \\(\\phi_i\\) and \\(\\phi_{id}\\) can be controlled. (Schreier 2017) It is worth noting however, that the capacitive load \\(C_L\\) experienced at the outputs of the structure also has an influence on the phase delay.\n\n\n\n\n\n\nFigure 10.2: Delayed clock signals\n\n\n\nFigure 10.2 shows the normal delay between \\(\\phi_1\\) and \\(\\phi_{1d}\\) as well as the non-overlap with \\(\\phi_2\\). The structure used for clock generation was modeled after the circuit provided by (Murmann 2024). In this, they used the sg13g2 standard cells for the NAND gates and inverters which are not built from single transistors and hence their capacitance can not be changed. Simulations with different values for the load capacitances have proven to not impair the structures functionality. We thus continue with this non-transitorized version, since creating the gates from scratch would add unnecessary complexity.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#capacitor-sizing",
    "href": "lab/elie4/index.html#capacitor-sizing",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "11.1 Capacitor Sizing",
    "text": "11.1 Capacitor Sizing\nAs mentioned above, the coefficients translate into capacitor ratios. In the first stage capacitance ratio can be computed as follows:\n\\[\na_1 = \\frac{C_1 V_\\text{ref}}{C_2} = \\frac{C_1 V_\\text{dd}}{C_2}\n\\]\n\\[\nb_1 = \\frac{C_1 V_\\text{FS}}{M C_2} = \\frac{C_1 V_\\text{dd}}{C_2}\n\\]\nThe absolute value of \\(C_{1}\\) is computed by thermal noise constraint. Mean-square noise yielding an SNR of 101 dB is\n\\[\n\\overline{v_n^2} = \\frac{\\left(\\frac{V_\\text{dd}}{2}\\right)^2 / 2}{10^{\\text{SNR}/10}}\n\\]\nThe in-band input-referred mean-square noise voltage associated with first integrator:\n\\[\nv_n^2 = \\frac{kT}{\\text{OSR} \\cdot C_1}\n\\]\nFrom above equations we can get the value of \\(C_1\\) and \\(C_2\\). For capacitences for the second integrator can be computed from:\n\\[\nc_1 = \\frac{C_3}{C_5}\n\\]\n\\[\na_2 = \\frac{C_4 V_\\text{dd}}{C_5}\n\\]\nSince, due to oversampling ratio is high, the in-band thermal noise of the second integrator is heavily attenuated by gain of the first integrator. Therefore, we set \\(C_4\\) is taken 0.1pF.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#ota-sizing",
    "href": "lab/elie4/index.html#ota-sizing",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "11.2 OTA Sizing",
    "text": "11.2 OTA Sizing\nFor integrator, we first implemented 5 transistor OTA. Using components available in IHP Microelectronics SG13G2 technology. First of all, we need to run the technology sweep to get the response of the OTA at various \\(V_{gs}\\) and \\(V_{ds}\\) values. Then we can use the sweep data to get the optimal graphs in MATLAB.\n\n\n\n\n\n\nFigure 11.1: Testsweep for LV NMOS g_m/I_d Characterisation\n\n\n\nWe have a similar tesbench for LV_PMOS which to depict their behaviour. We would use the data provided by these sweep to realize the sizing of OTA discussed below Figure 11.2\n\n\n\n\n\n\nFigure 11.2: 5 Transistor OTA Design\n\n\n\n\n11.2.1 Choosing \\(I_{d}\\) and \\(g_{m}\\)\nThe value of \\(I_d\\) plays a very important role in the design of the OTA. At the start of each charge-transfer phase, the OTA input terminals are driven such that current in differential switches fully to one side. The magnitude output current of I (bias current) in each half of differential pair. It should be large enough to transfer the charge from input capacitor to integrating capacitor in allowed time.\n\\[I &gt; \\frac{C_1 V_\\text{dd}}{T / 4}\\]\nNext important parameter is \\(g_m\\).In small-signal model of an integrator in charge-transfer phase from which we can see time-constant is\n\\[\n\\tau = RC = \\frac{C_1 + C_3 + C_1C_3 / C_2}{g_m}\n\\]\nwhich gives\n\\[\ng_m = \\frac{C_1 + C_3 + C_1C_3 / C_2}{T/48}\n\\]\nNow, we have both the values of \\(I_d\\) and \\(g_m\\). We would divide the two values to get \\(g_m/I_d\\) ratio and check whether it is in moderate region or not. If it is not, we need to adjust the value of \\(I_d\\) and \\(g_m\\) which can be done by increasing the value of \\(I_d\\).\n\n\n11.2.2 Choosing W and L parameters\nIn a design we would have different NMOS and PMOS with different parameters depending upon their presence in design. We have used Whilson Current Mirror for creating reference current in our circuit. All NMOS and PMOS in this section would have double \\(W/L\\) compared to the NMOS and PMOS in the differential pair.\nWe would generate MATLAB scripts or also known as lookup table to generate the required plots for our technology node. In figure \\(g_m/I_d\\) vs \\(I_d/W\\) for NMOS. We can see that \\(g_m/I_d\\) is in moderate region and for various \\(L\\) values corresponding \\(I_d/W\\) values can be see. Choose the length value in such a way that after calculation your \\(W\\) is not less 130nm. Repeat the same procedure for PMOS. You have \\(W\\) and \\(L\\) values for both NMOS and PMOS but keep in mind choose length atleast three or four times of \\(L_{min}\\). We get similar graph attached below for PMOS as well.\n\n\n\n\n\n\nFigure 11.3: Graph for \\(I_d / W\\) for nMOS",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#xschem-realization",
    "href": "lab/elie4/index.html#xschem-realization",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "11.3 Xschem Realization",
    "text": "11.3 Xschem Realization\nTo simulate our design we are using Xschem and ngspice. Realization of Telescopic OTA as after Figure 11.2 was not compatible with Switched Capacitor.    \nIts giving us DC Gain of 9.6059e-01, Gain error of -3.9408e-02 and Slew rate (\\(t_{settle}\\)) of 7.0329e-07 at \\(I_0\\) equivalent to 0.8microA.Below is the Switch Capacitor circuit with phase 1 and 2.\n\n\n\n\n\n\nFigure 11.4: Implementation of Switch Capacitor",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie4/index.html#comparator-design",
    "href": "lab/elie4/index.html#comparator-design",
    "title": "6  Design of an Analog-Digital-Converter after the ADS1115",
    "section": "11.4 Comparator Design",
    "text": "11.4 Comparator Design\nAs the output stage of the modulator subsystem of the desired \\(\\Delta\\Sigma\\) modulator, the comparator stage serves to realize the desired quantization to discretize the amplitude of our analog signal. A comparator suffices to realize a 1-bit quantization, where the representative output from our data samples is either “high” or “low”, which will do fine to give us the PWM signal at the output.\n\n11.4.1 Model-/ Architecture elaboration\nThe considered implementation of our comparator utilizes an initial inverter based comparator stage, followed by a latching circuit to account for the reseting within the comparator and the resulting “invalid” outputs it would provide. Lastly we could consider utilizing a d-flip-flop for the “digitized” output signal(-s), also to be fed back to the loopfilter structures.\n\n\n11.4.2 Comparator Stage\nThe inverter-based comparator structure is realized through a symmetric architecture that is closely assossiated to the so called “StrongArm” architecture, depicted in Figure 11.5.\nWhile the classical StrongArm would utilize pmos transistors for M3 & M4 (with their sources being pulled to \\(V_{DD}\\) and their drains connected to the node above M1 and M2) instead, the behaviour would in both cases be the same, as tested in simulations.\nIt utilizes both n- and pmos transistors that are generally sized with small values for L, due to the main usage as switches.\n\n\n\n\n\n\nFigure 11.5: Comparator, realized through inverter based architecture\n\n\n\n(to be cited:\n\nLow Voltage, Low Power, Inverter-Based Switched-Capacitor Delta-Sigma Modulator\nMurmann lectures (e.g. 6) )\n\nThis circuits behaviour is fundamentally tied to the clock states, leading to either the so called “precharge” phase during low clock levels, or the “amplification” phase during an active clock phase.\nDuring low clock phases the pmos transistors, directly tied to the supply rail, open up and therefore pull both the output nodes to \\(V_{DD}\\), charging the internal capacitances of the structure.\nDuring high clock phases the nmos transistors (above the input nmos transistors) start to conduct and allow for current to flow to the shared source contact of the input differential pair, so to \\(V_{SS}\\)\nDepending on the conductivity of the MOSFETS that are fed by the input signals, one branch will “discharge” quicker. This in turn will lead to either M7 or M8 conducting again, once the applied gate voltage drops below the \\(V_{DD}-V_{th}\\) (since they are pmos). So, in case of \\(in+ &gt; in-\\), the gate of M8 would reach that level faster, therefore conducting earlier and in the process pulling outp back to \\(V_DD\\), while this in turn ultimately negates M7 from reaching that level, leading to outn decaying further to \\(V_{SS}\\).\n\n\n11.4.3 Latching Circuit\nAfter the StrongArm comparator, as mentioned previously, a latching circuit is implemented for improved validity of the final outputs. The way this was done in our case is through an “SR-Latch”, which stands for “set” and “reset”.\nIn general, such a latch utilizes two logic gates with 2 inputs and one output each, where one of the inputs will be one of the input signals, while the other will be the fed-back output signal from the respective other logic gate. The provided logic should result in only the Q output or it’s complement nQ to be high, depending.\nThe main task of this block is to only change it’s output, while either the positive or negative output of our comparator is “high”. For SR-latches there will be one case for equal inputs (either both “high” or both “low”) where one will not result in a change to the output while the other will ultimately result in an output, where the intended logic of the circuit is violated. With the chosen NOR gates (including inverted inputs) depicted in Figure 11.6, that violation would occur for a high level on both inputs, which is not given due to the StrongArm comparators operation paired with the inverters.\n\n\n\n\n\n\nFigure 11.6: SR-Latch for Comparator Application\n\n\n\nTherefore, this logic block should change with each positive clockphase where either S (outp) or R (outn) will be high, while keeping that state during the negative clock phases where both outp and outn are “high”.\n\n\n11.4.4 Implementation\nThe comparator is realised in the following way\n\n\n\n\n\n\nFigure 11.7: StrongArm Circuit\n\n\n\nThis circuit is proposed by Boris Murmann in his EE628 lecture series (e.g. lec 6, (Murmann 2024)), while he himself adopted the design from the paper given in (Chae and Han 2009). The MOSFET lengths (L) can be chosen minimal (\\(\\approx\\) 130 nm), since almost all of them simply serve as switches, with only those for the inputsignal are choosen with a slightly greater margin.\nWhile the mentioned sources also propose a latching circuit, we will directly utilize the logic gates available through the used PDK, which generally helps to make the comparator system more universally applicable. Specifically, the proposed design showed a lesser tolerence for very small differences between the input signals, once the latch was cascaded. This becomes worse for higher supply voltages (e.g. 3V3 instead of 1V5).\nThe testbench file is shown next in Figure 11.8.\n\n\n\n\n\n\nFigure 11.8: Comparator Testbench\n\n\n\n\n\n11.4.5 Validation\nThe following plots show the outputs of both the comparator and the cascaded SR-latch. For the first 8 ns, the positive input voltage of the comparator is 1 mV higher than the negative input. At around 8.1 ns, that polarityis reversed.\n\n\n\n\n\n\n\n\nStrongARM\n\n\n\n\n\n\n\n\n\nRS-Latch\n\n\n\n\n\n\nFigure 11.9: Waveforms of Comparator Subsystem\n\n\n\nA clock period of 10 ns is chosen, which is much shorter then for our actual application. Therefore proving, that even for a fraction of the desired clock period, the circuit is sufficiently fast when it comes to settling. The latch outputs show the desired behavior, where only during the active clock periods the output will change in case the polarity of the input difference has changed, while remaining constant during the reseting of the comparator.\nThe output “out2dff” can now be forwarded to a d-flip-flop, which most comparator designs for ADCs would utilize to gain the “final” clk-controlled digitized output sample.\nThe behavior is the pretty much the same, both for \\(V_{DD}\\) equaling 3.3 V or 1.5 V, where only the small spikes on the latch output are smaller for 3.3 V.\nThe designs that are considerable as the final results are given within our design directory with “final_working_comp.sch”, “latched_comp.sch” and “latched_comp_dff.sch”, the latter also including a d-flip-flop based on design objects PDK.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Design of an Analog-Digital-Converter after the ADS1115</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html",
    "href": "lab/elie5/index.html",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "",
    "text": "7.1 Objective\nIC level designing of an ADC based on ADS1115, understanding the working principle of an ADC via circuit simulations and an IC design in xschem based on SG13G2 package. SG13G2 is a 130nm process architecture based package developed by IHP.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#system-overview",
    "href": "lab/elie5/index.html#system-overview",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.2 System Overview",
    "text": "7.2 System Overview\n\n\n\n\n\n\nflowchart LR\n    A(ADXL335) --&gt; B(ADS1115)\n    B --&gt; C(ESP8266)\n    C --&gt; D{Measurement}\n    D --&gt; E(Thonny Micropython)\n    D --&gt; F(Arduino IDE C)\n\n\n\n\nFigure 7.1: Modular Board-Level Sensor System.\n\n\n\n\n\nThe modular board-level sensor system illustrated in Figure 1 is designed for capturing and processing acceleration data using a combination of hardware and software components. The system begins with the ADXL335, a 3-axis analog accelerometer, which measures acceleration and provides an analog voltage output. This signal is then converted into a digital format by the ADS1115, a high-resolution 16-bit ADC, ensuring accurate data transmission. The ESP8266, a Wi-Fi-enabled microcontroller, receives this digitized data, processes it, and facilitates further measurement analysis. The system supports two different programming environments: Thonny MicroPython, which allows for Python-based scripting and quick prototyping, and Arduino IDE C, which enables traditional C-based firmware development. The flexibility of this system makes it highly adaptable for IoT applications, real-time monitoring, and embedded sensor-based projects, providing a reliable platform for data acquisition and wireless transmission.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#introduction",
    "href": "lab/elie5/index.html#introduction",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.3 Introduction",
    "text": "7.3 Introduction\nA Sigma-Delta (ΣΔ) Modulator is an advanced signal conversion system commonly used for high-resolution A/D and D/A conversion. It employs oversampling, quantization, and noise shaping to achieve superior performance, particularly in applications requiring precise signal representation. Unlike conventional Nyquist-rate converters, ΣΔ modulators sample the input signal at a much higher rate, reducing the need for complex anti-aliasing filters. The noise shaping technique pushes quantization noise to higher frequencies, where it can be easily removed by digital filtering, leading to a significant improvement in signal-to-noise ratio (SNR). In A/D conversion, the Sigma-Delta modulator first filters the input analog signal to remove high-frequency components, preventing aliasing. The filtered signal is then sampled at a high rate and quantized, often using a simple 1-bit or multi-bit quantizer. A feedback loop, consisting of an integrator and a digital filter, continuously adjusts the quantization error, shaping the noise spectrum. The resulting digital output, though initially at a high sampling rate, is then passed through a decimation filter, which reduces the sampling rate while maintaining high resolution. In D/A conversion, the process is reversed. A digital input sequence is converted to an analog signal using a Digital-to-Analog Converter (DAC), followed by an analog hold stage that maintains each sample value for a short duration. The output is then passed through a reconstruction filter, which smooths the signal and removes high-frequency artifacts introduced during digital processing.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#working-principle-of-sigma-delta-σ-modulator",
    "href": "lab/elie5/index.html#working-principle-of-sigma-delta-σ-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.4 Working principle of Sigma-Delta (Σ∆) Modulator",
    "text": "7.4 Working principle of Sigma-Delta (Σ∆) Modulator\nThe process begins with an analog input signal, which is fed into a Sigma-Delta (ΣΔ) Modulator. This modulator operates at a significantly higher sampling rate (fₛ) compared to the Nyquist rate. The oversampling technique effectively reduces the impact of quantization noise by spreading it over a wider frequency range. A key feature of the modulator is noise shaping, which shifts quantization noise to higher frequencies, where it can be filtered out in the digital domain.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#building-block-of-sigma-delta-σ-modulator",
    "href": "lab/elie5/index.html#building-block-of-sigma-delta-σ-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.5 Building Block of Sigma-Delta (Σ∆) Modulator",
    "text": "7.5 Building Block of Sigma-Delta (Σ∆) Modulator\n\n\n\nFigure 2: Conversion Process in ADC and DAC Systems.\n\n\nSigma-Delta modulation is widely used in high-resolution applications such as audio processing, communications, and precision measurement due to its ability to reduce quantization noise and enhance signal quality. In A/D conversion, the analog input signal first undergoes anti-alias filtering, which removes unwanted high-frequency components that could cause aliasing during sampling. The filtered signal is then sampled at a high rate, often exceeding the Nyquist rate, capturing discrete points of the waveform. This sampled signal is then quantized, where each sample is assigned a digital value, producing a sequence such as 2, 7, 0, 15, etc. The high sampling rate and noise shaping techniques used in Sigma-Delta modulation push quantization noise to higher frequencies, improving resolution after digital filtering.\nThe D/A conversion process reverses this operation. The digital sequence is first converted back into an analog signal using a Digital-to-Analog Converter (DAC). Since the DAC output consists of discrete steps, an analog hold stage maintains each sample value momentarily. This is followed by a reconstruction filter, which smooths the signal, removing high-frequency components and restoring the continuous analog waveform.\nBy utilizing oversampling and noise shaping, Sigma-Delta modulators achieve higher accuracy and lower distortion than conventional converters. These characteristics make them ideal for applications requiring high dynamic range and low power consumption, such as audio codecs, RF systems, and industrial sensors.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#behavioural-model-of-sigma-delta-modulator",
    "href": "lab/elie5/index.html#behavioural-model-of-sigma-delta-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.6 Behavioural Model of Sigma-Delta Modulator",
    "text": "7.6 Behavioural Model of Sigma-Delta Modulator\n\n\n\nFigure 3: Block diagram of Sigma-Delta Modulator.\n\n\nThe Sigma-Delta (ΣΔ) Modulator is an essential technique for high-resolution analog-to-digital (A/D) conversion, widely used in applications such as audio processing, biomedical instrumentation, and communication systems. The behavioral model of a Sigma-Delta Modulator consists of two primary components: an oversampling modulator and a digital/decimation filter, both working together to produce a high-resolution digital output. The process begins with an analog input signal that enters the ΣΔ Modulator, which operates at a significantly higher sampling rate (fₛ) than the Nyquist rate. This technique, known as oversampling, helps distribute quantization noise across a broader frequency range. Inside the modulator, a feedback loop with a loop filter and a quantizer processes the input signal, shaping the quantization noise by pushing it to higher frequencies, a process referred to as noise shaping. The output of the ΣΔ Modulator is a high-rate digital signal containing substantial high-frequency noise, which is then refined through a digital filter and a decimator. The digital filter removes unwanted high-frequency components, while the decimator reduces the sampling rate from fₛ to fᴅ, optimizing the signal for further processing while maintaining high resolution.\nThe block diagram illustrates this process step by step. The analog input first enters the ΣΔ Modulator, which operates at a high sampling rate (fₛ) to perform noise shaping and quantization. The resulting high-frequency digital signal then passes through a digital filter, which smooths the data by eliminating unnecessary noise. After filtering, the decimator reduces the sampling rate to an optimal data rate (fᴅ) while preserving signal integrity, ultimately producing a high-resolution digital output. The decimation ratio (fₛ / fᴅ) determines the extent of data rate reduction, ensuring efficient conversion.\nThe Sigma-Delta Modulator offers several advantages over conventional ADC methods. It achieves high resolution through oversampling and noise shaping, effectively minimizing quantization noise. Unlike traditional ADCs that rely on precise analog components, the ΣΔ Modulator leverages digital signal processing, simplifying circuit design and improving power efficiency. Due to its low power consumption and superior noise performance, it is widely used in applications such as high-fidelity audio ADCs and DACs, biomedical monitoring systems (e.g., ECG and EEG devices), industrial sensor measurements, and wireless communication receivers. Therefore, the Sigma-Delta Modulator is a highly effective method for A/D conversion, providing a high-resolution, low-noise digital output. The block diagram effectively illustrates its functionality, highlighting how the combination of oversampling, noise shaping, digital filtering, and decimation achieves superior signal processing performance. This makes Sigma-Delta Modulators the preferred choice for applications requiring precision, efficiency, and low power consumption in modern audio, medical, industrial, and communication technologies.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#simulink-implementation-of-1st-order-sigma-delta-modulator",
    "href": "lab/elie5/index.html#simulink-implementation-of-1st-order-sigma-delta-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.7 Simulink Implementation of 1st order Sigma-Delta Modulator",
    "text": "7.7 Simulink Implementation of 1st order Sigma-Delta Modulator\n\n\n\nFigure 4: Simulink Model for First Order Sigma-Delta Modulator.\n\n\nThe Simulink implementation of a first-order Sigma-Delta (ΣΔ) Modulator, a widely used technique in analog-to-digital conversion (ADC) and digital signal processing (DSP). The system begins with an input signal, represented as u=1, which is processed through a summation block. This block subtracts the feedback signal v from the input to generate an error signal. The error signal is then passed to an integrator, whose transfer function represents a discrete-time integration process. The integrator accumulates the difference over time, effectively shaping the quantization noise.\nNext, the signal moves to a comparator, which acts as a quantizer by converting the continuous signal into a binary output, either 0 or 1. This digital output, denoted as v, is then fed back into the summation block, closing the loop and ensuring a continuous correction of errors. The feedback mechanism plays a crucial role in noise shaping, pushing quantization noise to higher frequencies where it can be effectively filtered. The first-order Sigma-Delta Modulator utilizes oversampling to improve resolution beyond the Nyquist rate, making it suitable for applications such as high-resolution ADCs, audio processing, and sensor data conversion. While this is a first-order implementation, higher-order versions offer even better noise shaping. The fundamental advantage of this system is its ability to convert an analog input into a high-frequency stream of digital bits while minimizing quantization errors through feedback and integration.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#matlab-output-of-1st-order-sigma-delta-modulator",
    "href": "lab/elie5/index.html#matlab-output-of-1st-order-sigma-delta-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.8 Matlab output of 1st Order Sigma-Delta Modulator",
    "text": "7.8 Matlab output of 1st Order Sigma-Delta Modulator\n\n\n\nFigure 5: First-Order ΣΔ Modulator Output Signal in Time Domain.\n\n\nThe output of a first-order Sigma-Delta (ΣΔ) Modulator, depicting the relationship between the continuous input signal (u) and the modulated digital output (v) over time. The x-axis represents normalized time (t/T), while the y-axis indicates amplitude. The blue curve represents the input signal, which appears to be a low-frequency sinusoidal wave, whereas the orange signal represents the modulated output, characterized by rapid switching between +1 and -1. This high-frequency switching in the output is a key feature of Sigma-Delta modulation, where the density of these transitions varies depending on the amplitude of the input signal.\nWhen the input signal reaches its peak, the output consists of a higher density of positive pulses, whereas near zero crossings, the switching between +1 and -1 becomes more balanced. Similarly, for negative amplitudes, the density of negative pulses increases. This behaviour is known as Pulse Density Modulation (PDM) and is a direct consequence of the feedback and integration mechanism in the Sigma-Delta Modulator. The high-frequency quantization noise generated by this process is shaped and pushed to higher frequencies, allowing it to be filtered effectively in post-processing.\nThis type of modulation is widely used in applications requiring high-precision analog-to-digital conversion, such as high-resolution ADCs, audio signal processing, and sensor data acquisition. The key advantage of a Sigma-Delta Modulator is that it allows a simple 1-bit quantizer to achieve high resolution through oversampling and noise shaping, making it ideal for modern digital signal processing systems.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#spectral-analysis-of-1st-order-sigma-delta-modulator-by-using-fft-with-osr512",
    "href": "lab/elie5/index.html#spectral-analysis-of-1st-order-sigma-delta-modulator-by-using-fft-with-osr512",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.9 Spectral Analysis of 1st Order Sigma-Delta Modulator by using FFT with OSR=512",
    "text": "7.9 Spectral Analysis of 1st Order Sigma-Delta Modulator by using FFT with OSR=512\n\n\n\nFigure 6: DFT Spectrum of a First-Order ΣΔ Modulator Output.\n\n\nThe Spectral Analysis of a first-order Sigma-Delta Modulator using Fast Fourier Transform (FFT) with an Oversampling Ratio (OSR) of 512. The x-axis denotes the normalized frequency (f/fs), while the y-axis represents the Discrete Fourier Transform (DFT) magnitude in dBFS (decibels relative to full scale). The plot shows a strong low-frequency signal component at the leftmost part of the graph, corresponding to the desired input signal, while the rest of the spectrum contains quantization noise that increases towards higher frequencies. This noise shaping characteristic is a fundamental property of Sigma-Delta modulation, where quantization noise is pushed towards higher frequencies, making it easier to remove with a low-pass filter. The high OSR value of 512 indicates significant oversampling, which helps in reducing in-band noise and improving resolution. The plot confirms that the first-order modulator exhibits a first-order noise shaping behaviour, where the noise power increases with frequency, validating the efficiency of Sigma-Delta modulation in enhancing signal quality through oversampling and noise shaping techniques.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#simulink-implementation-of-2nd-order-sigma-delta-modulator",
    "href": "lab/elie5/index.html#simulink-implementation-of-2nd-order-sigma-delta-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.10 Simulink Implementation of 2nd Order Sigma-Delta Modulator",
    "text": "7.10 Simulink Implementation of 2nd Order Sigma-Delta Modulator\n\n\n\nFigure 7: Simulink Model for Second Order Sigma-Delta Modulator.\n\n\nAn important part of high-resolution analog-to-digital conversion (ADC) is a Second-Order Sigma-Delta (ΣΔ) modulator, which is represented by this Simulink model. The modulator’s behavior is determined by scaling coefficients, a feedback loop, a comparator, and two integrators. A scaling factor b (1) is applied to the input signal (u) before it is fed into the first integrator, which then accumulates the signal and sends it to the second stage. The second integrator increases the suppression of in-band quantization noise, which further improves the noise shaping. feedback coefficients a(1) and a(2)are incorporated by both integrators, which improve performance and control system stability. The comparator receives the output of the second integrator, multiplied by c (2), and uses pulse-density modulation (PDM) to transform the continuous signal into a digital bitstream (v). The feedback loop shapes the quantization noise and makes sure the system dynamically modifies its output to follow the input signal. This second-order design offers superior noise shaping than a first-order ΣΔ modulator. It does this by moving more quantization noise to higher frequencies, where it may be filtered out, increasing the signal-to-noise ratio (SNR). Applications for this structure include precise measurement, biological signal processing, and audio ADCs.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#matlab-output-of-2nd-order-sigma-delta-modulator",
    "href": "lab/elie5/index.html#matlab-output-of-2nd-order-sigma-delta-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.11 Matlab output of 2nd Order Sigma-Delta Modulator",
    "text": "7.11 Matlab output of 2nd Order Sigma-Delta Modulator\n\n\n\nFigure 8: Second-Order ΣΔ Modulator Output Signal in Time Domain.\n\n\nThe output of a second-order Sigma-Delta(ΣΔ) Modulator, showing the relationship between the continuous input signal and the high-frequency modulated digital output. The x-axis represents time, while the y-axis represents amplitude, with the modulator’s output switching between +1+1+1 and −1-1−1. Compared to the first-order modulator, the second-order modulator provides improved noise shaping, leading to a more dynamic and concentrated pulse density modulation (PDM). The digital output exhibits a higher density of transitions where the input amplitude is larger and fewer transitions where the signal is near zero. This behaviour results from the double integration process, which enhances quantization noise shaping by pushing even more noise energy to higher frequencies, allowing for more effective filtering. The increased pulse clustering reduces in-band noise, improving the signal-to-noise ratio (SNR) and making the second-order Sigma-Delta Modulator suitable for high-resolution analog-to-digital conversion in applications such as audio processing and high-precision sensors.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#spectral-analysis-of-2nd-order-sigma-delta-modulator-by-using-fft-with-osr512",
    "href": "lab/elie5/index.html#spectral-analysis-of-2nd-order-sigma-delta-modulator-by-using-fft-with-osr512",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.12 Spectral Analysis of 2nd Order Sigma-Delta Modulator by using FFT with OSR=512",
    "text": "7.12 Spectral Analysis of 2nd Order Sigma-Delta Modulator by using FFT with OSR=512\n\n\n\nFigure 9: DFT Spectrum of a First-Order ΣΔ Modulator Output.\n\n\nThe Spectral Analysis of a Second-Order Sigma-Delta (ΣΔ) Modulator using Fast Fourier Transform (FFT) with an Oversampling Ratio (OSR) of 512. The x-axis denotes the normalized frequency (f/fs), while the y-axis represents the DFT magnitude in dBFS (decibels relative to full scale). The plot shows a dominant low-frequency signal at the left most part, which corresponds to the input signal, while the rest of the spectrum is primarily quantization noise. Compared to a first-order modulator, the second-order ΣΔ modulator exhibits stronger noise shaping, with a more significant reduction in in-band quantization noise. The noise floor initially remains very low and increases at higher frequencies, pushing most of the noise energy toward the higher spectrum where it can be effectively filtered. This enhanced noise shaping behaviour improves the signal-to-noise ratio (SNR) and allows for higher resolution in analog-to-digital conversion. The results confirm that the second-order Sigma-Delta Modulator achieves better performance than the first-order modulator, making it more suitable for applications requiring high-precision signal processing, such as audio ADCs and sensor measurements.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#ltspice-system-design-of-1st-order-sigma-delta-modulator",
    "href": "lab/elie5/index.html#ltspice-system-design-of-1st-order-sigma-delta-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.13 LTSpice System Design of 1st Order Sigma-Delta Modulator",
    "text": "7.13 LTSpice System Design of 1st Order Sigma-Delta Modulator\n\n\n\nFigure 10: Implementation of a First-Order ΣΔ Modulator in LTSpice.\n\n\nIn signal processing applications, the LTSpice simulation of a First-Order Sigma-Delta (ΣΔ) modulator depicted in the figure is a basic circuit for analog-to-digital conversion (ADC). To improve resolution and shape the quantization noise, the design incorporates a switched-capacitor integrator, a comparator, and a D flip-flop for feedback. To ensure accurate charge transfer and reduce clock feedthrough effects, a sequence of switches controlled by non-overlapping clock signals (phi1 and phi2) sample the analog input signal (Vin).\nThe integrator (op-amp), which is at the center of the circuit, accumulates the error between the input and feedback signal (Vfb). In the process of charge redistribution, the capacitors (Cs1 and Cl1) are essential. A comparator receives the integrator output (Vx1) and decides whether the output should be a digital “1” or “0.” The D flip-flop (A1) then latches this decision, guaranteeing a steady digital output (Vd) in time with the clock signals. By using the oversampling and noise shaping principles, the modulator continuously modifies the output bitstream to gradually resemble the input rather than immediately encoding the information.\nThe simulation configuration comprises parameter settings for the following: input frequency (80 Hz), common-mode voltage (VCM), supply voltage (VDD = 3V), and capacitor values (Cs1 =Cl1 = 1pF), 0.25pF. The .tran 40m uic command captures enough data for FFT analysis by doing a transient analysis for 40 milliseconds. By ensuring that only pertinent node voltages (such as Vx1, Vphi1, Vphi2, Vq, Vd, Vfb, and Vin) are captured, the .save command maximizes simulation efficiency. In order to dynamically modify the output and lessen in-band quantization noise, the feedback loop is essential. We can investigate quantization noise shaping, oversampling effects, and system stability using this first-order Sigma-Delta modulator implementation in LTSpice, which makes it a crucial tool for high-resolution ADC design. ΣΔ modulation is perfect for audio processing, sensor data collection, and communication systems because it uses a simpler circuit and achieves higher resolution than typical Nyquist-rate ADCs.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#ltspice-output-of-1st-order-sigma-delta-modulator",
    "href": "lab/elie5/index.html#ltspice-output-of-1st-order-sigma-delta-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.14 LTSpice Output of 1st order Sigma-Delta Modulator",
    "text": "7.14 LTSpice Output of 1st order Sigma-Delta Modulator\n\n\n\nFigure 11: Time-Domain Response of a First-Order ΣΔ Modulator.\n\n\nThe input and output signals of a First-Order Sigma-Delta (ΣΔ) modulator, which uses noise shaping and oversampling techniques for high-resolution analog-to-digital conversion (ADC), are represented by the graph. The analog input signal is represented by the green waveform (V(vin)), which is a sinusoidal waveform that is digitalized. In order to show how the modulator can shape quantization noise, the blue waveform (V(vq)) represents the internal quantized signal, which is influenced by the integrator and feedback loop. As the amplitude of the input signal changes, so does the density of high (1s) and low (0s) pulses in the final pulse-density modulated (PDM) output, which is represented by the red waveform (V(vd)). While the bitstream maintains a balanced distribution of 1s and 0s around zero crossings, this modulation approach guarantees that there are more 1s at higher input levels using the noise shaping concept, the ΣΔ modulator efficiently drives quantization noise to higher frequencies. This improves the in-band signal-to-noise ratio (SNR), and high-frequency noise is subsequently eliminated using low-pass decimation filtering. For low-power applications where great dynamic range and power efficiency are crucial, such as sensor interface, low-frequency audio processing, and biomedical data acquisition, this technique makes first-order ΣΔ modulators perfect.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#ltspice-system-design-of-2nd-order-sigma-delta-modulator",
    "href": "lab/elie5/index.html#ltspice-system-design-of-2nd-order-sigma-delta-modulator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.15 LTSpice System Design of 2nd Order Sigma-Delta Modulator",
    "text": "7.15 LTSpice System Design of 2nd Order Sigma-Delta Modulator\n\n\n\nFigure 12: Implementation of a Second-Order ΣΔ Modulator in LTSpice.\n\n\nIn high-precision analog-to-digital conversion (ADC), a second-order sigma-delta (ΣΔ) modulator is a crucial part, as shown in this LTSpice circuit diagram. A comparator, a D flip-flop, operational amplifiers, and switched-capacitor circuits are all incorporated into the design to create a feedback loop that improves quantization accuracy via noise shaping. Proper charge transfer is ensured by processing the sine wave input signal (Vin) through a switched-capacitor network that is regulated by non-overlapping clock signals (phi1 and phi2). The first step is a switched-capacitor integrator, in which the difference between the input and feedback signal (Vfb) is accumulated by capacitors (Cs1) and an operational amplifier. After that, a second integrator pushes quantization noise to higher frequencies, further fine-tuning the noise shape.\nThe analog signal is subsequently transformed into a pulse-density modulated (PDM) digital output by passing the second-stage output (Vx2) via a comparator. To provide steady output, a D flip-flop (DFF) synchronizes the bitstream (Vd) with the clock signals. By reducing quantization mistakes and increasing accuracy, the feedback loop continuously improves the signal. The transient analysis (.tran 40m uic) guarantees a 40ms simulation run without determining the DC operating point, enabling accurate modulator behavior observation. Evaluating the output using an FFT analysis aids in determining how well noise shaping and overall performance work. This second-order arrangement greatly lowers in-band quantization noise in comparison to a first-order modulator, moving it toward higher frequencies where it may be efficiently filtered.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#ota-overview",
    "href": "lab/elie5/index.html#ota-overview",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.16 OTA Overview",
    "text": "7.16 OTA Overview\n\n\n\nFigure 13: 5T OTA\n\n\nThe 5-Transistor Operational Transconductance Amplifier (5T OTA) is a compact and power-efficient circuit widely used in analog signal processing applications. It consists of a differential input pair (M1, M2), an active load (M3, M4), and a current source (M5, M6, and I_bias), making it a simple yet effective voltage-to-current amplifier. The circuit operates by amplifying the differential input voltage and converting it into an output current, with the active load enhancing the voltage gain. Due to its minimal transistor count, the 5T OTA offers advantages such as low power consumption, compact design, and ease of integration in ICs. It is commonly employed in low-power filters, sensor interfaces, and biomedical applications. However, it has limitations, including lower gain and reduced common-mode rejection ratio compared to more complex OTA architectures. Despite these trade-offs, the 5T OTA remains a fundamental building block in analog circuit design, particularly in low-power and portable applications.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#basics-of-5t-ota",
    "href": "lab/elie5/index.html#basics-of-5t-ota",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.17 Basics of 5T OTA",
    "text": "7.17 Basics of 5T OTA\n\n7.17.1 Purpose of an OTA\nAn Operational Transconductance Amplifier (OTA) is an analog circuit that converts a differential input voltage (V_in+ - V_in-) into an output current (I_out). Unlike a traditional operational amplifier (op-amp), which provides a voltage output and often relies on negative feedback for operation, an OTA’s output is a current, making it suitable for applications such as voltage-controlled amplifiers, filters, and signal processing in low-power systems.\n\n\n7.17.2 5T OTA Topology\nThe 5-Transistor OTA (5T OTA) is a simple yet efficient differential amplifier with a current mirror load. It consists of the following key components:\n\nInput Differential Pair (M1, M2): These two transistors form the differential input stage, amplifying the voltage difference between the input terminals.\nTail Current Source (M5): This transistor sets the bias current for the differential pair, controlling the overall transconductance (g_m) of the OTA.\nCurrent Mirror Load (M3, M4): These two transistors form an active load that converts the differential currents from the input pair into a single-ended output current.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#sizing-an-ota",
    "href": "lab/elie5/index.html#sizing-an-ota",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.18 Sizing an OTA",
    "text": "7.18 Sizing an OTA\nOperational Transconductance Amplifier (OTA) sizing involves determining the W/L (Width/Length) ratios of each NMOS and PMOS transistor in the circuit to meet desired performance specifications such as gain, bandwidth, power consumption, and transconductance (g_m). Using the MOSFET sizing script available at MOSFET Sizing Tool , we can compute these ratios based on the process parameters and design constraints.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#testing-an-ota",
    "href": "lab/elie5/index.html#testing-an-ota",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.19 Testing an OTA",
    "text": "7.19 Testing an OTA\nBased on the derived W/L ratios, we implemented a 5T OTA model in Xschem, ensuring proper transistor sizing and connectivity. A dedicated symbol (OTA_test) was created for seamless integration into larger circuits. The OTA was tested through DC operating point analysis, AC analysis for gain and bandwidth, transient response evaluation, and common-mode rejection ratio (CMRR) measurements to verify performance. Simulation results confirmed that the OTA operates as expected, making it suitable for further integration into analog signal processing applications.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#ac-analysis-of-an-ota",
    "href": "lab/elie5/index.html#ac-analysis-of-an-ota",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.20 AC analysis of an OTA",
    "text": "7.20 AC analysis of an OTA\n\n\n\nFigure 14: AC Analysis Testbench\n\n\n\n\n\nFigure 15: AC Analysis Output\n\n\nTo evaluate the frequency response of the 5T OTA, we performed an AC analysis using Xschem and simulated the open-loop gain. The analysis involved applying a small-signal AC input and sweeping the frequency over a wide range. The gain was then plotted on a logarithmic scale to observe the frequency response characteristics. From the plot, we obtained a DC gain of approximately 40 dB, confirming that the OTA provides a significant amplification factor in the low-frequency region. The frequency response also shows a characteristic roll-off at higher frequencies, which defines the unity-gain bandwidth and overall performance of the OTA. This AC analysis is essential for understanding the amplifier’s stability, bandwidth, and suitability for specific analog applications.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#ota-as-a-voltage-buffer",
    "href": "lab/elie5/index.html#ota-as-a-voltage-buffer",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.21 OTA as a Voltage Buffer",
    "text": "7.21 OTA as a Voltage Buffer\n\n\n\nFigure 16: OTA Voltage Buffer Testbench\n\n\n\n\n\nFigure 17: OTA Voltage Buffer Output\n\n\nTo validate the 5T OTA’s performance, we designed a voltage buffer testbench using Xschem. The OTA was configured to operate in its linear region, where it acts as a unity-gain amplifier. A DC sweep was applied to the input (Vin), and the corresponding Vout was plotted to verify the behavior. The simulation results confirm that the OTA maintains a nearly linear voltage transfer characteristic, indicating that it effectively functions as a buffer. This test demonstrates the OTA’s ability to faithfully reproduce input variations with minimal distortion, making it suitable for applications such as signal conditioning and impedance isolation.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#ota-as-a-comparator",
    "href": "lab/elie5/index.html#ota-as-a-comparator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.22 OTA as a Comparator",
    "text": "7.22 OTA as a Comparator\n\n\n\nFigure 18: OTA Comparator Testbench\n\n\n\n\n\nFigure 19: OTA Comparator Output\n\n\nTo further validate the OTA’s functionality, we designed a test bench to evaluate its performance as a comparator. Given that the OTA architecture inherently supports differential input processing, it can be used for comparison operations, as seen in IDSM1 and IDSM2. In the test setup, a sine wave signal was applied to one input while a DC reference voltage was provided to the other. The simulation results confirm that the OTA successfully acts as a comparator, producing a high or low output depending on whether the input signal is above or below the reference voltage. The observed behavior aligns with expected theoretical results, demonstrating the OTA’s capability in signal processing and decision-making applications such as analog-to-digital conversion and threshold detection.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#ota-as-an-integrator",
    "href": "lab/elie5/index.html#ota-as-an-integrator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.23 OTA as an Integrator",
    "text": "7.23 OTA as an Integrator\n\n\n\nFigure 20: OTA Integrator Testbench\n\n\n\n\n\nFigure 21: OTA Integrator Output\n\n\n\n\n\nFigure 22: OTA Integrator Ideal Output\n\n\nNow that the OTA has been verified to function as expected, we proceeded to design an OTA-based integrator using a switched capacitor integrator configuration. The circuit was implemented and simulated to observe the integration of an input signal over time. The results confirm that the OTA successfully performs the integration operation, producing a steadily increasing output voltage, as expected from an ideal integrator. The stepped nature of the output in the simulation is a characteristic of the switched capacitor approach, demonstrating charge accumulation over discrete time steps.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#switched-capacitor-integrator",
    "href": "lab/elie5/index.html#switched-capacitor-integrator",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.24 Switched Capacitor Integrator",
    "text": "7.24 Switched Capacitor Integrator\nThe behavior of the OTA as a switched-capacitor integrator is not working as expected and exhibits leaky behavior.\nA switched-capacitor integrator is a circuit that performs the integration of an input voltage signal using capacitors and switches controlled by a clock signal. It mimics the behavior of a continuous-time integrator in the discrete-time domain. The integration process occurs in three phases: sampling, charge transfer, and accumulation. During the sampling phase, a capacitor charges to the input voltage, and in the transfer phase, this charge is moved to the integration capacitor, resulting in a cumulative voltage change. However, in the current implementation, the integrator shows leakage, meaning the charge is not being properly retained in the integration capacitor. This could be due to charge injection from the switches, insufficient capacitance values, or non-idealities in the OTA itself. Further debugging and parameter tuning are required to achieve the expected integration behavior.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#conclusion",
    "href": "lab/elie5/index.html#conclusion",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.25 Conclusion",
    "text": "7.25 Conclusion\nThe design and implementation of an OTA-based switched-capacitor integrator proved to be a challenging endeavor. While the theoretical analysis and initial circuit design were based on the ideal behavior of an OTA, including non-idealities and mismatches in the OTA’s performance, deviated significantly from the expected results. These non-idealities introduced complexities that hindered the intended operation of the switched-capacitor integrator.\nDebugging this design highlighted the importance of accounting for OTA both the design and simulation phases. Future efforts could focus on refining the OTA design to address these limitations, as well as exploring circuit-level compensation techniques to improve the performance of the integrator. With further optimization and a deeper understanding of the OTA’s behavior, the implementation of a switched-capacitor integrator using an OTA remains a promising approach for high-performance analog signal processing.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  },
  {
    "objectID": "lab/elie5/index.html#references",
    "href": "lab/elie5/index.html#references",
    "title": "7  MBSE of a Delta Sigma Modulator based IC Design",
    "section": "7.26 References",
    "text": "7.26 References\n\nhttps://iic-jku.github.io/analog-circuit-design/#sec-basic-ota\nhttps://iic-jku.github.io/analog-circuit-design/sizing/sizing_mosfet_diode-preview.html\nB. E. Boser and B. A. Wooley. The design of sigma-delta modulation analog-to-digital converters. IEEE Journal of Solid-State Circuits, 23(6):1298–1308, December 1988.\nBernhard E. Boser. Eecs247: Analog-digital interface integrated circuits. Course notes, University of California Berkeley, February 2003.\nMichael Clifford. Fundamental principles behind the sigma-delta adc topology: Part 1. Technical report, Analog Devices (AD), January 2016.\nMichael Clifford. Fundamental principles behind the sigma-delta adc topology: Part 2. Technical report, Analog Devices (AD), February 2016.",
    "crumbs": [
      "Design Reports",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>MBSE of a Delta Sigma Modulator based IC Design</span>"
    ]
  }
]